schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  node(id: ID!): Node
  video(first: Int after: String last: Int before: String where: VideoFilterInput order: [VideoSortInput!]): VideoConnection
  videoId(id: ID!): Video!
  videosByIds(ids: [ID!]!): [Video!]!
  user(first: Int after: String last: Int before: String where: UserFilterInput order: [UserSortInput!]): UserConnection
  userId(id: ID!): User!
  usersByIds(ids: [ID!]!): [User!]!
  userClaim(first: Int after: String last: Int before: String where: UserClaimFilterInput order: [UserClaimSortInput!]): UserClaimConnection
  userClaimId(id: ID!): UserClaim!
  userClaimsByIds(ids: [ID!]!): [UserClaim!]!
  userGroup(first: Int after: String last: Int before: String where: UserGroupFilterInput order: [UserGroupSortInput!]): UserGroupConnection
  userGroupId(id: ID!): UserGroup!
  userGroupsByIds(ids: [ID!]!): [UserGroup!]!
  userGroupRole(first: Int after: String last: Int before: String where: UserGroupRoleFilterInput order: [UserGroupRoleSortInput!]): UserGroupRoleConnection
  userGroupRoleId(id: ID!): UserGroupRole!
  userGroupRolesByIds(ids: [ID!]!): [UserGroupRole!]!
  survey(first: Int after: String last: Int before: String where: SurveyFilterInput order: [SurveySortInput!]): SurveyConnection
  surveyId(id: ID!): Survey!
  surveysByIds(ids: [ID!]!): [Survey!]!
  surveyQuestion(first: Int after: String last: Int before: String where: SurveyQuestionFilterInput order: [SurveyQuestionSortInput!]): SurveyQuestionConnection
  surveyQuestionId(id: ID!): SurveyQuestion!
  surveyQuestionsByIds(ids: [ID!]!): [SurveyQuestion!]!
  surveyQuestionAnswer(first: Int after: String last: Int before: String where: SurveyQuestionAnswerFilterInput order: [SurveyQuestionAnswerSortInput!]): SurveyQuestionAnswerConnection
  surveyQuestionAnswerId(id: ID!): SurveyQuestionAnswer!
  surveyQuestionAnswersByIds(ids: [ID!]!): [SurveyQuestionAnswer!]!
  surveyQuestionGroup(first: Int after: String last: Int before: String where: SurveyQuestionGroupFilterInput order: [SurveyQuestionGroupSortInput!]): SurveyQuestionGroupConnection
  surveyQuestionGroupId(id: ID!): SurveyQuestionGroup!
  surveyQuestionGroupsByIds(ids: [ID!]!): [SurveyQuestionGroup!]!
  surveyQuestionOption(first: Int after: String last: Int before: String where: SurveyQuestionOptionFilterInput order: [SurveyQuestionOptionSortInput!]): SurveyQuestionOptionConnection
  surveyQuestionOptionId(id: ID!): SurveyQuestionOption!
  surveyQuestionOptionsByIds(ids: [ID!]!): [SurveyQuestionOption!]!
  surveyQuestionSelect(first: Int after: String last: Int before: String where: SurveyQuestionSelectFilterInput order: [SurveyQuestionSelectSortInput!]): SurveyQuestionSelectConnection
  surveyQuestionSelectId(id: ID!): SurveyQuestionSelect!
  surveyQuestionSelectsByIds(ids: [ID!]!): [SurveyQuestionSelect!]!
  role(first: Int after: String last: Int before: String where: RoleFilterInput order: [RoleSortInput!]): RoleConnection
  roleId(id: ID!): Role!
  rolesByIds(ids: [ID!]!): [Role!]!
  roleClaim(first: Int after: String last: Int before: String where: RoleClaimFilterInput order: [RoleClaimSortInput!]): RoleClaimConnection
  roleClaimId(id: ID!): RoleClaim!
  roleClaimsByIds(ids: [ID!]!): [RoleClaim!]!
  post(first: Int after: String last: Int before: String where: PostFilterInput order: [PostSortInput!]): PostConnection
  postId(id: ID!): Post!
  postsByIds(ids: [ID!]!): [Post!]!
  page(first: Int after: String last: Int before: String where: PageFilterInput order: [PageSortInput!]): PageConnection
  pageId(id: ID!): Page!
  pagesByIds(ids: [ID!]!): [Page!]!
  number(first: Int after: String last: Int before: String where: NumberFilterInput order: [NumberSortInput!]): NumberConnection
  numberId(id: ID!): Number!
  numbersByIds(ids: [ID!]!): [Number!]!
  notificationMessage(first: Int after: String last: Int before: String where: NotificationMessageFilterInput order: [NotificationMessageSortInput!]): NotificationMessageConnection
  notificationMessageId(id: ID!): NotificationMessage!
  notificationMessagesByIds(ids: [ID!]!): [NotificationMessage!]!
  message(first: Int after: String last: Int before: String where: MessageFilterInput order: [MessageSortInput!]): MessageConnection
  messageId(id: ID!): Message!
  messagesByIds(ids: [ID!]!): [Message!]!
  job(first: Int after: String last: Int before: String where: JobFilterInput order: [JobSortInput!]): JobConnection
  jobId(id: ID!): Job!
  jobsByIds(ids: [ID!]!): [Job!]!
  jobOffer(first: Int after: String last: Int before: String where: JobOfferFilterInput order: [JobOfferSortInput!]): JobOfferConnection
  jobOfferId(id: ID!): JobOffer!
  jobOffersByIds(ids: [ID!]!): [JobOffer!]!
  image(first: Int after: String last: Int before: String where: ImageFilterInput order: [ImageSortInput!]): ImageConnection
  imageId(id: ID!): Image!
  imagesByIds(ids: [ID!]!): [Image!]!
  household(first: Int after: String last: Int before: String where: HouseholdFilterInput order: [HouseholdSortInput!]): HouseholdConnection
  householdId(id: ID!): Household!
  householdsByIds(ids: [ID!]!): [Household!]!
  historyForUser(first: Int after: String last: Int before: String where: HistoryForUserFilterInput order: [HistoryForUserSortInput!]): HistoryForUserConnection
  historyForUserId(id: ID!): HistoryForUser!
  historyForUsersByIds(ids: [ID!]!): [HistoryForUser!]!
  document(first: Int after: String last: Int before: String where: DocumentFilterInput order: [DocumentSortInput!]): DocumentConnection
  documentId(id: ID!): Document!
  documentsByIds(ids: [ID!]!): [Document!]!
  companiesByIds(ids: [ID!]!): [Company!]!
  company(first: Int after: String last: Int before: String where: CompanyFilterInput order: [CompanySortInput!]): CompanyConnection
  companyId(id: ID!): Company!
  chatMessage(first: Int after: String last: Int before: String where: ChatMessageFilterInput order: [ChatMessageSortInput!]): ChatMessageConnection
  chatMessageId(id: ID!): ChatMessage!
  chatMessagesByIds(ids: [ID!]!): [ChatMessage!]!
  chatRoom(first: Int after: String last: Int before: String where: ChatRoomFilterInput order: [ChatRoomSortInput!]): ChatRoomConnection
  chatRoomId(id: ID!): ChatRoom!
  chatRoomsByIds(ids: [ID!]!): [ChatRoom!]!
  emailMessage(first: Int after: String last: Int before: String where: EmailMessageFilterInput order: [EmailMessageSortInput!]): EmailMessageConnection
  emailMessageId(id: ID!): EmailMessage!
  emailMessagesByIds(ids: [ID!]!): [EmailMessage!]!
  calendar(first: Int after: String last: Int before: String where: CalendarFilterInput order: [CalendarSortInput!]): CalendarConnection
  calendarId(id: ID!): Calendar!
  calendarsByIds(ids: [ID!]!): [Calendar!]!
  calendarTask(first: Int after: String last: Int before: String where: CalendarTaskFilterInput order: [CalendarTaskSortInput!]): CalendarTaskConnection
  calendarTaskId(id: ID!): CalendarTask!
  calendarTasksByIds(ids: [ID!]!): [CalendarTask!]!
  address(first: Int after: String last: Int before: String where: AddressFilterInput order: [AddressSortInput!]): AddressConnection
  addressId(id: ID!): Address!
  addressesByIds(ids: [ID!]!): [Address!]!
}

type Mutation {
  createVideo(createVideoInput: CreateVideoInput!): MutationOutputOfCreateVideoOutput!
  delete_Model_(delete_ModelInput: DeleteVideoInput!): MutationOutputOfDeleteVideoOutput!
  readVideo(readVideoInput: ReadVideoInput!): MutationOutputOfReadVideoOutput!
  updateVideo(updateVideoInput: UpdateVideoInput!): MutationOutputOfUpdateVideoOutput!
  createUser(createUserInput: CreateUserInput!): MutationOutputOfCreateUserOutput!
  readUser(readUserInput: ReadUserInput!): MutationOutputOfReadUserOutput!
  updateUser(updateUserInput: UpdateUserInput!): MutationOutputOfUpdateUserOutput!
  createUserClaim(createUserClaimInput: CreateUserClaimInput!): MutationOutputOfCreateUserClaimOutput!
  readUserClaim(readUserClaimInput: ReadUserClaimInput!): MutationOutputOfReadUserClaimOutput!
  updateUserClaim(updateUserClaimInput: UpdateUserClaimInput!): MutationOutputOfUpdateUserClaimOutput!
  createUserGroup(createUserGroupInput: CreateUserGroupInput!): MutationOutputOfCreateUserGroupOutput!
  readUserGroup(readUserGroupInput: ReadUserGroupInput!): MutationOutputOfReadUserGroupOutput!
  updateUserGroup(updateUserGroupInput: UpdateUserGroupInput!): MutationOutputOfUpdateUserGroupOutput!
  createUserGroupRole(createUserGroupRoleInput: CreateUserGroupRoleInput!): MutationOutputOfCreateUserGroupRoleOutput!
  readUserGroupRole(readUserGroupRoleInput: ReadUserGroupRoleInput!): MutationOutputOfReadUserGroupRoleOutput!
  updateUserGroupRole(updateUserGroupRoleInput: UpdateUserGroupRoleInput!): MutationOutputOfUpdateUserGroupRoleOutput!
  createSurvey(createSurveyInput: CreateSurveyInput!): MutationOutputOfCreateSurveyOutput!
  readSurvey(readSurveyInput: ReadSurveyInput!): MutationOutputOfReadSurveyOutput!
  updateSurvey(updateSurveyInput: UpdateSurveyInput!): MutationOutputOfUpdateSurveyOutput!
  createSurveyQuestion(createSurveyQuestionInput: CreateSurveyQuestionInput!): MutationOutputOfCreateSurveyQuestionOutput!
  readSurveyQuestion(readSurveyQuestionInput: ReadSurveyQuestionInput!): MutationOutputOfReadSurveyQuestionOutput!
  updateSurveyQuestion(updateSurveyQuestionInput: UpdateSurveyQuestionInput!): MutationOutputOfUpdateSurveyQuestionOutput!
  createSurveyQuestionAnswer(createSurveyQuestionAnswerInput: CreateSurveyQuestionAnswerInput!): MutationOutputOfCreateSurveyQuestionAnswerOutput!
  readSurveyQuestionAnswer(readSurveyQuestionAnswerInput: ReadSurveyQuestionAnswerInput!): MutationOutputOfReadSurveyQuestionAnswerOutput!
  updateSurveyQuestionAnswer(updateSurveyQuestionAnswerInput: UpdateSurveyQuestionAnswerInput!): MutationOutputOfUpdateSurveyQuestionAnswerOutput!
  createSurveyQuestionGroup(createSurveyQuestionGroupInput: CreateSurveyQuestionGroupInput!): MutationOutputOfCreateSurveyQuestionGroupOutput!
  readSurveyQuestionGroup(readSurveyQuestionGroupInput: ReadSurveyQuestionGroupInput!): MutationOutputOfReadSurveyQuestionGroupOutput!
  updateSurveyQuestionGroup(updateSurveyQuestionGroupInput: UpdateSurveyQuestionGroupInput!): MutationOutputOfUpdateSurveyQuestionGroupOutput!
  createSurveyQuestionOption(createSurveyQuestionOptionInput: CreateSurveyQuestionOptionInput!): MutationOutputOfCreateSurveyQuestionOptionOutput!
  readSurveyQuestionOption(readSurveyQuestionOptionInput: ReadSurveyQuestionOptionInput!): MutationOutputOfReadSurveyQuestionOptionOutput!
  updateSurveyQuestionOption(updateSurveyQuestionOptionInput: UpdateSurveyQuestionOptionInput!): MutationOutputOfUpdateSurveyQuestionOptionOutput!
  createSurveyQuestionSelect(createSurveyQuestionSelectInput: CreateSurveyQuestionSelectInput!): MutationOutputOfCreateSurveyQuestionSelectOutput!
  readSurveyQuestionSelect(readSurveyQuestionSelectInput: ReadSurveyQuestionSelectInput!): MutationOutputOfReadSurveyQuestionSelectOutput!
  updateSurveyQuestionSelect(updateSurveyQuestionSelectInput: UpdateSurveyQuestionSelectInput!): MutationOutputOfUpdateSurveyQuestionSelectOutput!
  createRole(createRoleInput: CreateRoleInput!): MutationOutputOfCreateRoleOutput!
  readRole(readRoleInput: ReadRoleInput!): MutationOutputOfReadRoleOutput!
  updateRole(updateRoleInput: UpdateRoleInput!): MutationOutputOfUpdateRoleOutput!
  createRoleClaim(createRoleClaimInput: CreateRoleClaimInput!): MutationOutputOfCreateRoleClaimOutput!
  readRoleClaim(readRoleClaimInput: ReadRoleClaimInput!): MutationOutputOfReadRoleClaimOutput!
  updateRoleClaim(updateRoleClaimInput: UpdateRoleClaimInput!): MutationOutputOfUpdateRoleClaimOutput!
  createPost(createPostInput: CreatePostInput!): MutationOutputOfCreatePostOutput!
  readPost(readPostInput: ReadPostInput!): MutationOutputOfReadPostOutput!
  updatePost(updatePostInput: UpdatePostInput!): MutationOutputOfUpdatePostOutput!
  createPage(createPageInput: CreatePageInput!): MutationOutputOfCreatePageOutput!
  readPage(readPageInput: ReadPageInput!): MutationOutputOfReadPageOutput!
  updatePage(updatePageInput: UpdatePageInput!): MutationOutputOfUpdatePageOutput!
  createNumber(createNumberInput: CreateNumberInput!): MutationOutputOfCreateNumberOutput!
  readNumber(readNumberInput: ReadNumberInput!): MutationOutputOfReadNumberOutput!
  updateNumber(updateNumberInput: UpdateNumberInput!): MutationOutputOfUpdateNumberOutput!
  createNotificationMessage(createNotificationMessageInput: CreateNotificationMessageInput!): MutationOutputOfCreateNotificationMessageOutput!
  readNotificationMessage(readNotificationMessageInput: ReadNotificationMessageInput!): MutationOutputOfReadNotificationMessageOutput!
  updateNotificationMessage(updateNotificationMessageInput: UpdateNotificationMessageInput!): MutationOutputOfUpdateNotificationMessageOutput!
  createMessage(createMessageInput: CreateMessageInput!): MutationOutputOfCreateMessageOutput!
  readMessage(readMessageInput: ReadMessageInput!): MutationOutputOfReadMessageOutput!
  updateMessage(updateMessageInput: UpdateMessageInput!): MutationOutputOfUpdateMessageOutput!
  createJob(createJobInput: CreateJobInput!): MutationOutputOfCreateJobOutput!
  readJob(readJobInput: ReadJobInput!): MutationOutputOfReadJobOutput!
  updateJob(updateJobInput: UpdateJobInput!): MutationOutputOfUpdateJobOutput!
  createJobOffer(createJobOfferInput: CreateJobOfferInput!): MutationOutputOfCreateJobOfferOutput!
  readJobOffer(readJobOfferInput: ReadJobOfferInput!): MutationOutputOfReadJobOfferOutput!
  updateJobOffer(updateJobOfferInput: UpdateJobOfferInput!): MutationOutputOfUpdateJobOfferOutput!
  createImage(createImageInput: CreateImageInput!): MutationOutputOfCreateImageOutput!
  readImage(readImageInput: ReadImageInput!): MutationOutputOfReadImageOutput!
  updateImage(updateImageInput: UpdateImageInput!): MutationOutputOfUpdateImageOutput!
  createHousehold(createHouseholdInput: CreateHouseholdInput!): MutationOutputOfCreateHouseholdOutput!
  readHousehold(readHouseholdInput: ReadHouseholdInput!): MutationOutputOfReadHouseholdOutput!
  updateHousehold(updateHouseholdInput: UpdateHouseholdInput!): MutationOutputOfUpdateHouseholdOutput!
  createHistoryForUser(createHistoryForUserInput: CreateHistoryForUserInput!): MutationOutputOfCreateHistoryForUserOutput!
  readHistoryForUser(readHistoryForUserInput: ReadHistoryForUserInput!): MutationOutputOfReadHistoryForUserOutput!
  updateHistoryForUser(updateHistoryForUserInput: UpdateHistoryForUserInput!): MutationOutputOfUpdateHistoryForUserOutput!
  createDocument(createDocumentInput: CreateDocumentInput!): MutationOutputOfCreateDocumentOutput!
  readDocument(readDocumentInput: ReadDocumentInput!): MutationOutputOfReadDocumentOutput!
  updateDocument(updateDocumentInput: UpdateDocumentInput!): MutationOutputOfUpdateDocumentOutput!
  createCompany(createCompanyInput: CreateCompanyInput!): MutationOutputOfCreateCompanyOutput!
  readCompany(readCompanyInput: ReadCompanyInput!): MutationOutputOfReadCompanyOutput!
  updateCompany(updateCompanyInput: UpdateCompanyInput!): MutationOutputOfUpdateCompanyOutput!
  createChatMessage(createChatMessageInput: CreateChatMessageInput!): MutationOutputOfCreateChatMessageOutput!
  readChatMessage(readChatMessageInput: ReadChatMessageInput!): MutationOutputOfReadChatMessageOutput!
  updateChatMessage(updateChatMessageInput: UpdateChatMessageInput!): MutationOutputOfUpdateChatMessageOutput!
  createChatRoom(createChatRoomInput: CreateChatRoomInput!): MutationOutputOfCreateChatRoomOutput!
  readChatRoom(readChatRoomInput: ReadChatRoomInput!): MutationOutputOfReadChatRoomOutput!
  updateChatRoom(updateChatRoomInput: UpdateChatRoomInput!): MutationOutputOfUpdateChatRoomOutput!
  createEmailMessage(createEmailMessageInput: CreateEmailMessageInput!): MutationOutputOfCreateEmailMessageOutput!
  readEmailMessage(readEmailMessageInput: ReadEmailMessageInput!): MutationOutputOfReadEmailMessageOutput!
  updateEmailMessage(updateEmailMessageInput: UpdateEmailMessageInput!): MutationOutputOfUpdateEmailMessageOutput!
  createCalendar(createCalendarInput: CreateCalendarInput!): MutationOutputOfCreateCalendarOutput!
  readCalendar(readCalendarInput: ReadCalendarInput!): MutationOutputOfReadCalendarOutput!
  updateCalendar(updateCalendarInput: UpdateCalendarInput!): MutationOutputOfUpdateCalendarOutput!
  createCalendarTask(createCalendarTaskInput: CreateCalendarTaskInput!): MutationOutputOfCreateCalendarTaskOutput!
  readCalendarTask(readCalendarTaskInput: ReadCalendarTaskInput!): MutationOutputOfReadCalendarTaskOutput!
  updateCalendarTask(updateCalendarTaskInput: UpdateCalendarTaskInput!): MutationOutputOfUpdateCalendarTaskOutput!
  createAddress(createAddressInput: CreateAddressInput!): MutationOutputOfCreateAddressOutput!
  readAddress(readAddressInput: ReadAddressInput!): MutationOutputOfReadAddressOutput!
  updateAddress(updateAddressInput: UpdateAddressInput!): MutationOutputOfUpdateAddressOutput!
}

type Subscription {
  onVideoCreated: Video!
  onVideoDeleted: Video!
  onVideoRead: Video!
  subscribeToVideoRead(videoId: Int!): [Int!]!
  onVideoUpdated: Video!
  onUserCreated: User!
  onUserDeleted: User!
  onUserRead: User!
  subscribeToUserRead(userId: Int!): [Int!]!
  onUserUpdated: User!
  onUserClaimCreated: UserClaim!
  onUserClaimDeleted: UserClaim!
  onUserClaimRead: UserClaim!
  subscribeToUserClaimRead(userClaimId: Int!): [Int!]!
  onUserClaimUpdated: UserClaim!
  onUserGroupCreated: UserGroup!
  onUserGroupDeleted: UserGroup!
  onUserGroupRead: UserGroup!
  subscribeToUserGroupRead(userGroupId: Int!): [Int!]!
  onUserGroupUpdated: UserGroup!
  onUserGroupRoleCreated: UserGroupRole!
  onUserGroupRoleDeleted: UserGroupRole!
  onUserGroupRoleRead: UserGroupRole!
  subscribeToUserGroupRoleRead(userGroupRoleId: Int!): [Int!]!
  onUserGroupRoleUpdated: UserGroupRole!
  onSurveyCreated: Survey!
  onSurveyDeleted: Survey!
  onSurveyRead: Survey!
  subscribeToSurveyRead(surveyId: Int!): [Int!]!
  onSurveyUpdated: Survey!
  onSurveyQuestionCreated: SurveyQuestion!
  onSurveyQuestionDeleted: SurveyQuestion!
  onSurveyQuestionRead: SurveyQuestion!
  subscribeToSurveyQuestionRead(surveyQuestionId: Int!): [Int!]!
  onSurveyQuestionUpdated: SurveyQuestion!
  onSurveyQuestionAnswerCreated: SurveyQuestionAnswer!
  onSurveyQuestionAnswerDeleted: SurveyQuestionAnswer!
  onSurveyQuestionAnswerRead: SurveyQuestionAnswer!
  subscribeToSurveyQuestionAnswerRead(surveyQuestionAnswerId: Int!): [Int!]!
  onSurveyQuestionAnswerUpdated: SurveyQuestionAnswer!
  onSurveyQuestionGroupCreated: SurveyQuestionGroup!
  onSurveyQuestionGroupDeleted: SurveyQuestionGroup!
  onSurveyQuestionGroupRead: SurveyQuestionGroup!
  subscribeToSurveyQuestionGroupRead(surveyQuestionGroupId: Int!): [Int!]!
  onSurveyQuestionGroupUpdated: SurveyQuestionGroup!
  onSurveyQuestionOptionCreated: SurveyQuestionOption!
  onSurveyQuestionOptionDeleted: SurveyQuestionOption!
  onSurveyQuestionOptionRead: SurveyQuestionOption!
  subscribeToSurveyQuestionOptionRead(surveyQuestionOptionId: Int!): [Int!]!
  onSurveyQuestionOptionUpdated: SurveyQuestionOption!
  onSurveyQuestionSelectCreated: SurveyQuestionSelect!
  onSurveyQuestionSelectDeleted: SurveyQuestionSelect!
  onSurveyQuestionSelectRead: SurveyQuestionSelect!
  subscribeToSurveyQuestionSelectRead(surveyQuestionSelectId: Int!): [Int!]!
  onSurveyQuestionSelectUpdated: SurveyQuestionSelect!
  onRoleCreated: Role!
  onRoleDeleted: Role!
  onRoleRead: Role!
  subscribeToRoleRead(roleId: Int!): [Int!]!
  onRoleUpdated: Role!
  onRoleClaimCreated: RoleClaim!
  onRoleClaimDeleted: RoleClaim!
  onRoleClaimRead: RoleClaim!
  subscribeToRoleClaimRead(roleClaimId: Int!): [Int!]!
  onRoleClaimUpdated: RoleClaim!
  onPostCreated: Post!
  onPostDeleted: Post!
  onPostRead: Post!
  subscribeToPostRead(postId: Int!): [Int!]!
  onPostUpdated: Post!
  onPageCreated: Page!
  onPageDeleted: Page!
  onPageRead: Page!
  subscribeToPageRead(pageId: Int!): [Int!]!
  onPageUpdated: Page!
  onNumberCreated: Number!
  onNumberDeleted: Number!
  onNumberRead: Number!
  subscribeToNumberRead(numberId: Int!): [Int!]!
  onNumberUpdated: Number!
  onNotificationMessageCreated: NotificationMessage!
  onNotificationMessageDeleted: NotificationMessage!
  onNotificationMessageRead: NotificationMessage!
  subscribeToNotificationMessageRead(notificationMessageId: Int!): [Int!]!
  onNotificationMessageUpdated: NotificationMessage!
  onMessageCreated: Message!
  onMessageDeleted: Message!
  onMessageRead: Message!
  subscribeToMessageRead(messageId: Int!): [Int!]!
  onMessageUpdated: Message!
  onJobCreated: Job!
  onJobDeleted: Job!
  onJobRead: Job!
  subscribeToJobRead(jobId: Int!): [Int!]!
  onJobUpdated: Job!
  onJobOfferCreated: JobOffer!
  onJobOfferDeleted: JobOffer!
  onJobOfferRead: JobOffer!
  subscribeToJobOfferRead(jobOfferId: Int!): [Int!]!
  onJobOfferUpdated: JobOffer!
  onImageCreated: Image!
  onImageDeleted: Image!
  onImageRead: Image!
  subscribeToImageRead(imageId: Int!): [Int!]!
  onImageUpdated: Image!
  onHouseholdCreated: Household!
  onHouseholdDeleted: Household!
  onHouseholdRead: Household!
  subscribeToHouseholdRead(householdId: Int!): [Int!]!
  onHouseholdUpdated: Household!
  onHistoryForUserCreated: HistoryForUser!
  onHistoryForUserDeleted: HistoryForUser!
  onHistoryForUserRead: HistoryForUser!
  subscribeToHistoryForUserRead(historyForUserId: Int!): [Int!]!
  onHistoryForUserUpdated: HistoryForUser!
  onDocumentCreated: Document!
  onDocumentDeleted: Document!
  onDocumentRead: Document!
  subscribeToDocumentRead(documentId: Int!): [Int!]!
  onDocumentUpdated: Document!
  onCompanyCreated: Company!
  onCompanyDeleted: Company!
  onCompanyRead: Company!
  subscribeToCompanyRead(companyId: Int!): [Int!]!
  onCompanyUpdated: Company!
  onChatMessageCreated: ChatMessage!
  onChatMessageDeleted: ChatMessage!
  onChatMessageRead: ChatMessage!
  subscribeToChatMessageRead(chatMessageId: Int!): [Int!]!
  onChatMessageUpdated: ChatMessage!
  onChatRoomCreated: ChatRoom!
  onChatRoomDeleted: ChatRoom!
  onChatRoomRead: ChatRoom!
  subscribeToChatRoomRead(chatRoomId: Int!): [Int!]!
  onChatRoomUpdated: ChatRoom!
  onEmailMessageCreated: EmailMessage!
  onEmailMessageDeleted: EmailMessage!
  onEmailMessageRead: EmailMessage!
  subscribeToEmailMessageRead(emailMessageId: Int!): [Int!]!
  onEmailMessageUpdated: EmailMessage!
  onCalendarCreated: Calendar!
  onCalendarDeleted: Calendar!
  onCalendarRead: Calendar!
  subscribeToCalendarRead(calendarId: Int!): [Int!]!
  onCalendarUpdated: Calendar!
  onCalendarTaskCreated: CalendarTask!
  onCalendarTaskDeleted: CalendarTask!
  onCalendarTaskRead: CalendarTask!
  subscribeToCalendarTaskRead(calendarTaskId: Int!): [Int!]!
  onCalendarTaskUpdated: CalendarTask!
  onAddressCreated: Address!
  onAddressDeleted: Address!
  onAddressRead: Address!
  subscribeToAddressRead(addressId: Int!): [Int!]!
  onAddressUpdated: Address!
}

type Video implements Node {
  id: ID!
}

type User implements Node {
  id: ID!
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaim!]!
  userLogins: [UserLogin!]!
  userTokens: [UserToken!]!
  role_Users: [Role_User!]!
  surveys: [Survey!]!
  job_Users: [Job_User!]!
  jobOffersReceived: [JobOffer_User!]!
  jobOffersCreated: [JobOffer_User!]!
  relationshipRequestsSent: [RelationshipRequest!]!
  relationshipRequestsRecieved: [RelationshipRequest!]!
  relationships: [Relationship!]!
  relationshipsFromOthers: [Relationship!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequest!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequest!]!
  friendRelationships: [FriendRelationship!]!
  friendRelationshipsFromOthers: [FriendRelationship!]!
  familyRelationships: [FamilyRelationship!]!
  familyRelationshipsFromOthers: [FamilyRelationship!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequest!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequest!]!
  connections: [Connection!]!
  connectionsFromOthers: [Connection!]!
  connectionRequestsSent: [ConnectionRequest!]!
  connectionRequestsRecieved: [ConnectionRequest!]!
  following: [FollowRelationship!]!
  followers: [FollowRelationship!]!
  createdChatMessages: [ChatMessage!]!
  chatMessage_Users: [ChatMessage_User!]!
  chatRoom_Users: [ChatRoom_User!]!
  user_UserGroups: [User_UserGroup!]!
  user_UserGroupRoles: [User_UserGroupRole!]!
  household_Users: [Household_User!]!
  household_UsersRequestsSent: [HouseholdRequest!]!
  household_UsersRequestsRecieved: [HouseholdRequest!]!
  calendar_Users: [Calendar_User!]!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type UserClaim implements Node {
  id: ID!
  toClaim: Claim
  user: User!
  userId: Int!
  claimType: String
  claimValue: String
}

type UserGroup implements Node {
  id: ID!
  userGroupRoles: [UserGroupRole!]!
  user_UserGroups: [User_UserGroup!]!
}

type UserGroupRole implements Node {
  id: ID!
  name: String!
  userGroupId: Int!
  userGroup: UserGroup!
  user_UserGroupRoles: [User_UserGroupRole!]!
}

type Survey implements Node {
  id: ID!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroup!]!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type SurveyQuestion implements Node {
  id: ID!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type SurveyQuestionAnswer implements Node {
  id: ID!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestion!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type SurveyQuestionGroup implements Node {
  id: ID!
  globalId: String!
  surveyId: Int!
  survey: Survey!
  surveyQuestions: [SurveyQuestion!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type SurveyQuestionOption implements Node {
  id: ID!
  globalId: String!
  html: String
}

type SurveyQuestionSelect implements Node {
  id: ID!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type Role implements Node {
  id: ID!
  role_Users: [Role_User!]!
  roleClaims: [RoleClaim!]!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

type RoleClaim implements Node {
  id: ID!
  toClaim: Claim
  role: Role!
  roleId: Int!
  claimType: String
  claimValue: String
}

type Post implements Node {
  id: ID!
}

type Page implements Node {
  id: ID!
  html: String!
}

type Number implements Node {
  id: ID!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: User!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

type NotificationMessage implements Node {
  id: ID!
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_User!]!
  html: String!
  sentAt: DateTime
}

type Message implements Node {
  id: ID!
  html: String!
  sentAt: DateTime
}

type Job implements Node {
  id: ID!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: Address!
  job_Users: [Job_User!]!
  companyId: Int
  company: Company!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type JobOffer implements Node {
  id: ID!
  jobId: Int!
  job: Job!
  jobOffer_Users: [JobOffer_User!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: User!
  updatedAt: DateTime!
  sentAt: DateTime
}

type Image implements Node {
  id: ID!
}

type Household implements Node {
  id: ID!
  household_Users: [Household_User!]!
}

type HistoryForUser implements Node {
  id: ID!
  userId: Int
  user: User!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

type Document implements Node {
  id: ID!
}

type Company implements Node {
  id: ID!
  companyName: String!
  address: Address!
}

type ChatMessage implements Node {
  id: ID!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type ChatRoom implements Node {
  id: ID!
  chatRoomUsers: [ChatRoom_User!]!
  chatMessages: [ChatMessage!]!
}

type EmailMessage implements Node {
  id: ID!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type Calendar implements Node {
  id: ID!
  description: String!
  calendarTasks: [CalendarTask!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  calendar_Users: [Calendar_User!]!
}

type CalendarTask implements Node {
  id: ID!
  description: String!
  calendarId: Int!
  calendar: Calendar!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type Address implements Node {
  id: ID!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type UserLogin {
  user: User!
  loginProvider: String
  providerKey: String
  providerDisplayName: String
  userId: Int!
}

type UserToken {
  user: User!
  userId: Int!
  loginProvider: String
  name: String
  value: String
}

type Role_User {
  user: User!
  role: Role!
  userId: Int!
  roleId: Int!
}

type Job_User {
  userId: Int!
  user: User!
  jobId: Int!
  job: Job!
  document_Job_Users: [Document_Job_User!]!
  image_Job_Users: [Image_Job_User!]!
  job_User_Videos: [Job_User_Video!]!
  jobRole: JobRoleEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type JobOffer_User {
  targetUserId: Int!
  targetUser: User!
  jobOfferId: Int!
  jobOffer: JobOffer!
  createdAt: DateTime!
  createdById: Int!
  createdBy: User!
  updatedAt: DateTime!
}

type RelationshipRequest {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
  createdById: Int!
  createdBy: User!
  createdAt: DateTime!
  sentAt: DateTime
  relationshipType: RelationshipEnum!
}

type Relationship {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
  relationshipType: RelationshipEnum!
}

type FriendRelationshipRequest {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
  sentAt: DateTime
  createdById: Int!
  createdBy: User!
  createdAt: DateTime!
}

type FriendRelationship {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
}

type FamilyRelationship {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
  familyRelationshipType: FamilyRelationEnum!
}

type FamilyRelationshipRequest {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
  familyRelationType: FamilyRelationEnum!
  sentAt: DateTime
  createdAt: DateTime!
  createdById: Int!
  createdBy: User!
}

type Connection {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
}

type ConnectionRequest {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
}

type FollowRelationship {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
}

type ChatMessage_User {
  userId: Int!
  user: User!
  chatMessageId: Int!
  chatMessage: ChatMessage!
  messageState: MessageStateEnum!
}

type ChatRoom_User {
  userId: Int!
  user: User!
  chatRoomId: Int!
  chatRoom: ChatRoom!
  joinedAt: DateTime!
}

type User_UserGroup {
  userId: Int!
  user: User!
  userGroupId: Int!
  userGroup: UserGroup!
  user_UserGroupRoles: [User_UserGroupRole!]!
}

type User_UserGroupRole {
  userId: Int!
  user: User!
  userGroupRoleId: Int!
  userGroupRole: UserGroupRole!
}

type Household_User {
  userId: Int!
  user: User!
  householdId: Int!
  household: Household!
}

type HouseholdRequest {
  fromUserId: Int!
  fromUser: User!
  toUserId: Int!
  toUser: User!
  householdId: Int!
  household: Household!
  householdRoleType: HouseholdRoleEnum!
  sentAt: DateTime
  createdById: Int!
  createdBy: User!
  createdAt: DateTime!
}

type Calendar_User {
  userId: Int!
  user: User!
  calendarId: Int!
  calendar: Calendar!
}

type Claim {
  properties: [KeyValuePairOfStringAndString!]!
}

enum QuestionEnum {
  NONE
  SELECT
  TEXT
  CHECK_BOX
}

enum SurveyQuestionAnswerEnum {
  ANY
  NUMERIC
  TEXT
  HTML
  JSON
}

enum ClientWebProgrammingLanguageEnum {
  NONE
  JAVASCRIPT
  TYPESCRIPT
  C_SHARP
}

enum NotificationIconEnum {
  NONE
  ALERT
  URGENT
}

type NotificationMessage_User {
  userId: Int!
  user: User!
  notificationMessageId: Int!
  notificationMessage: NotificationMessage!
}

enum JobTitleEnum {
  SOFTWARE_ENGINEER
  WEB_DESIGNER
  WEB_ENGINEER
}

enum JobCategoryEnum {
  WEB
  SOFTWARE
  ARCHITECTURE
}

enum UserActionEnum {
  CANCEL
  CREATE
  READ
  UPDATE
  DELETE
  LIKE
  DISLIKE
  LAUGH
  SHOCK
  SMILE
}

input VideoFilterInput {
  and: [VideoFilterInput!]
  or: [VideoFilterInput!]
  id: ComparableInt32OperationFilterInput
}

input VideoSortInput {
  id: SortEnumType
}

"A connection to a list of items."
type VideoConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [VideoEdge!]
  "A flattened list of the nodes."
  nodes: [Video!]
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: ComparableInt32OperationFilterInput
  globalId: StringOperationFilterInput
  firstName: StringOperationFilterInput
  middleInitial: StringOperationFilterInput
  lastName: StringOperationFilterInput
  userClaims: ListFilterInputTypeOfUserClaimFilterInput
  userLogins: ListFilterInputTypeOfUserLoginFilterInput
  userTokens: ListFilterInputTypeOfUserTokenFilterInput
  role_Users: ListFilterInputTypeOfRole_UserFilterInput
  surveys: ListFilterInputTypeOfSurveyFilterInput
  job_Users: ListFilterInputTypeOfJob_UserFilterInput
  jobOffersReceived: ListFilterInputTypeOfJobOffer_UserFilterInput
  jobOffersCreated: ListFilterInputTypeOfJobOffer_UserFilterInput
  relationshipRequestsSent: ListFilterInputTypeOfRelationshipRequestFilterInput
  relationshipRequestsRecieved: ListFilterInputTypeOfRelationshipRequestFilterInput
  relationships: ListFilterInputTypeOfRelationshipFilterInput
  relationshipsFromOthers: ListFilterInputTypeOfRelationshipFilterInput
  friendRelationshipRequestsSent: ListFilterInputTypeOfFriendRelationshipRequestFilterInput
  friendRelationshipRequestsRecieved: ListFilterInputTypeOfFriendRelationshipRequestFilterInput
  friendRelationships: ListFilterInputTypeOfFriendRelationshipFilterInput
  friendRelationshipsFromOthers: ListFilterInputTypeOfFriendRelationshipFilterInput
  familyRelationships: ListFilterInputTypeOfFamilyRelationshipFilterInput
  familyRelationshipsFromOthers: ListFilterInputTypeOfFamilyRelationshipFilterInput
  familyRelationshipRequestsSent: ListFilterInputTypeOfFamilyRelationshipRequestFilterInput
  familyRelationshipRequestsRecieved: ListFilterInputTypeOfFamilyRelationshipRequestFilterInput
  connections: ListFilterInputTypeOfConnectionFilterInput
  connectionsFromOthers: ListFilterInputTypeOfConnectionFilterInput
  connectionRequestsSent: ListFilterInputTypeOfConnectionRequestFilterInput
  connectionRequestsRecieved: ListFilterInputTypeOfConnectionRequestFilterInput
  following: ListFilterInputTypeOfFollowRelationshipFilterInput
  followers: ListFilterInputTypeOfFollowRelationshipFilterInput
  createdChatMessages: ListFilterInputTypeOfChatMessageFilterInput
  chatMessage_Users: ListFilterInputTypeOfChatMessage_UserFilterInput
  chatRoom_Users: ListFilterInputTypeOfChatRoom_UserFilterInput
  user_UserGroups: ListFilterInputTypeOfUser_UserGroupFilterInput
  user_UserGroupRoles: ListFilterInputTypeOfUser_UserGroupRoleFilterInput
  household_Users: ListFilterInputTypeOfHousehold_UserFilterInput
  household_UsersRequestsSent: ListFilterInputTypeOfHouseholdRequestFilterInput
  household_UsersRequestsRecieved: ListFilterInputTypeOfHouseholdRequestFilterInput
  calendar_Users: ListFilterInputTypeOfCalendar_UserFilterInput
  userName: StringOperationFilterInput
  normalizedUserName: StringOperationFilterInput
  email: StringOperationFilterInput
  normalizedEmail: StringOperationFilterInput
  emailConfirmed: BooleanOperationFilterInput
  passwordHash: StringOperationFilterInput
  securityStamp: StringOperationFilterInput
  concurrencyStamp: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  phoneNumberConfirmed: BooleanOperationFilterInput
  twoFactorEnabled: BooleanOperationFilterInput
  lockoutEnd: ComparableNullableOfDateTimeOffsetOperationFilterInput
  lockoutEnabled: BooleanOperationFilterInput
  accessFailedCount: ComparableInt32OperationFilterInput
}

input UserSortInput {
  id: SortEnumType
  globalId: SortEnumType
  firstName: SortEnumType
  middleInitial: SortEnumType
  lastName: SortEnumType
  userName: SortEnumType
  normalizedUserName: SortEnumType
  email: SortEnumType
  normalizedEmail: SortEnumType
  emailConfirmed: SortEnumType
  passwordHash: SortEnumType
  securityStamp: SortEnumType
  concurrencyStamp: SortEnumType
  phoneNumber: SortEnumType
  phoneNumberConfirmed: SortEnumType
  twoFactorEnabled: SortEnumType
  lockoutEnd: SortEnumType
  lockoutEnabled: SortEnumType
  accessFailedCount: SortEnumType
}

"A connection to a list of items."
type UserConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UserEdge!]
  "A flattened list of the nodes."
  nodes: [User!]
}

input UserClaimFilterInput {
  and: [UserClaimFilterInput!]
  or: [UserClaimFilterInput!]
  id: ComparableInt32OperationFilterInput
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  claimType: StringOperationFilterInput
  claimValue: StringOperationFilterInput
}

input UserClaimSortInput {
  id: SortEnumType
  user: UserSortInput
  userId: SortEnumType
  claimType: SortEnumType
  claimValue: SortEnumType
}

"A connection to a list of items."
type UserClaimConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UserClaimEdge!]
  "A flattened list of the nodes."
  nodes: [UserClaim!]
}

input UserGroupFilterInput {
  and: [UserGroupFilterInput!]
  or: [UserGroupFilterInput!]
  id: ComparableInt32OperationFilterInput
  userGroupRoles: ListFilterInputTypeOfUserGroupRoleFilterInput
  user_UserGroups: ListFilterInputTypeOfUser_UserGroupFilterInput
}

input UserGroupSortInput {
  id: SortEnumType
}

"A connection to a list of items."
type UserGroupConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UserGroupEdge!]
  "A flattened list of the nodes."
  nodes: [UserGroup!]
}

input UserGroupRoleFilterInput {
  and: [UserGroupRoleFilterInput!]
  or: [UserGroupRoleFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  userGroupId: ComparableInt32OperationFilterInput
  userGroup: UserGroupFilterInput
  user_UserGroupRoles: ListFilterInputTypeOfUser_UserGroupRoleFilterInput
}

input UserGroupRoleSortInput {
  id: SortEnumType
  name: SortEnumType
  userGroupId: SortEnumType
  userGroup: UserGroupSortInput
}

"A connection to a list of items."
type UserGroupRoleConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UserGroupRoleEdge!]
  "A flattened list of the nodes."
  nodes: [UserGroupRole!]
}

input SurveyFilterInput {
  and: [SurveyFilterInput!]
  or: [SurveyFilterInput!]
  id: ComparableInt32OperationFilterInput
  globalId: StringOperationFilterInput
  surveyQuestionGroupsSortedIds: StringOperationFilterInput
  surveyQuestionGroups: ListFilterInputTypeOfSurveyQuestionGroupFilterInput
  ownedById: ComparableNullableOfInt32OperationFilterInput
  ownedBy: UserFilterInput
  ownedAt: ComparableDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  updatedById: ComparableNullableOfInt32OperationFilterInput
  updatedBy: UserFilterInput
}

input SurveySortInput {
  id: SortEnumType
  globalId: SortEnumType
  surveyQuestionGroupsSortedIds: SortEnumType
  ownedById: SortEnumType
  ownedBy: UserSortInput
  ownedAt: SortEnumType
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  updatedById: SortEnumType
  updatedBy: UserSortInput
}

"A connection to a list of items."
type SurveyConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SurveyEdge!]
  "A flattened list of the nodes."
  nodes: [Survey!]
}

input SurveyQuestionFilterInput {
  and: [SurveyQuestionFilterInput!]
  or: [SurveyQuestionFilterInput!]
  id: ComparableInt32OperationFilterInput
  globalId: StringOperationFilterInput
  type: QuestionEnumOperationFilterInput
  surveyGroupId: ComparableInt32OperationFilterInput
  surveyQuestionGroup: SurveyQuestionGroupFilterInput
  answers: ListFilterInputTypeOfSurveyQuestionAnswerFilterInput
  html: StringOperationFilterInput
  expectedAnswerJson: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  updatedById: ComparableNullableOfInt32OperationFilterInput
  updatedBy: UserFilterInput
  ownedById: ComparableNullableOfInt32OperationFilterInput
  ownedBy: UserFilterInput
  ownedAt: ComparableDateTimeOperationFilterInput
}

input SurveyQuestionSortInput {
  id: SortEnumType
  globalId: SortEnumType
  type: SortEnumType
  surveyGroupId: SortEnumType
  surveyQuestionGroup: SurveyQuestionGroupSortInput
  html: SortEnumType
  expectedAnswerJson: SortEnumType
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  updatedById: SortEnumType
  updatedBy: UserSortInput
  ownedById: SortEnumType
  ownedBy: UserSortInput
  ownedAt: SortEnumType
}

"A connection to a list of items."
type SurveyQuestionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SurveyQuestionEdge!]
  "A flattened list of the nodes."
  nodes: [SurveyQuestion!]
}

input SurveyQuestionAnswerFilterInput {
  and: [SurveyQuestionAnswerFilterInput!]
  or: [SurveyQuestionAnswerFilterInput!]
  id: ComparableInt32OperationFilterInput
  globalId: StringOperationFilterInput
  surveyQuestionId: ComparableInt32OperationFilterInput
  surveyQuestion: SurveyQuestionFilterInput
  answerType: SurveyQuestionAnswerEnumOperationFilterInput
  answer: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  updatedById: ComparableNullableOfInt32OperationFilterInput
  updatedBy: UserFilterInput
}

input SurveyQuestionAnswerSortInput {
  id: SortEnumType
  globalId: SortEnumType
  surveyQuestionId: SortEnumType
  surveyQuestion: SurveyQuestionSortInput
  answerType: SortEnumType
  answer: SortEnumType
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  updatedById: SortEnumType
  updatedBy: UserSortInput
}

"A connection to a list of items."
type SurveyQuestionAnswerConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SurveyQuestionAnswerEdge!]
  "A flattened list of the nodes."
  nodes: [SurveyQuestionAnswer!]
}

input SurveyQuestionGroupFilterInput {
  and: [SurveyQuestionGroupFilterInput!]
  or: [SurveyQuestionGroupFilterInput!]
  id: ComparableInt32OperationFilterInput
  globalId: StringOperationFilterInput
  surveyId: ComparableInt32OperationFilterInput
  survey: SurveyFilterInput
  surveyQuestions: ListFilterInputTypeOfSurveyQuestionFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  updatedById: ComparableNullableOfInt32OperationFilterInput
  updatedBy: UserFilterInput
}

input SurveyQuestionGroupSortInput {
  id: SortEnumType
  globalId: SortEnumType
  surveyId: SortEnumType
  survey: SurveySortInput
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  updatedById: SortEnumType
  updatedBy: UserSortInput
}

"A connection to a list of items."
type SurveyQuestionGroupConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SurveyQuestionGroupEdge!]
  "A flattened list of the nodes."
  nodes: [SurveyQuestionGroup!]
}

input SurveyQuestionOptionFilterInput {
  and: [SurveyQuestionOptionFilterInput!]
  or: [SurveyQuestionOptionFilterInput!]
  id: ComparableInt32OperationFilterInput
  globalId: StringOperationFilterInput
  html: StringOperationFilterInput
}

input SurveyQuestionOptionSortInput {
  id: SortEnumType
  globalId: SortEnumType
  html: SortEnumType
}

"A connection to a list of items."
type SurveyQuestionOptionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SurveyQuestionOptionEdge!]
  "A flattened list of the nodes."
  nodes: [SurveyQuestionOption!]
}

input SurveyQuestionSelectFilterInput {
  and: [SurveyQuestionSelectFilterInput!]
  or: [SurveyQuestionSelectFilterInput!]
  id: ComparableInt32OperationFilterInput
  globalId: StringOperationFilterInput
  type: QuestionEnumOperationFilterInput
  surveyGroupId: ComparableInt32OperationFilterInput
  surveyQuestionGroup: SurveyQuestionGroupFilterInput
  answers: ListFilterInputTypeOfSurveyQuestionAnswerFilterInput
  html: StringOperationFilterInput
  expectedAnswerJson: StringOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  updatedById: ComparableNullableOfInt32OperationFilterInput
  updatedBy: UserFilterInput
  ownedById: ComparableNullableOfInt32OperationFilterInput
  ownedBy: UserFilterInput
  ownedAt: ComparableDateTimeOperationFilterInput
}

input SurveyQuestionSelectSortInput {
  id: SortEnumType
  globalId: SortEnumType
  type: SortEnumType
  surveyGroupId: SortEnumType
  surveyQuestionGroup: SurveyQuestionGroupSortInput
  html: SortEnumType
  expectedAnswerJson: SortEnumType
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  updatedById: SortEnumType
  updatedBy: UserSortInput
  ownedById: SortEnumType
  ownedBy: UserSortInput
  ownedAt: SortEnumType
}

"A connection to a list of items."
type SurveyQuestionSelectConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SurveyQuestionSelectEdge!]
  "A flattened list of the nodes."
  nodes: [SurveyQuestionSelect!]
}

input RoleFilterInput {
  and: [RoleFilterInput!]
  or: [RoleFilterInput!]
  id: ComparableInt32OperationFilterInput
  role_Users: ListFilterInputTypeOfRole_UserFilterInput
  roleClaims: ListFilterInputTypeOfRoleClaimFilterInput
  name: StringOperationFilterInput
  normalizedName: StringOperationFilterInput
  concurrencyStamp: StringOperationFilterInput
}

input RoleSortInput {
  id: SortEnumType
  name: SortEnumType
  normalizedName: SortEnumType
  concurrencyStamp: SortEnumType
}

"A connection to a list of items."
type RoleConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RoleEdge!]
  "A flattened list of the nodes."
  nodes: [Role!]
}

input RoleClaimFilterInput {
  and: [RoleClaimFilterInput!]
  or: [RoleClaimFilterInput!]
  id: ComparableInt32OperationFilterInput
  role: RoleFilterInput
  roleId: ComparableInt32OperationFilterInput
  claimType: StringOperationFilterInput
  claimValue: StringOperationFilterInput
}

input RoleClaimSortInput {
  id: SortEnumType
  role: RoleSortInput
  roleId: SortEnumType
  claimType: SortEnumType
  claimValue: SortEnumType
}

"A connection to a list of items."
type RoleClaimConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RoleClaimEdge!]
  "A flattened list of the nodes."
  nodes: [RoleClaim!]
}

input PostFilterInput {
  and: [PostFilterInput!]
  or: [PostFilterInput!]
  id: ComparableInt32OperationFilterInput
}

input PostSortInput {
  id: SortEnumType
}

"A connection to a list of items."
type PostConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PostEdge!]
  "A flattened list of the nodes."
  nodes: [Post!]
}

input PageFilterInput {
  and: [PageFilterInput!]
  or: [PageFilterInput!]
  id: ComparableInt32OperationFilterInput
  html: StringOperationFilterInput
}

input PageSortInput {
  id: SortEnumType
  html: SortEnumType
}

"A connection to a list of items."
type PageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PageEdge!]
  "A flattened list of the nodes."
  nodes: [Page!]
}

input NumberFilterInput {
  and: [NumberFilterInput!]
  or: [NumberFilterInput!]
  id: ComparableInt32OperationFilterInput
  min: StringOperationFilterInput
  max: StringOperationFilterInput
  scale: ComparableInt32OperationFilterInput
  precision: ComparableInt32OperationFilterInput
  incrementBy: StringOperationFilterInput
  value: StringOperationFilterInput
  ownedById: ComparableNullableOfInt32OperationFilterInput
  ownedBy: UserFilterInput
  validationCodeType: ClientWebProgrammingLanguageEnumOperationFilterInput
  validationCode: StringOperationFilterInput
}

input NumberSortInput {
  id: SortEnumType
  min: SortEnumType
  max: SortEnumType
  scale: SortEnumType
  precision: SortEnumType
  incrementBy: SortEnumType
  value: SortEnumType
  ownedById: SortEnumType
  ownedBy: UserSortInput
  validationCodeType: SortEnumType
  validationCode: SortEnumType
}

"A connection to a list of items."
type NumberConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [NumberEdge!]
  "A flattened list of the nodes."
  nodes: [Number!]
}

input NotificationMessageFilterInput {
  and: [NotificationMessageFilterInput!]
  or: [NotificationMessageFilterInput!]
  id: ComparableInt32OperationFilterInput
  notificationIconType: NotificationIconEnumOperationFilterInput
  notificationMessage_Users: ListFilterInputTypeOfNotificationMessage_UserFilterInput
  html: StringOperationFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
}

input NotificationMessageSortInput {
  id: SortEnumType
  notificationIconType: SortEnumType
  html: SortEnumType
  sentAt: SortEnumType
}

"A connection to a list of items."
type NotificationMessageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [NotificationMessageEdge!]
  "A flattened list of the nodes."
  nodes: [NotificationMessage!]
}

input MessageFilterInput {
  and: [MessageFilterInput!]
  or: [MessageFilterInput!]
  id: ComparableInt32OperationFilterInput
  html: StringOperationFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
}

input MessageSortInput {
  id: SortEnumType
  html: SortEnumType
  sentAt: SortEnumType
}

"A connection to a list of items."
type MessageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MessageEdge!]
  "A flattened list of the nodes."
  nodes: [Message!]
}

input JobFilterInput {
  and: [JobFilterInput!]
  or: [JobFilterInput!]
  id: ComparableInt32OperationFilterInput
  jobTitle: JobTitleEnumOperationFilterInput
  jobCategory: JobCategoryEnumOperationFilterInput
  jobAddressId: ComparableNullableOfInt32OperationFilterInput
  jobAddress: AddressFilterInput
  job_Users: ListFilterInputTypeOfJob_UserFilterInput
  companyId: ComparableNullableOfInt32OperationFilterInput
  company: CompanyFilterInput
  minimumSalary: ComparableNullableOfDecimalOperationFilterInput
  maximumSalary: ComparableNullableOfDecimalOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  updatedById: ComparableNullableOfInt32OperationFilterInput
  updatedBy: UserFilterInput
}

input JobSortInput {
  id: SortEnumType
  jobTitle: SortEnumType
  jobCategory: SortEnumType
  jobAddressId: SortEnumType
  jobAddress: AddressSortInput
  companyId: SortEnumType
  company: CompanySortInput
  minimumSalary: SortEnumType
  maximumSalary: SortEnumType
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  updatedById: SortEnumType
  updatedBy: UserSortInput
}

"A connection to a list of items."
type JobConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [JobEdge!]
  "A flattened list of the nodes."
  nodes: [Job!]
}

input JobOfferFilterInput {
  and: [JobOfferFilterInput!]
  or: [JobOfferFilterInput!]
  id: ComparableInt32OperationFilterInput
  jobId: ComparableInt32OperationFilterInput
  job: JobFilterInput
  jobOffer_Users: ListFilterInputTypeOfJobOffer_UserFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
}

input JobOfferSortInput {
  id: SortEnumType
  jobId: SortEnumType
  job: JobSortInput
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  sentAt: SortEnumType
}

"A connection to a list of items."
type JobOfferConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [JobOfferEdge!]
  "A flattened list of the nodes."
  nodes: [JobOffer!]
}

input ImageFilterInput {
  and: [ImageFilterInput!]
  or: [ImageFilterInput!]
  id: ComparableInt32OperationFilterInput
}

input ImageSortInput {
  id: SortEnumType
}

"A connection to a list of items."
type ImageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ImageEdge!]
  "A flattened list of the nodes."
  nodes: [Image!]
}

input HouseholdFilterInput {
  and: [HouseholdFilterInput!]
  or: [HouseholdFilterInput!]
  id: ComparableInt32OperationFilterInput
  household_Users: ListFilterInputTypeOfHousehold_UserFilterInput
}

input HouseholdSortInput {
  id: SortEnumType
}

"A connection to a list of items."
type HouseholdConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HouseholdEdge!]
  "A flattened list of the nodes."
  nodes: [Household!]
}

input HistoryForUserFilterInput {
  and: [HistoryForUserFilterInput!]
  or: [HistoryForUserFilterInput!]
  id: ComparableInt32OperationFilterInput
  userId: ComparableNullableOfInt32OperationFilterInput
  user: UserFilterInput
  actionType: UserActionEnumOperationFilterInput
  targetTableName: StringOperationFilterInput
  targetGlobalId: StringOperationFilterInput
  targetLocalIds: StringOperationFilterInput
  description: StringOperationFilterInput
}

input HistoryForUserSortInput {
  id: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  actionType: SortEnumType
  targetTableName: SortEnumType
  targetGlobalId: SortEnumType
  targetLocalIds: SortEnumType
  description: SortEnumType
}

"A connection to a list of items."
type HistoryForUserConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HistoryForUserEdge!]
  "A flattened list of the nodes."
  nodes: [HistoryForUser!]
}

input DocumentFilterInput {
  and: [DocumentFilterInput!]
  or: [DocumentFilterInput!]
  id: ComparableInt32OperationFilterInput
}

input DocumentSortInput {
  id: SortEnumType
}

"A connection to a list of items."
type DocumentConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DocumentEdge!]
  "A flattened list of the nodes."
  nodes: [Document!]
}

input CompanyFilterInput {
  and: [CompanyFilterInput!]
  or: [CompanyFilterInput!]
  id: ComparableInt32OperationFilterInput
  companyName: StringOperationFilterInput
  address: AddressFilterInput
}

input CompanySortInput {
  id: SortEnumType
  companyName: SortEnumType
  address: AddressSortInput
}

"A connection to a list of items."
type CompanyConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CompanyEdge!]
  "A flattened list of the nodes."
  nodes: [Company!]
}

input ChatMessageFilterInput {
  and: [ChatMessageFilterInput!]
  or: [ChatMessageFilterInput!]
  id: ComparableInt32OperationFilterInput
  html: StringOperationFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
  editedAt: ComparableNullableOfDateTimeOperationFilterInput
  chatMessage_Users: ListFilterInputTypeOfChatMessage_UserFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
}

input ChatMessageSortInput {
  id: SortEnumType
  html: SortEnumType
  sentAt: SortEnumType
  editedAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
}

"A connection to a list of items."
type ChatMessageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ChatMessageEdge!]
  "A flattened list of the nodes."
  nodes: [ChatMessage!]
}

input ChatRoomFilterInput {
  and: [ChatRoomFilterInput!]
  or: [ChatRoomFilterInput!]
  id: ComparableInt32OperationFilterInput
  chatRoomUsers: ListFilterInputTypeOfChatRoom_UserFilterInput
  chatMessages: ListFilterInputTypeOfChatMessageFilterInput
}

input ChatRoomSortInput {
  id: SortEnumType
}

"A connection to a list of items."
type ChatRoomConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ChatRoomEdge!]
  "A flattened list of the nodes."
  nodes: [ChatRoom!]
}

input EmailMessageFilterInput {
  and: [EmailMessageFilterInput!]
  or: [EmailMessageFilterInput!]
  id: ComparableInt32OperationFilterInput
  html: StringOperationFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
  editedAt: ComparableNullableOfDateTimeOperationFilterInput
  chatMessage_Users: ListFilterInputTypeOfChatMessage_UserFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
}

input EmailMessageSortInput {
  id: SortEnumType
  html: SortEnumType
  sentAt: SortEnumType
  editedAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
}

"A connection to a list of items."
type EmailMessageConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EmailMessageEdge!]
  "A flattened list of the nodes."
  nodes: [EmailMessage!]
}

input CalendarFilterInput {
  and: [CalendarFilterInput!]
  or: [CalendarFilterInput!]
  id: ComparableInt32OperationFilterInput
  description: StringOperationFilterInput
  calendarTasks: ListFilterInputTypeOfCalendarTaskFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  updatedById: ComparableNullableOfInt32OperationFilterInput
  updatedBy: UserFilterInput
  calendar_Users: ListFilterInputTypeOfCalendar_UserFilterInput
}

input CalendarSortInput {
  id: SortEnumType
  description: SortEnumType
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  updatedById: SortEnumType
  updatedBy: UserSortInput
}

"A connection to a list of items."
type CalendarConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CalendarEdge!]
  "A flattened list of the nodes."
  nodes: [Calendar!]
}

input CalendarTaskFilterInput {
  and: [CalendarTaskFilterInput!]
  or: [CalendarTaskFilterInput!]
  id: ComparableInt32OperationFilterInput
  description: StringOperationFilterInput
  calendarId: ComparableInt32OperationFilterInput
  calendar: CalendarFilterInput
  startAt: ComparableDateTimeOperationFilterInput
  endAt: ComparableDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableNullableOfInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
  updatedById: ComparableNullableOfInt32OperationFilterInput
  updatedBy: UserFilterInput
}

input CalendarTaskSortInput {
  id: SortEnumType
  description: SortEnumType
  calendarId: SortEnumType
  calendar: CalendarSortInput
  startAt: SortEnumType
  endAt: SortEnumType
  createdAt: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  updatedAt: SortEnumType
  updatedById: SortEnumType
  updatedBy: UserSortInput
}

"A connection to a list of items."
type CalendarTaskConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CalendarTaskEdge!]
  "A flattened list of the nodes."
  nodes: [CalendarTask!]
}

input AddressFilterInput {
  and: [AddressFilterInput!]
  or: [AddressFilterInput!]
  id: ComparableInt32OperationFilterInput
  unit: StringOperationFilterInput
  number: StringOperationFilterInput
  street: StringOperationFilterInput
  city: StringOperationFilterInput
  district: StringOperationFilterInput
  region: StringOperationFilterInput
  postcode: StringOperationFilterInput
}

input AddressSortInput {
  id: SortEnumType
  unit: SortEnumType
  number: SortEnumType
  street: SortEnumType
  city: SortEnumType
  district: SortEnumType
  region: SortEnumType
  postcode: SortEnumType
}

"A connection to a list of items."
type AddressConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AddressEdge!]
  "A flattened list of the nodes."
  nodes: [Address!]
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type VideoEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Video!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ListFilterInputTypeOfUserClaimFilterInput {
  all: UserClaimFilterInput
  none: UserClaimFilterInput
  some: UserClaimFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserLoginFilterInput {
  all: UserLoginFilterInput
  none: UserLoginFilterInput
  some: UserLoginFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserTokenFilterInput {
  all: UserTokenFilterInput
  none: UserTokenFilterInput
  some: UserTokenFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRole_UserFilterInput {
  all: Role_UserFilterInput
  none: Role_UserFilterInput
  some: Role_UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSurveyFilterInput {
  all: SurveyFilterInput
  none: SurveyFilterInput
  some: SurveyFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJob_UserFilterInput {
  all: Job_UserFilterInput
  none: Job_UserFilterInput
  some: Job_UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJobOffer_UserFilterInput {
  all: JobOffer_UserFilterInput
  none: JobOffer_UserFilterInput
  some: JobOffer_UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRelationshipRequestFilterInput {
  all: RelationshipRequestFilterInput
  none: RelationshipRequestFilterInput
  some: RelationshipRequestFilterInput
  any: Boolean
}

input ListFilterInputTypeOfRelationshipFilterInput {
  all: RelationshipFilterInput
  none: RelationshipFilterInput
  some: RelationshipFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFriendRelationshipRequestFilterInput {
  all: FriendRelationshipRequestFilterInput
  none: FriendRelationshipRequestFilterInput
  some: FriendRelationshipRequestFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFriendRelationshipFilterInput {
  all: FriendRelationshipFilterInput
  none: FriendRelationshipFilterInput
  some: FriendRelationshipFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFamilyRelationshipFilterInput {
  all: FamilyRelationshipFilterInput
  none: FamilyRelationshipFilterInput
  some: FamilyRelationshipFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFamilyRelationshipRequestFilterInput {
  all: FamilyRelationshipRequestFilterInput
  none: FamilyRelationshipRequestFilterInput
  some: FamilyRelationshipRequestFilterInput
  any: Boolean
}

input ListFilterInputTypeOfConnectionFilterInput {
  all: ConnectionFilterInput
  none: ConnectionFilterInput
  some: ConnectionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfConnectionRequestFilterInput {
  all: ConnectionRequestFilterInput
  none: ConnectionRequestFilterInput
  some: ConnectionRequestFilterInput
  any: Boolean
}

input ListFilterInputTypeOfFollowRelationshipFilterInput {
  all: FollowRelationshipFilterInput
  none: FollowRelationshipFilterInput
  some: FollowRelationshipFilterInput
  any: Boolean
}

input ListFilterInputTypeOfChatMessageFilterInput {
  all: ChatMessageFilterInput
  none: ChatMessageFilterInput
  some: ChatMessageFilterInput
  any: Boolean
}

input ListFilterInputTypeOfChatMessage_UserFilterInput {
  all: ChatMessage_UserFilterInput
  none: ChatMessage_UserFilterInput
  some: ChatMessage_UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfChatRoom_UserFilterInput {
  all: ChatRoom_UserFilterInput
  none: ChatRoom_UserFilterInput
  some: ChatRoom_UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUser_UserGroupFilterInput {
  all: User_UserGroupFilterInput
  none: User_UserGroupFilterInput
  some: User_UserGroupFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUser_UserGroupRoleFilterInput {
  all: User_UserGroupRoleFilterInput
  none: User_UserGroupRoleFilterInput
  some: User_UserGroupRoleFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHousehold_UserFilterInput {
  all: Household_UserFilterInput
  none: Household_UserFilterInput
  some: Household_UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfHouseholdRequestFilterInput {
  all: HouseholdRequestFilterInput
  none: HouseholdRequestFilterInput
  some: HouseholdRequestFilterInput
  any: Boolean
}

input ListFilterInputTypeOfCalendar_UserFilterInput {
  all: Calendar_UserFilterInput
  none: Calendar_UserFilterInput
  some: Calendar_UserFilterInput
  any: Boolean
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ComparableNullableOfDateTimeOffsetOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"An edge in a connection."
type UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User!
}

"An edge in a connection."
type UserClaimEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserClaim!
}

input ListFilterInputTypeOfUserGroupRoleFilterInput {
  all: UserGroupRoleFilterInput
  none: UserGroupRoleFilterInput
  some: UserGroupRoleFilterInput
  any: Boolean
}

"An edge in a connection."
type UserGroupEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserGroup!
}

"An edge in a connection."
type UserGroupRoleEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserGroupRole!
}

input ListFilterInputTypeOfSurveyQuestionGroupFilterInput {
  all: SurveyQuestionGroupFilterInput
  none: SurveyQuestionGroupFilterInput
  some: SurveyQuestionGroupFilterInput
  any: Boolean
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"An edge in a connection."
type SurveyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Survey!
}

input QuestionEnumOperationFilterInput {
  eq: QuestionEnum
  neq: QuestionEnum
  in: [QuestionEnum!]
  nin: [QuestionEnum!]
}

input ListFilterInputTypeOfSurveyQuestionAnswerFilterInput {
  all: SurveyQuestionAnswerFilterInput
  none: SurveyQuestionAnswerFilterInput
  some: SurveyQuestionAnswerFilterInput
  any: Boolean
}

"An edge in a connection."
type SurveyQuestionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SurveyQuestion!
}

input SurveyQuestionAnswerEnumOperationFilterInput {
  eq: SurveyQuestionAnswerEnum
  neq: SurveyQuestionAnswerEnum
  in: [SurveyQuestionAnswerEnum!]
  nin: [SurveyQuestionAnswerEnum!]
}

"An edge in a connection."
type SurveyQuestionAnswerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SurveyQuestionAnswer!
}

input ListFilterInputTypeOfSurveyQuestionFilterInput {
  all: SurveyQuestionFilterInput
  none: SurveyQuestionFilterInput
  some: SurveyQuestionFilterInput
  any: Boolean
}

"An edge in a connection."
type SurveyQuestionGroupEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SurveyQuestionGroup!
}

"An edge in a connection."
type SurveyQuestionOptionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SurveyQuestionOption!
}

"An edge in a connection."
type SurveyQuestionSelectEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SurveyQuestionSelect!
}

input ListFilterInputTypeOfRoleClaimFilterInput {
  all: RoleClaimFilterInput
  none: RoleClaimFilterInput
  some: RoleClaimFilterInput
  any: Boolean
}

"An edge in a connection."
type RoleEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Role!
}

"An edge in a connection."
type RoleClaimEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: RoleClaim!
}

"An edge in a connection."
type PostEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Post!
}

"An edge in a connection."
type PageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Page!
}

input ClientWebProgrammingLanguageEnumOperationFilterInput {
  eq: ClientWebProgrammingLanguageEnum
  neq: ClientWebProgrammingLanguageEnum
  in: [ClientWebProgrammingLanguageEnum!]
  nin: [ClientWebProgrammingLanguageEnum!]
}

"An edge in a connection."
type NumberEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Number!
}

input NotificationIconEnumOperationFilterInput {
  eq: NotificationIconEnum
  neq: NotificationIconEnum
  in: [NotificationIconEnum!]
  nin: [NotificationIconEnum!]
}

input ListFilterInputTypeOfNotificationMessage_UserFilterInput {
  all: NotificationMessage_UserFilterInput
  none: NotificationMessage_UserFilterInput
  some: NotificationMessage_UserFilterInput
  any: Boolean
}

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"An edge in a connection."
type NotificationMessageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: NotificationMessage!
}

"An edge in a connection."
type MessageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Message!
}

input JobTitleEnumOperationFilterInput {
  eq: JobTitleEnum
  neq: JobTitleEnum
  in: [JobTitleEnum!]
  nin: [JobTitleEnum!]
}

input JobCategoryEnumOperationFilterInput {
  eq: JobCategoryEnum
  neq: JobCategoryEnum
  in: [JobCategoryEnum!]
  nin: [JobCategoryEnum!]
}

input ComparableNullableOfDecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

"An edge in a connection."
type JobEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Job!
}

"An edge in a connection."
type JobOfferEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: JobOffer!
}

"An edge in a connection."
type ImageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Image!
}

"An edge in a connection."
type HouseholdEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Household!
}

input UserActionEnumOperationFilterInput {
  eq: UserActionEnum
  neq: UserActionEnum
  in: [UserActionEnum!]
  nin: [UserActionEnum!]
}

"An edge in a connection."
type HistoryForUserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HistoryForUser!
}

"An edge in a connection."
type DocumentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Document!
}

"An edge in a connection."
type CompanyEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Company!
}

"An edge in a connection."
type ChatMessageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ChatMessage!
}

"An edge in a connection."
type ChatRoomEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ChatRoom!
}

"An edge in a connection."
type EmailMessageEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmailMessage!
}

input ListFilterInputTypeOfCalendarTaskFilterInput {
  all: CalendarTaskFilterInput
  none: CalendarTaskFilterInput
  some: CalendarTaskFilterInput
  any: Boolean
}

"An edge in a connection."
type CalendarEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Calendar!
}

"An edge in a connection."
type CalendarTaskEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CalendarTask!
}

"An edge in a connection."
type AddressEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Address!
}

input UserLoginFilterInput {
  and: [UserLoginFilterInput!]
  or: [UserLoginFilterInput!]
  user: UserFilterInput
  loginProvider: StringOperationFilterInput
  providerKey: StringOperationFilterInput
  providerDisplayName: StringOperationFilterInput
  userId: ComparableInt32OperationFilterInput
}

input UserTokenFilterInput {
  and: [UserTokenFilterInput!]
  or: [UserTokenFilterInput!]
  user: UserFilterInput
  userId: ComparableInt32OperationFilterInput
  loginProvider: StringOperationFilterInput
  name: StringOperationFilterInput
  value: StringOperationFilterInput
}

input Role_UserFilterInput {
  and: [Role_UserFilterInput!]
  or: [Role_UserFilterInput!]
  user: UserFilterInput
  role: RoleFilterInput
  userId: ComparableInt32OperationFilterInput
  roleId: ComparableInt32OperationFilterInput
}

input Job_UserFilterInput {
  and: [Job_UserFilterInput!]
  or: [Job_UserFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  jobId: ComparableInt32OperationFilterInput
  job: JobFilterInput
  document_Job_Users: ListFilterInputTypeOfDocument_Job_UserFilterInput
  image_Job_Users: ListFilterInputTypeOfImage_Job_UserFilterInput
  job_User_Videos: ListFilterInputTypeOfJob_User_VideoFilterInput
  jobRole: JobRoleEnumOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

input JobOffer_UserFilterInput {
  and: [JobOffer_UserFilterInput!]
  or: [JobOffer_UserFilterInput!]
  targetUserId: ComparableInt32OperationFilterInput
  targetUser: UserFilterInput
  jobOfferId: ComparableInt32OperationFilterInput
  jobOffer: JobOfferFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  updatedAt: ComparableDateTimeOperationFilterInput
}

input RelationshipRequestFilterInput {
  and: [RelationshipRequestFilterInput!]
  or: [RelationshipRequestFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
  relationshipType: RelationshipEnumOperationFilterInput
}

input RelationshipFilterInput {
  and: [RelationshipFilterInput!]
  or: [RelationshipFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
  relationshipType: RelationshipEnumOperationFilterInput
}

input FriendRelationshipRequestFilterInput {
  and: [FriendRelationshipRequestFilterInput!]
  or: [FriendRelationshipRequestFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
}

input FriendRelationshipFilterInput {
  and: [FriendRelationshipFilterInput!]
  or: [FriendRelationshipFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
}

input FamilyRelationshipFilterInput {
  and: [FamilyRelationshipFilterInput!]
  or: [FamilyRelationshipFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
  familyRelationshipType: FamilyRelationEnumOperationFilterInput
}

input FamilyRelationshipRequestFilterInput {
  and: [FamilyRelationshipRequestFilterInput!]
  or: [FamilyRelationshipRequestFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
  familyRelationType: FamilyRelationEnumOperationFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
}

input ConnectionFilterInput {
  and: [ConnectionFilterInput!]
  or: [ConnectionFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
}

input ConnectionRequestFilterInput {
  and: [ConnectionRequestFilterInput!]
  or: [ConnectionRequestFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
}

input FollowRelationshipFilterInput {
  and: [FollowRelationshipFilterInput!]
  or: [FollowRelationshipFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
}

input ChatMessage_UserFilterInput {
  and: [ChatMessage_UserFilterInput!]
  or: [ChatMessage_UserFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  chatMessageId: ComparableInt32OperationFilterInput
  chatMessage: ChatMessageFilterInput
  messageState: MessageStateEnumOperationFilterInput
}

input ChatRoom_UserFilterInput {
  and: [ChatRoom_UserFilterInput!]
  or: [ChatRoom_UserFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  chatRoomId: ComparableInt32OperationFilterInput
  chatRoom: ChatRoomFilterInput
  joinedAt: ComparableDateTimeOperationFilterInput
}

input User_UserGroupFilterInput {
  and: [User_UserGroupFilterInput!]
  or: [User_UserGroupFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  userGroupId: ComparableInt32OperationFilterInput
  userGroup: UserGroupFilterInput
  user_UserGroupRoles: ListFilterInputTypeOfUser_UserGroupRoleFilterInput
}

input User_UserGroupRoleFilterInput {
  and: [User_UserGroupRoleFilterInput!]
  or: [User_UserGroupRoleFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  userGroupRoleId: ComparableInt32OperationFilterInput
  userGroupRole: UserGroupRoleFilterInput
}

input Household_UserFilterInput {
  and: [Household_UserFilterInput!]
  or: [Household_UserFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  householdId: ComparableInt32OperationFilterInput
  household: HouseholdFilterInput
}

input HouseholdRequestFilterInput {
  and: [HouseholdRequestFilterInput!]
  or: [HouseholdRequestFilterInput!]
  fromUserId: ComparableInt32OperationFilterInput
  fromUser: UserFilterInput
  toUserId: ComparableInt32OperationFilterInput
  toUser: UserFilterInput
  householdId: ComparableInt32OperationFilterInput
  household: HouseholdFilterInput
  householdRoleType: HouseholdRoleEnumOperationFilterInput
  sentAt: ComparableNullableOfDateTimeOperationFilterInput
  createdById: ComparableInt32OperationFilterInput
  createdBy: UserFilterInput
  createdAt: ComparableDateTimeOperationFilterInput
}

input Calendar_UserFilterInput {
  and: [Calendar_UserFilterInput!]
  or: [Calendar_UserFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  calendarId: ComparableInt32OperationFilterInput
  calendar: CalendarFilterInput
}

input NotificationMessage_UserFilterInput {
  and: [NotificationMessage_UserFilterInput!]
  or: [NotificationMessage_UserFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  notificationMessageId: ComparableInt32OperationFilterInput
  notificationMessage: NotificationMessageFilterInput
}

input ListFilterInputTypeOfDocument_Job_UserFilterInput {
  all: Document_Job_UserFilterInput
  none: Document_Job_UserFilterInput
  some: Document_Job_UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfImage_Job_UserFilterInput {
  all: Image_Job_UserFilterInput
  none: Image_Job_UserFilterInput
  some: Image_Job_UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJob_User_VideoFilterInput {
  all: Job_User_VideoFilterInput
  none: Job_User_VideoFilterInput
  some: Job_User_VideoFilterInput
  any: Boolean
}

input JobRoleEnumOperationFilterInput {
  eq: JobRoleEnum
  neq: JobRoleEnum
  in: [JobRoleEnum!]
  nin: [JobRoleEnum!]
}

input RelationshipEnumOperationFilterInput {
  eq: RelationshipEnum
  neq: RelationshipEnum
  in: [RelationshipEnum!]
  nin: [RelationshipEnum!]
}

input FamilyRelationEnumOperationFilterInput {
  eq: FamilyRelationEnum
  neq: FamilyRelationEnum
  in: [FamilyRelationEnum!]
  nin: [FamilyRelationEnum!]
}

input MessageStateEnumOperationFilterInput {
  eq: MessageStateEnum
  neq: MessageStateEnum
  in: [MessageStateEnum!]
  nin: [MessageStateEnum!]
}

input HouseholdRoleEnumOperationFilterInput {
  eq: HouseholdRoleEnum
  neq: HouseholdRoleEnum
  in: [HouseholdRoleEnum!]
  nin: [HouseholdRoleEnum!]
}

input Document_Job_UserFilterInput {
  and: [Document_Job_UserFilterInput!]
  or: [Document_Job_UserFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  jobId: ComparableInt32OperationFilterInput
  job: JobFilterInput
  documentId: ComparableInt32OperationFilterInput
  document: DocumentFilterInput
  job_User: Job_UserFilterInput
}

input Image_Job_UserFilterInput {
  and: [Image_Job_UserFilterInput!]
  or: [Image_Job_UserFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  jobId: ComparableInt32OperationFilterInput
  job: JobFilterInput
  imageId: ComparableInt32OperationFilterInput
  image: ImageFilterInput
  job_User: Job_UserFilterInput
}

input Job_User_VideoFilterInput {
  and: [Job_User_VideoFilterInput!]
  or: [Job_User_VideoFilterInput!]
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  jobId: ComparableInt32OperationFilterInput
  job: JobFilterInput
  videoId: ComparableInt32OperationFilterInput
  video: VideoFilterInput
  job_User: Job_UserFilterInput
}

input DeleteNumberInput {
  id: Int!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: UserInput!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

input CreateNumberInput {
  id: Int!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: UserInput!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

type MutationOutputOfUpdateNumberOutput {
  data: UpdateNumberOutput
  errors: [UserError!]
}

type MutationOutputOfReadNumberOutput {
  data: ReadNumberOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteNumberOutput {
  data: DeleteNumberOutput
  errors: [UserError!]
}

type MutationOutputOfCreateNumberOutput {
  data: CreateNumberOutput
  errors: [UserError!]
}

input UpdatePageInput {
  id: Int!
  html: String!
}

input ReadPageInput {
  id: Int!
  html: String!
}

input DeletePageInput {
  id: Int!
  html: String!
}

input CreatePageInput {
  id: Int!
  html: String!
}

type MutationOutputOfUpdatePageOutput {
  data: UpdatePageOutput
  errors: [UserError!]
}

type MutationOutputOfReadPageOutput {
  data: ReadPageOutput
  errors: [UserError!]
}

type MutationOutputOfDeletePageOutput {
  data: DeletePageOutput
  errors: [UserError!]
}

type MutationOutputOfCreatePageOutput {
  data: CreatePageOutput
  errors: [UserError!]
}

input UpdatePostInput {
  id: Int!
}

input ReadPostInput {
  id: Int!
}

input DeletePostInput {
  id: Int!
}

input CreatePostInput {
  id: Int!
}

type MutationOutputOfUpdatePostOutput {
  data: UpdatePostOutput
  errors: [UserError!]
}

type MutationOutputOfReadPostOutput {
  data: ReadPostOutput
  errors: [UserError!]
}

type MutationOutputOfDeletePostOutput {
  data: DeletePostOutput
  errors: [UserError!]
}

type MutationOutputOfCreatePostOutput {
  data: CreatePostOutput
  errors: [UserError!]
}

input UpdateRoleClaimInput {
  role: RoleInput!
  id: Int!
  roleId: Int!
  claimType: String
  claimValue: String
}

input ReadRoleClaimInput {
  role: RoleInput!
  id: Int!
  roleId: Int!
  claimType: String
  claimValue: String
}

input DeleteRoleClaimInput {
  role: RoleInput!
  id: Int!
  roleId: Int!
  claimType: String
  claimValue: String
}

input CreateRoleClaimInput {
  role: RoleInput!
  id: Int!
  roleId: Int!
  claimType: String
  claimValue: String
}

type MutationOutputOfUpdateRoleClaimOutput {
  data: UpdateRoleClaimOutput
  errors: [UserError!]
}

type MutationOutputOfReadRoleClaimOutput {
  data: ReadRoleClaimOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteRoleClaimOutput {
  data: DeleteRoleClaimOutput
  errors: [UserError!]
}

type MutationOutputOfCreateRoleClaimOutput {
  data: CreateRoleClaimOutput
  errors: [UserError!]
}

input UpdateRoleInput {
  role_Users: [Role_UserInput!]!
  roleClaims: [RoleClaimInput!]!
  id: Int!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

input ReadRoleInput {
  role_Users: [Role_UserInput!]!
  roleClaims: [RoleClaimInput!]!
  id: Int!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

input DeleteRoleInput {
  role_Users: [Role_UserInput!]!
  roleClaims: [RoleClaimInput!]!
  id: Int!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

input CreateRoleInput {
  role_Users: [Role_UserInput!]!
  roleClaims: [RoleClaimInput!]!
  id: Int!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

type MutationOutputOfUpdateRoleOutput {
  data: UpdateRoleOutput
  errors: [UserError!]
}

type MutationOutputOfReadRoleOutput {
  data: ReadRoleOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteRoleOutput {
  data: DeleteRoleOutput
  errors: [UserError!]
}

type MutationOutputOfCreateRoleOutput {
  data: CreateRoleOutput
  errors: [UserError!]
}

input UpdateSurveyQuestionSelectInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

input ReadSurveyQuestionSelectInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

input DeleteSurveyQuestionSelectInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

input CreateSurveyQuestionSelectInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

type MutationOutputOfUpdateSurveyQuestionSelectOutput {
  data: UpdateSurveyQuestionSelectOutput
  errors: [UserError!]
}

type MutationOutputOfReadSurveyQuestionSelectOutput {
  data: ReadSurveyQuestionSelectOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteSurveyQuestionSelectOutput {
  data: DeleteSurveyQuestionSelectOutput
  errors: [UserError!]
}

type MutationOutputOfCreateSurveyQuestionSelectOutput {
  data: CreateSurveyQuestionSelectOutput
  errors: [UserError!]
}

input UpdateSurveyQuestionOptionInput {
  id: Int!
  globalId: String!
  html: String
}

input ReadSurveyQuestionOptionInput {
  id: Int!
  globalId: String!
  html: String
}

input DeleteSurveyQuestionOptionInput {
  id: Int!
  globalId: String!
  html: String
}

input CreateSurveyQuestionOptionInput {
  id: Int!
  globalId: String!
  html: String
}

type MutationOutputOfUpdateSurveyQuestionOptionOutput {
  data: UpdateSurveyQuestionOptionOutput
  errors: [UserError!]
}

type MutationOutputOfReadSurveyQuestionOptionOutput {
  data: ReadSurveyQuestionOptionOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteSurveyQuestionOptionOutput {
  data: DeleteSurveyQuestionOptionOutput
  errors: [UserError!]
}

type MutationOutputOfCreateSurveyQuestionOptionOutput {
  data: CreateSurveyQuestionOptionOutput
  errors: [UserError!]
}

input UpdateSurveyQuestionGroupInput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: SurveyInput!
  surveyQuestions: [SurveyQuestionInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input ReadSurveyQuestionGroupInput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: SurveyInput!
  surveyQuestions: [SurveyQuestionInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input DeleteSurveyQuestionGroupInput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: SurveyInput!
  surveyQuestions: [SurveyQuestionInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input CreateSurveyQuestionGroupInput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: SurveyInput!
  surveyQuestions: [SurveyQuestionInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type MutationOutputOfUpdateSurveyQuestionGroupOutput {
  data: UpdateSurveyQuestionGroupOutput
  errors: [UserError!]
}

type MutationOutputOfReadSurveyQuestionGroupOutput {
  data: ReadSurveyQuestionGroupOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteSurveyQuestionGroupOutput {
  data: DeleteSurveyQuestionGroupOutput
  errors: [UserError!]
}

type MutationOutputOfCreateSurveyQuestionGroupOutput {
  data: CreateSurveyQuestionGroupOutput
  errors: [UserError!]
}

input UpdateSurveyQuestionAnswerInput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestionInput!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input ReadSurveyQuestionAnswerInput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestionInput!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input DeleteSurveyQuestionAnswerInput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestionInput!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input CreateSurveyQuestionAnswerInput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestionInput!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type MutationOutputOfUpdateSurveyQuestionAnswerOutput {
  data: UpdateSurveyQuestionAnswerOutput
  errors: [UserError!]
}

type MutationOutputOfReadSurveyQuestionAnswerOutput {
  data: ReadSurveyQuestionAnswerOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteSurveyQuestionAnswerOutput {
  data: DeleteSurveyQuestionAnswerOutput
  errors: [UserError!]
}

type MutationOutputOfCreateSurveyQuestionAnswerOutput {
  data: CreateSurveyQuestionAnswerOutput
  errors: [UserError!]
}

input UpdateSurveyQuestionInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

input ReadSurveyQuestionInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

input DeleteSurveyQuestionInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

input CreateSurveyQuestionInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

type MutationOutputOfUpdateSurveyQuestionOutput {
  data: UpdateSurveyQuestionOutput
  errors: [UserError!]
}

type MutationOutputOfReadSurveyQuestionOutput {
  data: ReadSurveyQuestionOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteSurveyQuestionOutput {
  data: DeleteSurveyQuestionOutput
  errors: [UserError!]
}

type MutationOutputOfCreateSurveyQuestionOutput {
  data: CreateSurveyQuestionOutput
  errors: [UserError!]
}

input UpdateSurveyInput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroupInput!]!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input ReadSurveyInput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroupInput!]!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input DeleteSurveyInput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroupInput!]!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input CreateSurveyInput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroupInput!]!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type MutationOutputOfUpdateSurveyOutput {
  data: UpdateSurveyOutput
  errors: [UserError!]
}

type MutationOutputOfReadSurveyOutput {
  data: ReadSurveyOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteSurveyOutput {
  data: DeleteSurveyOutput
  errors: [UserError!]
}

type MutationOutputOfCreateSurveyOutput {
  data: CreateSurveyOutput
  errors: [UserError!]
}

input UpdateUserGroupRoleInput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroupInput!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
}

input ReadUserGroupRoleInput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroupInput!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
}

input DeleteUserGroupRoleInput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroupInput!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
}

input CreateUserGroupRoleInput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroupInput!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
}

type MutationOutputOfUpdateUserGroupRoleOutput {
  data: UpdateUserGroupRoleOutput
  errors: [UserError!]
}

type MutationOutputOfReadUserGroupRoleOutput {
  data: ReadUserGroupRoleOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteUserGroupRoleOutput {
  data: DeleteUserGroupRoleOutput
  errors: [UserError!]
}

type MutationOutputOfCreateUserGroupRoleOutput {
  data: CreateUserGroupRoleOutput
  errors: [UserError!]
}

input UpdateUserGroupInput {
  id: Int!
  userGroupRoles: [UserGroupRoleInput!]!
  user_UserGroups: [User_UserGroupInput!]!
}

input ReadUserGroupInput {
  id: Int!
  userGroupRoles: [UserGroupRoleInput!]!
  user_UserGroups: [User_UserGroupInput!]!
}

input DeleteUserGroupInput {
  id: Int!
  userGroupRoles: [UserGroupRoleInput!]!
  user_UserGroups: [User_UserGroupInput!]!
}

input CreateUserGroupInput {
  id: Int!
  userGroupRoles: [UserGroupRoleInput!]!
  user_UserGroups: [User_UserGroupInput!]!
}

type MutationOutputOfUpdateUserGroupOutput {
  data: UpdateUserGroupOutput
  errors: [UserError!]
}

type MutationOutputOfReadUserGroupOutput {
  data: ReadUserGroupOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteUserGroupOutput {
  data: DeleteUserGroupOutput
  errors: [UserError!]
}

type MutationOutputOfCreateUserGroupOutput {
  data: CreateUserGroupOutput
  errors: [UserError!]
}

input UpdateUserClaimInput {
  id: Int!
  user: UserInput!
  userId: Int!
  claimType: String
  claimValue: String
}

input ReadUserClaimInput {
  id: Int!
  user: UserInput!
  userId: Int!
  claimType: String
  claimValue: String
}

input DeleteUserClaimInput {
  id: Int!
  user: UserInput!
  userId: Int!
  claimType: String
  claimValue: String
}

input CreateUserClaimInput {
  id: Int!
  user: UserInput!
  userId: Int!
  claimType: String
  claimValue: String
}

type MutationOutputOfUpdateUserClaimOutput {
  data: UpdateUserClaimOutput
  errors: [UserError!]
}

type MutationOutputOfReadUserClaimOutput {
  data: ReadUserClaimOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteUserClaimOutput {
  data: DeleteUserClaimOutput
  errors: [UserError!]
}

type MutationOutputOfCreateUserClaimOutput {
  data: CreateUserClaimOutput
  errors: [UserError!]
}

input UpdateUserInput {
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaimInput!]!
  userLogins: [UserLoginInput!]!
  userTokens: [UserTokenInput!]!
  role_Users: [Role_UserInput!]!
  surveys: [SurveyInput!]!
  job_Users: [Job_UserInput!]!
  jobOffersReceived: [JobOffer_UserInput!]!
  jobOffersCreated: [JobOffer_UserInput!]!
  relationshipRequestsSent: [RelationshipRequestInput!]!
  relationshipRequestsRecieved: [RelationshipRequestInput!]!
  relationships: [RelationshipInput!]!
  relationshipsFromOthers: [RelationshipInput!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequestInput!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequestInput!]!
  friendRelationships: [FriendRelationshipInput!]!
  friendRelationshipsFromOthers: [FriendRelationshipInput!]!
  familyRelationships: [FamilyRelationshipInput!]!
  familyRelationshipsFromOthers: [FamilyRelationshipInput!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequestInput!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequestInput!]!
  connections: [ConnectionInput!]!
  connectionsFromOthers: [ConnectionInput!]!
  connectionRequestsSent: [ConnectionRequestInput!]!
  connectionRequestsRecieved: [ConnectionRequestInput!]!
  following: [FollowRelationshipInput!]!
  followers: [FollowRelationshipInput!]!
  createdChatMessages: [ChatMessageInput!]!
  chatMessage_Users: [ChatMessage_UserInput!]!
  chatRoom_Users: [ChatRoom_UserInput!]!
  user_UserGroups: [User_UserGroupInput!]!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
  household_Users: [Household_UserInput!]!
  household_UsersRequestsSent: [HouseholdRequestInput!]!
  household_UsersRequestsRecieved: [HouseholdRequestInput!]!
  calendar_Users: [Calendar_UserInput!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

input ReadUserInput {
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaimInput!]!
  userLogins: [UserLoginInput!]!
  userTokens: [UserTokenInput!]!
  role_Users: [Role_UserInput!]!
  surveys: [SurveyInput!]!
  job_Users: [Job_UserInput!]!
  jobOffersReceived: [JobOffer_UserInput!]!
  jobOffersCreated: [JobOffer_UserInput!]!
  relationshipRequestsSent: [RelationshipRequestInput!]!
  relationshipRequestsRecieved: [RelationshipRequestInput!]!
  relationships: [RelationshipInput!]!
  relationshipsFromOthers: [RelationshipInput!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequestInput!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequestInput!]!
  friendRelationships: [FriendRelationshipInput!]!
  friendRelationshipsFromOthers: [FriendRelationshipInput!]!
  familyRelationships: [FamilyRelationshipInput!]!
  familyRelationshipsFromOthers: [FamilyRelationshipInput!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequestInput!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequestInput!]!
  connections: [ConnectionInput!]!
  connectionsFromOthers: [ConnectionInput!]!
  connectionRequestsSent: [ConnectionRequestInput!]!
  connectionRequestsRecieved: [ConnectionRequestInput!]!
  following: [FollowRelationshipInput!]!
  followers: [FollowRelationshipInput!]!
  createdChatMessages: [ChatMessageInput!]!
  chatMessage_Users: [ChatMessage_UserInput!]!
  chatRoom_Users: [ChatRoom_UserInput!]!
  user_UserGroups: [User_UserGroupInput!]!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
  household_Users: [Household_UserInput!]!
  household_UsersRequestsSent: [HouseholdRequestInput!]!
  household_UsersRequestsRecieved: [HouseholdRequestInput!]!
  calendar_Users: [Calendar_UserInput!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

input DeleteUserInput {
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaimInput!]!
  userLogins: [UserLoginInput!]!
  userTokens: [UserTokenInput!]!
  role_Users: [Role_UserInput!]!
  surveys: [SurveyInput!]!
  job_Users: [Job_UserInput!]!
  jobOffersReceived: [JobOffer_UserInput!]!
  jobOffersCreated: [JobOffer_UserInput!]!
  relationshipRequestsSent: [RelationshipRequestInput!]!
  relationshipRequestsRecieved: [RelationshipRequestInput!]!
  relationships: [RelationshipInput!]!
  relationshipsFromOthers: [RelationshipInput!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequestInput!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequestInput!]!
  friendRelationships: [FriendRelationshipInput!]!
  friendRelationshipsFromOthers: [FriendRelationshipInput!]!
  familyRelationships: [FamilyRelationshipInput!]!
  familyRelationshipsFromOthers: [FamilyRelationshipInput!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequestInput!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequestInput!]!
  connections: [ConnectionInput!]!
  connectionsFromOthers: [ConnectionInput!]!
  connectionRequestsSent: [ConnectionRequestInput!]!
  connectionRequestsRecieved: [ConnectionRequestInput!]!
  following: [FollowRelationshipInput!]!
  followers: [FollowRelationshipInput!]!
  createdChatMessages: [ChatMessageInput!]!
  chatMessage_Users: [ChatMessage_UserInput!]!
  chatRoom_Users: [ChatRoom_UserInput!]!
  user_UserGroups: [User_UserGroupInput!]!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
  household_Users: [Household_UserInput!]!
  household_UsersRequestsSent: [HouseholdRequestInput!]!
  household_UsersRequestsRecieved: [HouseholdRequestInput!]!
  calendar_Users: [Calendar_UserInput!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

input CreateUserInput {
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaimInput!]!
  userLogins: [UserLoginInput!]!
  userTokens: [UserTokenInput!]!
  role_Users: [Role_UserInput!]!
  surveys: [SurveyInput!]!
  job_Users: [Job_UserInput!]!
  jobOffersReceived: [JobOffer_UserInput!]!
  jobOffersCreated: [JobOffer_UserInput!]!
  relationshipRequestsSent: [RelationshipRequestInput!]!
  relationshipRequestsRecieved: [RelationshipRequestInput!]!
  relationships: [RelationshipInput!]!
  relationshipsFromOthers: [RelationshipInput!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequestInput!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequestInput!]!
  friendRelationships: [FriendRelationshipInput!]!
  friendRelationshipsFromOthers: [FriendRelationshipInput!]!
  familyRelationships: [FamilyRelationshipInput!]!
  familyRelationshipsFromOthers: [FamilyRelationshipInput!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequestInput!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequestInput!]!
  connections: [ConnectionInput!]!
  connectionsFromOthers: [ConnectionInput!]!
  connectionRequestsSent: [ConnectionRequestInput!]!
  connectionRequestsRecieved: [ConnectionRequestInput!]!
  following: [FollowRelationshipInput!]!
  followers: [FollowRelationshipInput!]!
  createdChatMessages: [ChatMessageInput!]!
  chatMessage_Users: [ChatMessage_UserInput!]!
  chatRoom_Users: [ChatRoom_UserInput!]!
  user_UserGroups: [User_UserGroupInput!]!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
  household_Users: [Household_UserInput!]!
  household_UsersRequestsSent: [HouseholdRequestInput!]!
  household_UsersRequestsRecieved: [HouseholdRequestInput!]!
  calendar_Users: [Calendar_UserInput!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type MutationOutputOfUpdateUserOutput {
  data: UpdateUserOutput
  errors: [UserError!]
}

type MutationOutputOfReadUserOutput {
  data: ReadUserOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteUserOutput {
  data: DeleteUserOutput
  errors: [UserError!]
}

type MutationOutputOfCreateUserOutput {
  data: CreateUserOutput
  errors: [UserError!]
}

input UpdateVideoInput {
  id: Int!
}

input ReadVideoInput {
  id: Int!
}

input DeleteVideoInput {
  id: Int!
}

input CreateVideoInput {
  id: Int!
}

type MutationOutputOfUpdateVideoOutput {
  data: UpdateVideoOutput
  errors: [UserError!]
}

type MutationOutputOfReadVideoOutput {
  data: ReadVideoOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteVideoOutput {
  data: DeleteVideoOutput
  errors: [UserError!]
}

type MutationOutputOfCreateVideoOutput {
  data: CreateVideoOutput
  errors: [UserError!]
}

input ReadNumberInput {
  id: Int!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: UserInput!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

input UpdateNumberInput {
  id: Int!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: UserInput!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

type MutationOutputOfCreateNotificationMessageOutput {
  data: CreateNotificationMessageOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteNotificationMessageOutput {
  data: DeleteNotificationMessageOutput
  errors: [UserError!]
}

type MutationOutputOfReadNotificationMessageOutput {
  data: ReadNotificationMessageOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateNotificationMessageOutput {
  data: UpdateNotificationMessageOutput
  errors: [UserError!]
}

input CreateNotificationMessageInput {
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_UserInput!]!
  id: Int!
  html: String!
  sentAt: DateTime
}

input DeleteNotificationMessageInput {
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_UserInput!]!
  id: Int!
  html: String!
  sentAt: DateTime
}

input ReadNotificationMessageInput {
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_UserInput!]!
  id: Int!
  html: String!
  sentAt: DateTime
}

input UpdateNotificationMessageInput {
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_UserInput!]!
  id: Int!
  html: String!
  sentAt: DateTime
}

type MutationOutputOfCreateMessageOutput {
  data: CreateMessageOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteMessageOutput {
  data: DeleteMessageOutput
  errors: [UserError!]
}

type MutationOutputOfReadMessageOutput {
  data: ReadMessageOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateMessageOutput {
  data: UpdateMessageOutput
  errors: [UserError!]
}

input CreateMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
}

input DeleteMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
}

input ReadMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
}

input UpdateMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
}

type MutationOutputOfCreateJobOutput {
  data: CreateJobOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteJobOutput {
  data: DeleteJobOutput
  errors: [UserError!]
}

type MutationOutputOfReadJobOutput {
  data: ReadJobOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateJobOutput {
  data: UpdateJobOutput
  errors: [UserError!]
}

input CreateJobInput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: AddressInput!
  job_Users: [Job_UserInput!]!
  companyId: Int
  company: CompanyInput!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input DeleteJobInput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: AddressInput!
  job_Users: [Job_UserInput!]!
  companyId: Int
  company: CompanyInput!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input ReadJobInput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: AddressInput!
  job_Users: [Job_UserInput!]!
  companyId: Int
  company: CompanyInput!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input UpdateJobInput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: AddressInput!
  job_Users: [Job_UserInput!]!
  companyId: Int
  company: CompanyInput!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type MutationOutputOfCreateJobOfferOutput {
  data: CreateJobOfferOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteJobOfferOutput {
  data: DeleteJobOfferOutput
  errors: [UserError!]
}

type MutationOutputOfReadJobOfferOutput {
  data: ReadJobOfferOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateJobOfferOutput {
  data: UpdateJobOfferOutput
  errors: [UserError!]
}

input CreateJobOfferInput {
  id: Int!
  jobId: Int!
  job: JobInput!
  jobOffer_Users: [JobOffer_UserInput!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: UserInput!
  updatedAt: DateTime!
  sentAt: DateTime
}

input DeleteJobOfferInput {
  id: Int!
  jobId: Int!
  job: JobInput!
  jobOffer_Users: [JobOffer_UserInput!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: UserInput!
  updatedAt: DateTime!
  sentAt: DateTime
}

input ReadJobOfferInput {
  id: Int!
  jobId: Int!
  job: JobInput!
  jobOffer_Users: [JobOffer_UserInput!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: UserInput!
  updatedAt: DateTime!
  sentAt: DateTime
}

input UpdateJobOfferInput {
  id: Int!
  jobId: Int!
  job: JobInput!
  jobOffer_Users: [JobOffer_UserInput!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: UserInput!
  updatedAt: DateTime!
  sentAt: DateTime
}

type MutationOutputOfCreateImageOutput {
  data: CreateImageOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteImageOutput {
  data: DeleteImageOutput
  errors: [UserError!]
}

type MutationOutputOfReadImageOutput {
  data: ReadImageOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateImageOutput {
  data: UpdateImageOutput
  errors: [UserError!]
}

input CreateImageInput {
  id: Int!
}

input DeleteImageInput {
  id: Int!
}

input ReadImageInput {
  id: Int!
}

input UpdateImageInput {
  id: Int!
}

type MutationOutputOfCreateHouseholdOutput {
  data: CreateHouseholdOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteHouseholdOutput {
  data: DeleteHouseholdOutput
  errors: [UserError!]
}

type MutationOutputOfReadHouseholdOutput {
  data: ReadHouseholdOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateHouseholdOutput {
  data: UpdateHouseholdOutput
  errors: [UserError!]
}

input CreateHouseholdInput {
  id: Int!
  household_Users: [Household_UserInput!]!
}

input DeleteHouseholdInput {
  id: Int!
  household_Users: [Household_UserInput!]!
}

input ReadHouseholdInput {
  id: Int!
  household_Users: [Household_UserInput!]!
}

input UpdateHouseholdInput {
  id: Int!
  household_Users: [Household_UserInput!]!
}

type MutationOutputOfCreateHistoryForUserOutput {
  data: CreateHistoryForUserOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteHistoryForUserOutput {
  data: DeleteHistoryForUserOutput
  errors: [UserError!]
}

type MutationOutputOfReadHistoryForUserOutput {
  data: ReadHistoryForUserOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateHistoryForUserOutput {
  data: UpdateHistoryForUserOutput
  errors: [UserError!]
}

input CreateHistoryForUserInput {
  id: Int!
  userId: Int
  user: UserInput!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

input DeleteHistoryForUserInput {
  id: Int!
  userId: Int
  user: UserInput!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

input ReadHistoryForUserInput {
  id: Int!
  userId: Int
  user: UserInput!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

input UpdateHistoryForUserInput {
  id: Int!
  userId: Int
  user: UserInput!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

type MutationOutputOfCreateDocumentOutput {
  data: CreateDocumentOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteDocumentOutput {
  data: DeleteDocumentOutput
  errors: [UserError!]
}

type MutationOutputOfReadDocumentOutput {
  data: ReadDocumentOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateDocumentOutput {
  data: UpdateDocumentOutput
  errors: [UserError!]
}

input CreateDocumentInput {
  id: Int!
}

input DeleteDocumentInput {
  id: Int!
}

input ReadDocumentInput {
  id: Int!
}

input UpdateDocumentInput {
  id: Int!
}

type MutationOutputOfCreateCompanyOutput {
  data: CreateCompanyOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteCompanyOutput {
  data: DeleteCompanyOutput
  errors: [UserError!]
}

type MutationOutputOfReadCompanyOutput {
  data: ReadCompanyOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateCompanyOutput {
  data: UpdateCompanyOutput
  errors: [UserError!]
}

input CreateCompanyInput {
  id: Int!
  companyName: String!
  address: AddressInput!
}

input DeleteCompanyInput {
  id: Int!
  companyName: String!
  address: AddressInput!
}

input ReadCompanyInput {
  id: Int!
  companyName: String!
  address: AddressInput!
}

input UpdateCompanyInput {
  id: Int!
  companyName: String!
  address: AddressInput!
}

type MutationOutputOfCreateChatMessageOutput {
  data: CreateChatMessageOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteChatMessageOutput {
  data: DeleteChatMessageOutput
  errors: [UserError!]
}

type MutationOutputOfReadChatMessageOutput {
  data: ReadChatMessageOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateChatMessageOutput {
  data: UpdateChatMessageOutput
  errors: [UserError!]
}

input CreateChatMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

input DeleteChatMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

input ReadChatMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

input UpdateChatMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

type MutationOutputOfCreateChatRoomOutput {
  data: CreateChatRoomOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteChatRoomOutput {
  data: DeleteChatRoomOutput
  errors: [UserError!]
}

type MutationOutputOfReadChatRoomOutput {
  data: ReadChatRoomOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateChatRoomOutput {
  data: UpdateChatRoomOutput
  errors: [UserError!]
}

input CreateChatRoomInput {
  id: Int!
  chatRoomUsers: [ChatRoom_UserInput!]!
  chatMessages: [ChatMessageInput!]!
}

input DeleteChatRoomInput {
  id: Int!
  chatRoomUsers: [ChatRoom_UserInput!]!
  chatMessages: [ChatMessageInput!]!
}

input ReadChatRoomInput {
  id: Int!
  chatRoomUsers: [ChatRoom_UserInput!]!
  chatMessages: [ChatMessageInput!]!
}

input UpdateChatRoomInput {
  id: Int!
  chatRoomUsers: [ChatRoom_UserInput!]!
  chatMessages: [ChatMessageInput!]!
}

type MutationOutputOfCreateEmailMessageOutput {
  data: CreateEmailMessageOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteEmailMessageOutput {
  data: DeleteEmailMessageOutput
  errors: [UserError!]
}

type MutationOutputOfReadEmailMessageOutput {
  data: ReadEmailMessageOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateEmailMessageOutput {
  data: UpdateEmailMessageOutput
  errors: [UserError!]
}

input CreateEmailMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

input DeleteEmailMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

input ReadEmailMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

input UpdateEmailMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

type MutationOutputOfCreateCalendarOutput {
  data: CreateCalendarOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteCalendarOutput {
  data: DeleteCalendarOutput
  errors: [UserError!]
}

type MutationOutputOfReadCalendarOutput {
  data: ReadCalendarOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateCalendarOutput {
  data: UpdateCalendarOutput
  errors: [UserError!]
}

input CreateCalendarInput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTaskInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  calendar_Users: [Calendar_UserInput!]!
}

input DeleteCalendarInput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTaskInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  calendar_Users: [Calendar_UserInput!]!
}

input ReadCalendarInput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTaskInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  calendar_Users: [Calendar_UserInput!]!
}

input UpdateCalendarInput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTaskInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  calendar_Users: [Calendar_UserInput!]!
}

type MutationOutputOfCreateCalendarTaskOutput {
  data: CreateCalendarTaskOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteCalendarTaskOutput {
  data: DeleteCalendarTaskOutput
  errors: [UserError!]
}

type MutationOutputOfReadCalendarTaskOutput {
  data: ReadCalendarTaskOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateCalendarTaskOutput {
  data: UpdateCalendarTaskOutput
  errors: [UserError!]
}

input CreateCalendarTaskInput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: CalendarInput!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input DeleteCalendarTaskInput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: CalendarInput!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input ReadCalendarTaskInput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: CalendarInput!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input UpdateCalendarTaskInput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: CalendarInput!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type MutationOutputOfCreateAddressOutput {
  data: CreateAddressOutput
  errors: [UserError!]
}

type MutationOutputOfDeleteAddressOutput {
  data: DeleteAddressOutput
  errors: [UserError!]
}

type MutationOutputOfReadAddressOutput {
  data: ReadAddressOutput
  errors: [UserError!]
}

type MutationOutputOfUpdateAddressOutput {
  data: UpdateAddressOutput
  errors: [UserError!]
}

input CreateAddressInput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

input DeleteAddressInput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

input ReadAddressInput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

input UpdateAddressInput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

type Document_Job_User {
  userId: Int!
  user: User!
  jobId: Int!
  job: Job!
  documentId: Int!
  document: Document!
  job_User: Job_User!
}

type Image_Job_User {
  userId: Int!
  user: User!
  jobId: Int!
  job: Job!
  imageId: Int!
  image: Image!
  job_User: Job_User!
}

type Job_User_Video {
  userId: Int!
  user: User!
  jobId: Int!
  job: Job!
  videoId: Int!
  video: Video!
  job_User: Job_User!
}

enum JobRoleEnum {
  NONE
  JOB_APPLICANT
  JOB_EMPLOYEE
  JOB_RECRUITER
}

enum RelationshipEnum {
  NONE
  DATING
  MARRIED
}

enum FamilyRelationEnum {
  NONE
  MOTHER
  FATHER
  SON
  DAUGHTER
  BROTHER
  SISTER
  UNCLE
  AUNT
  NEPHEW
  NIECE
  COUSIN_FEMALE
  COUSIN_MALE
  GRANDMOTHER
  GRANDFATHER
  GRANDDAUGHTER
  GRANDSON
  STEPSISTER
  STEPBROTHER
  STEPMOTHER
  STEPFATHER
  STEPDAUGHTER
  STEPSON
  SISTER_IN_LAW
  BROTHER_IN_LAW
  MOTHER_IN_LAW
  FATHER_IN_LAW
  DAUGHTER_IN_LAW
  SON_IN_LAW
  SIBLING__GENDER_NEUTRAL
  PARENT__GENDER_NEUTRAL
  SIBLING_OF_PARENT__GENDER_NEUTRAL
  CHILD_OF_SIBLING__GENDER_NEUTRAL
  CHILD__GENDER_NEUTRAL
  COUSIN__GENDER_NEUTRAL
  CHILD_IN_LAW__GENDER_NEUTRAL
  PARENT_IN_LAW__GENDER_NEUTRAL
  SIBLING_IN_LAW__GENDER_NEUTRAL
  STEP_PARENT__GENDER_NEUTRAL
  STEP_CHILD__GENDER_NEUTRAL
  STEP_SIBLING__GENDER_NEUTRAL
  FAMILY_MEMBER__GENDER_NEUTRAL
  PET__GENDER_NEUTRAL
  PET_OWNER__GENDER_NEUTRAL
}

enum MessageStateEnum {
  READ
  LIKED
  DISLIKED
  SHOCKED
}

enum HouseholdRoleEnum {
  NONE
  ROOMMATE
  DEPENDENT
}

type KeyValuePairOfStringAndString {
  key: String!
  value: String!
}

type UpdateAddressOutput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

type ReadAddressOutput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

type DeleteAddressOutput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

type CreateAddressOutput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

input CalendarInput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTaskInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  calendar_Users: [Calendar_UserInput!]!
}

type UpdateCalendarTaskOutput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: Calendar!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type ReadCalendarTaskOutput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: Calendar!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type DeleteCalendarTaskOutput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: Calendar!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type CreateCalendarTaskOutput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: Calendar!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

input CalendarTaskInput {
  id: Int!
  description: String!
  calendarId: Int!
  calendar: CalendarInput!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type UpdateCalendarOutput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTask!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  calendar_Users: [Calendar_User!]!
}

type ReadCalendarOutput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTask!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  calendar_Users: [Calendar_User!]!
}

type DeleteCalendarOutput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTask!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  calendar_Users: [Calendar_User!]!
}

type CreateCalendarOutput {
  id: Int!
  description: String!
  calendarTasks: [CalendarTask!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  calendar_Users: [Calendar_User!]!
}

type UpdateEmailMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type ReadEmailMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type DeleteEmailMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type CreateEmailMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type UpdateChatRoomOutput {
  id: Int!
  chatRoomUsers: [ChatRoom_User!]!
  chatMessages: [ChatMessage!]!
}

type ReadChatRoomOutput {
  id: Int!
  chatRoomUsers: [ChatRoom_User!]!
  chatMessages: [ChatMessage!]!
}

type DeleteChatRoomOutput {
  id: Int!
  chatRoomUsers: [ChatRoom_User!]!
  chatMessages: [ChatMessage!]!
}

type CreateChatRoomOutput {
  id: Int!
  chatRoomUsers: [ChatRoom_User!]!
  chatMessages: [ChatMessage!]!
}

type UpdateChatMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type ReadChatMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type DeleteChatMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type CreateChatMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_User!]!
  createdById: Int
  createdBy: User!
}

type UpdateCompanyOutput {
  id: Int!
  companyName: String!
  address: Address!
}

type ReadCompanyOutput {
  id: Int!
  companyName: String!
  address: Address!
}

type DeleteCompanyOutput {
  id: Int!
  companyName: String!
  address: Address!
}

type CreateCompanyOutput {
  id: Int!
  companyName: String!
  address: Address!
}

type UpdateDocumentOutput {
  id: Int!
}

type ReadDocumentOutput {
  id: Int!
}

type DeleteDocumentOutput {
  id: Int!
}

type CreateDocumentOutput {
  id: Int!
}

type UpdateHistoryForUserOutput {
  id: Int!
  userId: Int
  user: User!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

type ReadHistoryForUserOutput {
  id: Int!
  userId: Int
  user: User!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

type DeleteHistoryForUserOutput {
  id: Int!
  userId: Int
  user: User!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

type CreateHistoryForUserOutput {
  id: Int!
  userId: Int
  user: User!
  actionType: UserActionEnum!
  targetTableName: String
  targetGlobalId: String
  targetLocalIds: String
  description: String
}

type UpdateHouseholdOutput {
  id: Int!
  household_Users: [Household_User!]!
}

type ReadHouseholdOutput {
  id: Int!
  household_Users: [Household_User!]!
}

type DeleteHouseholdOutput {
  id: Int!
  household_Users: [Household_User!]!
}

type CreateHouseholdOutput {
  id: Int!
  household_Users: [Household_User!]!
}

type UpdateImageOutput {
  id: Int!
}

type ReadImageOutput {
  id: Int!
}

type DeleteImageOutput {
  id: Int!
}

type CreateImageOutput {
  id: Int!
}

input JobInput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: AddressInput!
  job_Users: [Job_UserInput!]!
  companyId: Int
  company: CompanyInput!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type UpdateJobOfferOutput {
  id: Int!
  jobId: Int!
  job: Job!
  jobOffer_Users: [JobOffer_User!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: User!
  updatedAt: DateTime!
  sentAt: DateTime
}

type ReadJobOfferOutput {
  id: Int!
  jobId: Int!
  job: Job!
  jobOffer_Users: [JobOffer_User!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: User!
  updatedAt: DateTime!
  sentAt: DateTime
}

type DeleteJobOfferOutput {
  id: Int!
  jobId: Int!
  job: Job!
  jobOffer_Users: [JobOffer_User!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: User!
  updatedAt: DateTime!
  sentAt: DateTime
}

type CreateJobOfferOutput {
  id: Int!
  jobId: Int!
  job: Job!
  jobOffer_Users: [JobOffer_User!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: User!
  updatedAt: DateTime!
  sentAt: DateTime
}

input CompanyInput {
  id: Int!
  companyName: String!
  address: AddressInput!
}

input AddressInput {
  id: Int!
  unit: String!
  number: String!
  street: String!
  city: String!
  district: String!
  region: String!
  postcode: String!
}

type UpdateJobOutput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: Address!
  job_Users: [Job_User!]!
  companyId: Int
  company: Company!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type ReadJobOutput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: Address!
  job_Users: [Job_User!]!
  companyId: Int
  company: Company!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type DeleteJobOutput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: Address!
  job_Users: [Job_User!]!
  companyId: Int
  company: Company!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type CreateJobOutput {
  id: Int!
  jobTitle: JobTitleEnum!
  jobCategory: JobCategoryEnum!
  jobAddressId: Int
  jobAddress: Address!
  job_Users: [Job_User!]!
  companyId: Int
  company: Company!
  minimumSalary: Decimal
  maximumSalary: Decimal
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type UpdateMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
}

type ReadMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
}

type DeleteMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
}

type CreateMessageOutput {
  id: Int!
  html: String!
  sentAt: DateTime
}

input NotificationMessage_UserInput {
  userId: Int!
  user: UserInput!
  notificationMessageId: Int!
  notificationMessage: NotificationMessageInput!
}

type UpdateNotificationMessageOutput {
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_User!]!
  id: Int!
  html: String!
  sentAt: DateTime
}

type ReadNotificationMessageOutput {
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_User!]!
  id: Int!
  html: String!
  sentAt: DateTime
}

type DeleteNotificationMessageOutput {
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_User!]!
  id: Int!
  html: String!
  sentAt: DateTime
}

type CreateNotificationMessageOutput {
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_User!]!
  id: Int!
  html: String!
  sentAt: DateTime
}

type CreateVideoOutput {
  id: Int!
}

type DeleteVideoOutput {
  id: Int!
}

type ReadVideoOutput {
  id: Int!
}

type UpdateVideoOutput {
  id: Int!
}

type CreateUserOutput {
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaim!]!
  userLogins: [UserLogin!]!
  userTokens: [UserToken!]!
  role_Users: [Role_User!]!
  surveys: [Survey!]!
  job_Users: [Job_User!]!
  jobOffersReceived: [JobOffer_User!]!
  jobOffersCreated: [JobOffer_User!]!
  relationshipRequestsSent: [RelationshipRequest!]!
  relationshipRequestsRecieved: [RelationshipRequest!]!
  relationships: [Relationship!]!
  relationshipsFromOthers: [Relationship!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequest!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequest!]!
  friendRelationships: [FriendRelationship!]!
  friendRelationshipsFromOthers: [FriendRelationship!]!
  familyRelationships: [FamilyRelationship!]!
  familyRelationshipsFromOthers: [FamilyRelationship!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequest!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequest!]!
  connections: [Connection!]!
  connectionsFromOthers: [Connection!]!
  connectionRequestsSent: [ConnectionRequest!]!
  connectionRequestsRecieved: [ConnectionRequest!]!
  following: [FollowRelationship!]!
  followers: [FollowRelationship!]!
  createdChatMessages: [ChatMessage!]!
  chatMessage_Users: [ChatMessage_User!]!
  chatRoom_Users: [ChatRoom_User!]!
  user_UserGroups: [User_UserGroup!]!
  user_UserGroupRoles: [User_UserGroupRole!]!
  household_Users: [Household_User!]!
  household_UsersRequestsSent: [HouseholdRequest!]!
  household_UsersRequestsRecieved: [HouseholdRequest!]!
  calendar_Users: [Calendar_User!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type DeleteUserOutput {
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaim!]!
  userLogins: [UserLogin!]!
  userTokens: [UserToken!]!
  role_Users: [Role_User!]!
  surveys: [Survey!]!
  job_Users: [Job_User!]!
  jobOffersReceived: [JobOffer_User!]!
  jobOffersCreated: [JobOffer_User!]!
  relationshipRequestsSent: [RelationshipRequest!]!
  relationshipRequestsRecieved: [RelationshipRequest!]!
  relationships: [Relationship!]!
  relationshipsFromOthers: [Relationship!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequest!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequest!]!
  friendRelationships: [FriendRelationship!]!
  friendRelationshipsFromOthers: [FriendRelationship!]!
  familyRelationships: [FamilyRelationship!]!
  familyRelationshipsFromOthers: [FamilyRelationship!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequest!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequest!]!
  connections: [Connection!]!
  connectionsFromOthers: [Connection!]!
  connectionRequestsSent: [ConnectionRequest!]!
  connectionRequestsRecieved: [ConnectionRequest!]!
  following: [FollowRelationship!]!
  followers: [FollowRelationship!]!
  createdChatMessages: [ChatMessage!]!
  chatMessage_Users: [ChatMessage_User!]!
  chatRoom_Users: [ChatRoom_User!]!
  user_UserGroups: [User_UserGroup!]!
  user_UserGroupRoles: [User_UserGroupRole!]!
  household_Users: [Household_User!]!
  household_UsersRequestsSent: [HouseholdRequest!]!
  household_UsersRequestsRecieved: [HouseholdRequest!]!
  calendar_Users: [Calendar_User!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type ReadUserOutput {
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaim!]!
  userLogins: [UserLogin!]!
  userTokens: [UserToken!]!
  role_Users: [Role_User!]!
  surveys: [Survey!]!
  job_Users: [Job_User!]!
  jobOffersReceived: [JobOffer_User!]!
  jobOffersCreated: [JobOffer_User!]!
  relationshipRequestsSent: [RelationshipRequest!]!
  relationshipRequestsRecieved: [RelationshipRequest!]!
  relationships: [Relationship!]!
  relationshipsFromOthers: [Relationship!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequest!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequest!]!
  friendRelationships: [FriendRelationship!]!
  friendRelationshipsFromOthers: [FriendRelationship!]!
  familyRelationships: [FamilyRelationship!]!
  familyRelationshipsFromOthers: [FamilyRelationship!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequest!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequest!]!
  connections: [Connection!]!
  connectionsFromOthers: [Connection!]!
  connectionRequestsSent: [ConnectionRequest!]!
  connectionRequestsRecieved: [ConnectionRequest!]!
  following: [FollowRelationship!]!
  followers: [FollowRelationship!]!
  createdChatMessages: [ChatMessage!]!
  chatMessage_Users: [ChatMessage_User!]!
  chatRoom_Users: [ChatRoom_User!]!
  user_UserGroups: [User_UserGroup!]!
  user_UserGroupRoles: [User_UserGroupRole!]!
  household_Users: [Household_User!]!
  household_UsersRequestsSent: [HouseholdRequest!]!
  household_UsersRequestsRecieved: [HouseholdRequest!]!
  calendar_Users: [Calendar_User!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

type UpdateUserOutput {
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaim!]!
  userLogins: [UserLogin!]!
  userTokens: [UserToken!]!
  role_Users: [Role_User!]!
  surveys: [Survey!]!
  job_Users: [Job_User!]!
  jobOffersReceived: [JobOffer_User!]!
  jobOffersCreated: [JobOffer_User!]!
  relationshipRequestsSent: [RelationshipRequest!]!
  relationshipRequestsRecieved: [RelationshipRequest!]!
  relationships: [Relationship!]!
  relationshipsFromOthers: [Relationship!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequest!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequest!]!
  friendRelationships: [FriendRelationship!]!
  friendRelationshipsFromOthers: [FriendRelationship!]!
  familyRelationships: [FamilyRelationship!]!
  familyRelationshipsFromOthers: [FamilyRelationship!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequest!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequest!]!
  connections: [Connection!]!
  connectionsFromOthers: [Connection!]!
  connectionRequestsSent: [ConnectionRequest!]!
  connectionRequestsRecieved: [ConnectionRequest!]!
  following: [FollowRelationship!]!
  followers: [FollowRelationship!]!
  createdChatMessages: [ChatMessage!]!
  chatMessage_Users: [ChatMessage_User!]!
  chatRoom_Users: [ChatRoom_User!]!
  user_UserGroups: [User_UserGroup!]!
  user_UserGroupRoles: [User_UserGroupRole!]!
  household_Users: [Household_User!]!
  household_UsersRequestsSent: [HouseholdRequest!]!
  household_UsersRequestsRecieved: [HouseholdRequest!]!
  calendar_Users: [Calendar_User!]!
  id: Int!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

input Calendar_UserInput {
  userId: Int!
  user: UserInput!
  calendarId: Int!
  calendar: CalendarInput!
}

input HouseholdRequestInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
  householdId: Int!
  household: HouseholdInput!
  householdRoleType: HouseholdRoleEnum!
  sentAt: DateTime
  createdById: Int!
  createdBy: UserInput!
  createdAt: DateTime!
}

input Household_UserInput {
  userId: Int!
  user: UserInput!
  householdId: Int!
  household: HouseholdInput!
}

input ChatRoom_UserInput {
  userId: Int!
  user: UserInput!
  chatRoomId: Int!
  chatRoom: ChatRoomInput!
  joinedAt: DateTime!
}

input ChatMessage_UserInput {
  userId: Int!
  user: UserInput!
  chatMessageId: Int!
  chatMessage: ChatMessageInput!
  messageState: MessageStateEnum!
}

input ChatMessageInput {
  id: Int!
  html: String!
  sentAt: DateTime
  editedAt: DateTime
  chatMessage_Users: [ChatMessage_UserInput!]!
  createdById: Int
  createdBy: UserInput!
}

input FollowRelationshipInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
}

input ConnectionRequestInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
}

input ConnectionInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
}

input FamilyRelationshipRequestInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
  familyRelationType: FamilyRelationEnum!
  sentAt: DateTime
  createdAt: DateTime!
  createdById: Int!
  createdBy: UserInput!
}

input FamilyRelationshipInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
  familyRelationshipType: FamilyRelationEnum!
}

input FriendRelationshipInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
}

input FriendRelationshipRequestInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
  sentAt: DateTime
  createdById: Int!
  createdBy: UserInput!
  createdAt: DateTime!
}

input RelationshipInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
  relationshipType: RelationshipEnum!
}

input RelationshipRequestInput {
  fromUserId: Int!
  fromUser: UserInput!
  toUserId: Int!
  toUser: UserInput!
  createdById: Int!
  createdBy: UserInput!
  createdAt: DateTime!
  sentAt: DateTime
  relationshipType: RelationshipEnum!
}

input JobOffer_UserInput {
  targetUserId: Int!
  targetUser: UserInput!
  jobOfferId: Int!
  jobOffer: JobOfferInput!
  createdAt: DateTime!
  createdById: Int!
  createdBy: UserInput!
  updatedAt: DateTime!
}

input Job_UserInput {
  userId: Int!
  user: UserInput!
  jobId: Int!
  job: JobInput!
  document_Job_Users: [Document_Job_UserInput!]!
  image_Job_Users: [Image_Job_UserInput!]!
  job_User_Videos: [Job_User_VideoInput!]!
  jobRole: JobRoleEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserTokenInput {
  user: UserInput!
  userId: Int!
  loginProvider: String
  name: String
  value: String
}

input UserLoginInput {
  user: UserInput!
  loginProvider: String
  providerKey: String
  providerDisplayName: String
  userId: Int!
}

input UserClaimInput {
  id: Int!
  user: UserInput!
  userId: Int!
  claimType: String
  claimValue: String
}

type CreateUserClaimOutput {
  toClaim: Claim
  id: Int!
  user: User!
  userId: Int!
  claimType: String
  claimValue: String
}

type DeleteUserClaimOutput {
  toClaim: Claim
  id: Int!
  user: User!
  userId: Int!
  claimType: String
  claimValue: String
}

type ReadUserClaimOutput {
  toClaim: Claim
  id: Int!
  user: User!
  userId: Int!
  claimType: String
  claimValue: String
}

type UpdateUserClaimOutput {
  toClaim: Claim
  id: Int!
  user: User!
  userId: Int!
  claimType: String
  claimValue: String
}

type CreateUserGroupOutput {
  id: Int!
  userGroupRoles: [UserGroupRole!]!
  user_UserGroups: [User_UserGroup!]!
}

type DeleteUserGroupOutput {
  id: Int!
  userGroupRoles: [UserGroupRole!]!
  user_UserGroups: [User_UserGroup!]!
}

type ReadUserGroupOutput {
  id: Int!
  userGroupRoles: [UserGroupRole!]!
  user_UserGroups: [User_UserGroup!]!
}

type UpdateUserGroupOutput {
  id: Int!
  userGroupRoles: [UserGroupRole!]!
  user_UserGroups: [User_UserGroup!]!
}

input User_UserGroupInput {
  userId: Int!
  user: UserInput!
  userGroupId: Int!
  userGroup: UserGroupInput!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
}

input UserGroupRoleInput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroupInput!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
}

type CreateUserGroupRoleOutput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroup!
  user_UserGroupRoles: [User_UserGroupRole!]!
}

type DeleteUserGroupRoleOutput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroup!
  user_UserGroupRoles: [User_UserGroupRole!]!
}

type ReadUserGroupRoleOutput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroup!
  user_UserGroupRoles: [User_UserGroupRole!]!
}

type UpdateUserGroupRoleOutput {
  id: Int!
  name: String!
  userGroupId: Int!
  userGroup: UserGroup!
  user_UserGroupRoles: [User_UserGroupRole!]!
}

input User_UserGroupRoleInput {
  userId: Int!
  user: UserInput!
  userGroupRoleId: Int!
  userGroupRole: UserGroupRoleInput!
}

input UserGroupInput {
  id: Int!
  userGroupRoles: [UserGroupRoleInput!]!
  user_UserGroups: [User_UserGroupInput!]!
}

type CreateSurveyOutput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroup!]!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type DeleteSurveyOutput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroup!]!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type ReadSurveyOutput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroup!]!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type UpdateSurveyOutput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroup!]!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type CreateSurveyQuestionOutput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type DeleteSurveyQuestionOutput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type ReadSurveyQuestionOutput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type UpdateSurveyQuestionOutput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type CreateSurveyQuestionAnswerOutput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestion!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type DeleteSurveyQuestionAnswerOutput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestion!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type ReadSurveyQuestionAnswerOutput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestion!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type UpdateSurveyQuestionAnswerOutput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestion!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type CreateSurveyQuestionGroupOutput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: Survey!
  surveyQuestions: [SurveyQuestion!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type DeleteSurveyQuestionGroupOutput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: Survey!
  surveyQuestions: [SurveyQuestion!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type ReadSurveyQuestionGroupOutput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: Survey!
  surveyQuestions: [SurveyQuestion!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

type UpdateSurveyQuestionGroupOutput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: Survey!
  surveyQuestions: [SurveyQuestion!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
}

input SurveyQuestionInput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroupInput!
  answers: [SurveyQuestionAnswerInput!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
}

input SurveyInput {
  id: Int!
  globalId: String!
  surveyQuestionGroupsSortedIds: String!
  surveyQuestionGroups: [SurveyQuestionGroupInput!]!
  ownedById: Int
  ownedBy: UserInput!
  ownedAt: DateTime!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type CreateSurveyQuestionOptionOutput {
  id: Int!
  globalId: String!
  html: String
}

type DeleteSurveyQuestionOptionOutput {
  id: Int!
  globalId: String!
  html: String
}

type ReadSurveyQuestionOptionOutput {
  id: Int!
  globalId: String!
  html: String
}

type UpdateSurveyQuestionOptionOutput {
  id: Int!
  globalId: String!
  html: String
}

type CreateSurveyQuestionSelectOutput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type DeleteSurveyQuestionSelectOutput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type ReadSurveyQuestionSelectOutput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

type UpdateSurveyQuestionSelectOutput {
  id: Int!
  globalId: String!
  type: QuestionEnum!
  surveyGroupId: Int!
  surveyQuestionGroup: SurveyQuestionGroup!
  answers: [SurveyQuestionAnswer!]!
  html: String
  expectedAnswerJson: String
  createdAt: DateTime!
  createdById: Int
  createdBy: User!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: User!
  ownedById: Int
  ownedBy: User!
  ownedAt: DateTime!
}

input SurveyQuestionAnswerInput {
  id: Int!
  globalId: String!
  surveyQuestionId: Int!
  surveyQuestion: SurveyQuestionInput!
  answerType: SurveyQuestionAnswerEnum!
  answer: String
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

input SurveyQuestionGroupInput {
  id: Int!
  globalId: String!
  surveyId: Int!
  survey: SurveyInput!
  surveyQuestions: [SurveyQuestionInput!]!
  createdAt: DateTime!
  createdById: Int
  createdBy: UserInput!
  updatedAt: DateTime!
  updatedById: Int
  updatedBy: UserInput!
}

type CreateRoleOutput {
  role_Users: [Role_User!]!
  roleClaims: [RoleClaim!]!
  id: Int!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

type DeleteRoleOutput {
  role_Users: [Role_User!]!
  roleClaims: [RoleClaim!]!
  id: Int!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

type ReadRoleOutput {
  role_Users: [Role_User!]!
  roleClaims: [RoleClaim!]!
  id: Int!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

type UpdateRoleOutput {
  role_Users: [Role_User!]!
  roleClaims: [RoleClaim!]!
  id: Int!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

input RoleClaimInput {
  id: Int!
  role: RoleInput!
  roleId: Int!
  claimType: String
  claimValue: String
}

input Role_UserInput {
  user: UserInput!
  role: RoleInput!
  userId: Int!
  roleId: Int!
}

type CreateRoleClaimOutput {
  toClaim: Claim
  role: Role!
  id: Int!
  roleId: Int!
  claimType: String
  claimValue: String
}

type DeleteRoleClaimOutput {
  toClaim: Claim
  role: Role!
  id: Int!
  roleId: Int!
  claimType: String
  claimValue: String
}

type ReadRoleClaimOutput {
  toClaim: Claim
  role: Role!
  id: Int!
  roleId: Int!
  claimType: String
  claimValue: String
}

type UpdateRoleClaimOutput {
  toClaim: Claim
  role: Role!
  id: Int!
  roleId: Int!
  claimType: String
  claimValue: String
}

input RoleInput {
  id: Int!
  role_Users: [Role_UserInput!]!
  roleClaims: [RoleClaimInput!]!
  name: String
  normalizedName: String
  concurrencyStamp: String
}

type CreatePostOutput {
  id: Int!
}

type DeletePostOutput {
  id: Int!
}

type ReadPostOutput {
  id: Int!
}

type UpdatePostOutput {
  id: Int!
}

type CreatePageOutput {
  id: Int!
  html: String!
}

type DeletePageOutput {
  id: Int!
  html: String!
}

type ReadPageOutput {
  id: Int!
  html: String!
}

type UpdatePageOutput {
  id: Int!
  html: String!
}

type CreateNumberOutput {
  id: Int!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: User!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

type DeleteNumberOutput {
  id: Int!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: User!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

type ReadNumberOutput {
  id: Int!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: User!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

type UserError {
  message: String!
  code: String!
}

type UpdateNumberOutput {
  id: Int!
  min: String!
  max: String!
  scale: Int!
  precision: Int!
  incrementBy: String!
  value: String!
  ownedById: Int
  ownedBy: User!
  validationCodeType: ClientWebProgrammingLanguageEnum!
  validationCode: String
}

input UserInput {
  id: Int!
  globalId: String!
  firstName: String
  middleInitial: String
  lastName: String
  userClaims: [UserClaimInput!]!
  userLogins: [UserLoginInput!]!
  userTokens: [UserTokenInput!]!
  role_Users: [Role_UserInput!]!
  surveys: [SurveyInput!]!
  job_Users: [Job_UserInput!]!
  jobOffersReceived: [JobOffer_UserInput!]!
  jobOffersCreated: [JobOffer_UserInput!]!
  relationshipRequestsSent: [RelationshipRequestInput!]!
  relationshipRequestsRecieved: [RelationshipRequestInput!]!
  relationships: [RelationshipInput!]!
  relationshipsFromOthers: [RelationshipInput!]!
  friendRelationshipRequestsSent: [FriendRelationshipRequestInput!]!
  friendRelationshipRequestsRecieved: [FriendRelationshipRequestInput!]!
  friendRelationships: [FriendRelationshipInput!]!
  friendRelationshipsFromOthers: [FriendRelationshipInput!]!
  familyRelationships: [FamilyRelationshipInput!]!
  familyRelationshipsFromOthers: [FamilyRelationshipInput!]!
  familyRelationshipRequestsSent: [FamilyRelationshipRequestInput!]!
  familyRelationshipRequestsRecieved: [FamilyRelationshipRequestInput!]!
  connections: [ConnectionInput!]!
  connectionsFromOthers: [ConnectionInput!]!
  connectionRequestsSent: [ConnectionRequestInput!]!
  connectionRequestsRecieved: [ConnectionRequestInput!]!
  following: [FollowRelationshipInput!]!
  followers: [FollowRelationshipInput!]!
  createdChatMessages: [ChatMessageInput!]!
  chatMessage_Users: [ChatMessage_UserInput!]!
  chatRoom_Users: [ChatRoom_UserInput!]!
  user_UserGroups: [User_UserGroupInput!]!
  user_UserGroupRoles: [User_UserGroupRoleInput!]!
  household_Users: [Household_UserInput!]!
  household_UsersRequestsSent: [HouseholdRequestInput!]!
  household_UsersRequestsRecieved: [HouseholdRequestInput!]!
  calendar_Users: [Calendar_UserInput!]!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
}

input Job_User_VideoInput {
  userId: Int!
  user: UserInput!
  jobId: Int!
  job: JobInput!
  videoId: Int!
  video: VideoInput!
  job_User: Job_UserInput!
}

input Image_Job_UserInput {
  userId: Int!
  user: UserInput!
  jobId: Int!
  job: JobInput!
  imageId: Int!
  image: ImageInput!
  job_User: Job_UserInput!
}

input Document_Job_UserInput {
  userId: Int!
  user: UserInput!
  jobId: Int!
  job: JobInput!
  documentId: Int!
  document: DocumentInput!
  job_User: Job_UserInput!
}

input JobOfferInput {
  id: Int!
  jobId: Int!
  job: JobInput!
  jobOffer_Users: [JobOffer_UserInput!]!
  createdAt: DateTime!
  createdById: Int!
  createdBy: UserInput!
  updatedAt: DateTime!
  sentAt: DateTime
}

input ChatRoomInput {
  id: Int!
  chatRoomUsers: [ChatRoom_UserInput!]!
  chatMessages: [ChatMessageInput!]!
}

input HouseholdInput {
  id: Int!
  household_Users: [Household_UserInput!]!
}

input NotificationMessageInput {
  id: Int!
  notificationIconType: NotificationIconEnum!
  notificationMessage_Users: [NotificationMessage_UserInput!]!
  html: String!
  sentAt: DateTime
}

input DocumentInput {
  id: Int!
}

input ImageInput {
  id: Int!
}

input VideoInput {
  id: Int!
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR