
<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output encoding="utf-8"#>
<#@ assembly name="C:\Users\tanek\.nuget\packages\humanizer.core\2.8.26\lib\netstandard2.0\Humanizer.dll" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.Xml.ReaderWriter" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Console" #>
<#@ assembly name="System.Runtime.Serialization" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Humanizer" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="System.Runtime.Serialization" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Threading.Tasks" #>

<# // System.Diagnostics.Debugger.Launch(); #>
<# var Cache = new System.Collections.Concurrent.ConcurrentDictionary<string, object>(); #>
<#

TemplateData Data;
{
    var classType_TemplateData = typeof(TemplateData);
    var declaringTypeName_TemplateData =  classType_TemplateData.DeclaringType.Name;
    var className_TemplateData = "TemplateData";
    var classNamespace_TemplateData = classType_TemplateData.Namespace;

var xml_TemplateData = File.ReadAllText($@"C:\App\Setups\Setup\Server\Temp\637585114089369398__4__54fc1eb7-607b-4ebc-aeb9-42e72234bb37.input._TemplateData_bce2ef18-6fac-4801-abc9-e47f25ae40e9.temp.txt.xml");
xml_TemplateData = string.Format(xml_TemplateData, declaringTypeName_TemplateData,classNamespace_TemplateData);

    using (System.Xml.XmlReader reader = System.Xml.XmlReader.Create(new StringReader(xml_TemplateData)))
    {
        DataContractSerializer deserializer = new DataContractSerializer(classType_TemplateData);
        Data = (TemplateData)deserializer.ReadObject(reader);
    }
}
#>
<# { #>
 
//%templateBegin: C:\App\Shared\Shared\SharedCore.Application\Services\SharedSampleApplicationService.cs.tt.temp.txt__4601a4d8-c6be-45b8-a60e-e32c1b3de264
<# { #>


//%S:begin Header
//%S:end Header



using SharedCore.Application.Interfaces.ServiceInterfaces;

namespace SharedCore.Application.Services
{
    //%S:begin Attributes
    //%S:end Attributes
    public class SharedSampleApplicationService : ISharedSampleApplicationService

    /*%S:begin BaseClass*//*%S:end BaseClass*/
    {
        //%S:begin Properties
        //%S:end Properties


        public SharedSampleApplicationService(
            /*%S:begin ConstructorParameters*/
            /*%S:end ConstructorParameters*/
            )
        {

            /*%S:begin ConstructorBody*/
            /*%S:end ConstructorBody*/
        }

        //%S:begin Body
        //%S:end Body
    }
}

<# } #>
//%templateEnd: C:\App\Shared\Shared\SharedCore.Application\Services\SharedSampleApplicationService.cs.tt.temp.txt__4601a4d8-c6be-45b8-a60e-e32c1b3de264
 
<# } #>
<# { #>
 
//%templateBegin: C:\App\Shared\Shared\SharedCore.Application\Interfaces\SevriceInterfaces\ISharedSampleApplicationService.cs.tt.temp.txt__195ed252-91c3-4a48-a5ee-e21b11547ff5
<# { #>
//%S:begin Header
//%S:end Header


namespace SharedCore.Application.Interfaces.ServiceInterfaces
{
    public interface ISharedSampleApplicationService
    /*%S:begin Interfaces*/ /*%S:end Interfaces*/
    {
        //%S:begin Body
        //%S:end Body
    }
}
<# } #>
//%templateEnd: C:\App\Shared\Shared\SharedCore.Application\Interfaces\SevriceInterfaces\ISharedSampleApplicationService.cs.tt.temp.txt__195ed252-91c3-4a48-a5ee-e21b11547ff5
 
<# } #>
<# { #>
 <#

    Data.Context.Project = Data.Projects.Where(project => project.Name == "Core.Domain").FirstOrDefault();

    Data.Context.ApplicationProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Application" && !project.IsShared).FirstOrDefault();
    Data.Context.DomainProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Domain" && !project.IsShared).FirstOrDefault();
    Data.Context.InfrastructureProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Infrastructure" && !project.IsShared).FirstOrDefault();

    Data.Context.SharedApplicationProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Application" && project.IsShared).FirstOrDefault();
    Data.Context.SharedDomainProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Domain" && project.IsShared).FirstOrDefault();
    Data.Context.SharedInfrastructureProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Infrastructure" && project.IsShared).FirstOrDefault();

    Data.Context.File = Data.Files.Where(file => file.TemplatePath == @"C:\App\Shared\Core.Domain\Entities\__Entities_Groups_00_Name__Entities\__Entities_Name___Gen_.cs").FirstOrDefault();
            Data.Context.Sections = new List<TemplateSection> {  };
            Data.Context.TemplateSections = new List<TemplateSection> {  };
            #>

//%templateBegin: C:\App\Shared\Core.Domain\Entities\Sample.cs.tt.temp.txt__65755a5b-be3d-441a-ac4c-9e1f4326dfb0
<# { #>
//%t:begin Intro
<# var entity = Data.Context.Project.Entities.Find(entity => string.Join(".", entity.Groups.Select(group => group.Name)) == "" && entity.Name == "Sample"); #>
<# var interfaces = entity.Interfaces.Select(i => i.Name); #>
<# var interfaces_by_comma = string.Join(",", interfaces); #>
<# var primaryKeySignatures = entity.Properties.Where(property => property.IsPrimaryKey).Select(primaryKey => primaryKey.Signature);  #>

<# var camelPrimaryKeyNames = primaryKeySignatures.Select(x => x.Name.Camelize()); #>
<# var camelPrimaryKeyNames_by_slash = string.Join("/", camelPrimaryKeyNames); #>
<# var camelPrimaryKeyNames_by_comma = string.Join(",", camelPrimaryKeyNames); #>

<# var camelPrimaryKeyFullNames = primaryKeySignatures.Select(x => x.FullType + " " + x.Name.Camelize()); #>
<# var camelPrimaryKeyFullNames_by_comma = string.Join(",", camelPrimaryKeyFullNames); #>

<# var camelPrimaryKeyName_eq_entitiesName_dot_Names = primaryKeySignatures.Select(x => x.Name.Camelize() + " = " + entity.Name + "." + x.Name); #>
<# var camelPrimaryKeyName_eq_entitiesName_dot_Names_by_comma = string.Join(",", camelPrimaryKeyName_eq_entitiesName_dot_Names); #>

<# var entitiesName_dot_Names = primaryKeySignatures.Select(x =>  entity.Name  + "." + x.Name); #>
<# var entitiesName_dot_Names_by_comma = string.Join(",", entitiesName_dot_Names); #>

<# var constructorParameters = entity.Properties.Where(property => ( property.IsSimpleType || property.IsValueObject ) && property.Name != "Id").Select(property => property.Signature.Type + " " + (property.Name.ToLower()[0] + property.Name.Substring(1)) + (property.IsNullable ? " = null": "")); #>
<# var constructorParameters_by_comma = string.Join(",\n", constructorParameters); #>

<# var constructorParametersForBody = entity.Properties.Where(property => ( property.IsSimpleType || property.IsValueObject ) && property.Name != "Id")
.Select(property => {
   var fieldName = property.Name.ToLower()[0] + property.Name.Substring(1);
   var toReturn = property.Name + " = " + fieldName;
   if(property.IsEnumerableClass) { 
       toReturn = "_" + fieldName + " = " + fieldName;
           
   }

   return toReturn;

}); #>
<# var constructorParametersForBody_by_semicolumn = string.Join(";\n", constructorParametersForBody) + ";"; #>
//%t:end Intro

<# foreach(var usedNamespace in entity.UsedNamespaces) { #>
using <#= usedNamespace #>;
<# } #>

using Core.Domain.Entities;

//%S:begin Header
//%S:end Header
using System.ComponentModel.DataAnnotations.Schema;

using Core.Domain.Interfaces;
using Core.Domain.ValueObjects.Ids;
using System.ComponentModel.DataAnnotations;
using System.Collections.ObjectModel;
using System.Collections.Generic;

namespace Core.Domain.Entities
{
    public class Sample : Entity<SampleId>, IAggregateRoot
    {
        private Sample()
        {
        }

        public Sample(
        <#= constructorParameters_by_comma #>
        <# if(constructorParameters.Count() > 0 && Data.Context.Sections.Exists(section => section.Name == "ConstructorParameters")) { #>
        ,
        <# } #>
        /*%S:begin ConstructorParameters*/
        /*%S:end ConstructorParameters*/
        <# if(constructorParameters.Count() > 0 || Data.Context.Sections.Exists(section => section.Name == "ConstructorParameters")) { #>
        ,
        <# } #>
        SampleId? id = null
        )
        {
            if (id is null)
            {
                id = new SampleId();
            }

            Id = id;

            <#= constructorParametersForBody_by_semicolumn #>

            /*%S:begin ConstructorBody*/
            /*%S:end ConstructorBody*/
        }

        <# foreach(var property in entity.Properties) { #> 
        <# if( property.Name != "Id" ) { #>

        <# foreach(var attribute in property.Attributes ) { #> 
        <# if(attribute.IsDbType) { #>
        <#= attribute.Signature.NameAndArgumentsInsideBrackets ?? "" #>
        <# } #>
        <# } #>

        <# if(property.IsEnumerableClass) { #>
        private readonly <#= property.Signature.Type #> _<#= property.Name.ToLower()[0] #><#= property.Name.Substring(1) #> = new List<<#=property.Signature.ChildType #>>(); 
        public virtual IReadOnlyCollection<<#= property.Signature.ChildType #>> <#= property.Signature.Name #> => _<#= property.Name.ToLower()[0] #><#= property.Name.Substring(1) #>.AsReadOnly();
        <# } else if(property.IsValueObject || !property.IsSimpleType) { #>
        <#= property.Signature.AccessModifier ?? "" #> virtual <#= property.Signature.Type #> <#= property.Name #> { get; private set; } <#= !property.IsNullable && !property.IsSimpleType ?  " = null!;" : "" #>
        <# } else  { #>
        <#= property.Signature.AccessModifier ?? "" #>  <#= property.Signature.Type #> <#= property.Name #> { get; private set; } <#= !property.IsNullable && !property.IsSimpleType ?  " = null!;" : "" #>
        <# } #>
        <# } #>
        <# } #>


        //%S:begin Body
        //%S:end Body
    }
}
<# } #>
//%templateEnd: C:\App\Shared\Core.Domain\Entities\Sample.cs.tt.temp.txt__65755a5b-be3d-441a-ac4c-9e1f4326dfb0
 
<# } #>
<# { #>
 <#

    Data.Context.Project = Data.Projects.Where(project => project.Name == "Core.Domain").FirstOrDefault();

    Data.Context.ApplicationProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Application" && !project.IsShared).FirstOrDefault();
    Data.Context.DomainProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Domain" && !project.IsShared).FirstOrDefault();
    Data.Context.InfrastructureProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Infrastructure" && !project.IsShared).FirstOrDefault();

    Data.Context.SharedApplicationProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Application" && project.IsShared).FirstOrDefault();
    Data.Context.SharedDomainProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Domain" && project.IsShared).FirstOrDefault();
    Data.Context.SharedInfrastructureProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Infrastructure" && project.IsShared).FirstOrDefault();

    Data.Context.File = Data.Files.Where(file => file.TemplatePath == @"C:\App\Shared\Core.Domain\Services\__Entities_Groups_00_Name__Services\__Entities_Name__DomainService_Gen_.cs").FirstOrDefault();
            Data.Context.Sections = new List<TemplateSection> {  };
            Data.Context.TemplateSections = new List<TemplateSection> {  };
            #>

//%templateBegin: C:\App\Shared\Core.Domain\Services\SampleDomainService.cs.tt.temp.txt__de2447fc-2307-4b9e-a410-73a7c4c32861
<# { #>
<# var entity = Data.Context.Project.Entities.Find(entity => string.Join(".", entity.Groups.Select(group => group.Name)) == "" && entity.Name == "Sample"); #>

<# foreach(var usedNamespace in entity.UsedNamespaces) { #>
using <#= usedNamespace #>;
<# } #>

//%S:begin Header
//%S:end Header

//%t:begin Header
//%t:end Header

using Core.Domain.Interfaces.ServiceInterfaces;

namespace Core.Domain.Services
{
    //%S:begin Attributes
    //%S:end Attributes
    public class SampleDomainService: ISampleDomainService
    /*%S:begin BaseClass*//*%S:end BaseClass*/
    {
        //%S:begin Properties
        //%S:end Properties


        public SampleDomainService(
            /*%S:begin ConstructorParameters*/
            /*%S:end ConstructorParameters*/
            )
        {

            /*%S:begin ConstructorBody*/
            /*%S:end ConstructorBody*/
        }

        //%S:begin Body
        //%S:end Body



    }
}
<# } #>
//%templateEnd: C:\App\Shared\Core.Domain\Services\SampleDomainService.cs.tt.temp.txt__de2447fc-2307-4b9e-a410-73a7c4c32861
 
<# } #>
<# { #>
 <#

    Data.Context.Project = Data.Projects.Where(project => project.Name == "Core.Domain").FirstOrDefault();

    Data.Context.ApplicationProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Application" && !project.IsShared).FirstOrDefault();
    Data.Context.DomainProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Domain" && !project.IsShared).FirstOrDefault();
    Data.Context.InfrastructureProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Infrastructure" && !project.IsShared).FirstOrDefault();

    Data.Context.SharedApplicationProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Application" && project.IsShared).FirstOrDefault();
    Data.Context.SharedDomainProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Domain" && project.IsShared).FirstOrDefault();
    Data.Context.SharedInfrastructureProject = Data.Projects.Where(project => project.BaseName == "Core" && project.Type == "Infrastructure" && project.IsShared).FirstOrDefault();

    Data.Context.File = Data.Files.Where(file => file.TemplatePath == @"C:\App\Shared\Core.Domain\Interfaces\ServiceInterfaces\__Entities_Groups_00_Name__ServiceInterfaces\I__Entities_Name__DomainService_Gen_.cs").FirstOrDefault();
            Data.Context.Sections = new List<TemplateSection> {  };
            Data.Context.TemplateSections = new List<TemplateSection> {  };
            #>

//%templateBegin: C:\App\Shared\Core.Domain\Interfaces\ServiceInterfaces\ISampleDomainService.cs.tt.temp.txt__75b70e8f-695d-43dc-9f14-d8451cae222c
<# { #>
//%S:begin Header
//%S:end Header

<# var entity = Data.Context.Project.Entities.Find(entity => string.Join(".", entity.Groups.Select(group => group.Name)) == "" && entity.Name == "Sample"); #>

<# foreach(var usedNamespace in entity.UsedNamespaces) { #>
using <#= usedNamespace #>;
<# } #>

namespace Core.Domain.Interfaces.ServiceInterfaces
{
    public interface ISampleDomainService
    {
        //%S:begin Body
        //%S:end Body
    }
}
<# } #>
//%templateEnd: C:\App\Shared\Core.Domain\Interfaces\ServiceInterfaces\ISampleDomainService.cs.tt.temp.txt__75b70e8f-695d-43dc-9f14-d8451cae222c
 
<# } #>
<# { #>
 
//%templateBegin: C:\App\Shared\Core.Domain\ValueObjects\Ids\SampleId.cs.tt.temp.txt__014d9aa6-07f6-4259-8a63-e74e07fa2aed
<# { #>
using Core.Domain;

namespace Core.Domain.ValueObjects.Ids
{
    public class SampleId : TypedIdValueBase<SampleId>
    {
        public SampleId(int? id = null) : base(id)
        {

        }
    }
}
<# } #>
//%templateEnd: C:\App\Shared\Core.Domain\ValueObjects\Ids\SampleId.cs.tt.temp.txt__014d9aa6-07f6-4259-8a63-e74e07fa2aed
 
<# } #>
<# { #>
 
//%templateBegin: C:\App\Shared\Core.Application\Services\SampleApplicationService.cs.tt.temp.txt__0d054f89-02b5-4bba-b249-dc33d81755d6
<# { #>


//%S:begin Header
//%S:end Header



using Core.Application.Interfaces.ServiceInterfaces;

namespace Core.Application.Services
{
    //%S:begin Attributes
    //%S:end Attributes
    public class SampleApplicationService : ISampleApplicationService

    /*%S:begin BaseClass*//*%S:end BaseClass*/
    {
        //%S:begin Properties
        //%S:end Properties


        public SampleApplicationService(
            /*%S:begin ConstructorParameters*/
            /*%S:end ConstructorParameters*/
            )
        {

            /*%S:begin ConstructorBody*/
            /*%S:end ConstructorBody*/
        }

        //%S:begin Body
        //%S:end Body
    }
}

<# } #>
//%templateEnd: C:\App\Shared\Core.Application\Services\SampleApplicationService.cs.tt.temp.txt__0d054f89-02b5-4bba-b249-dc33d81755d6
 
<# } #>
<# { #>
 
//%templateBegin: C:\App\Shared\Core.Application\Interfaces\SevriceInterfaces\ISampleApplicationService.cs.tt.temp.txt__714618c8-b56f-49f4-b85a-5e101b38bb88
<# { #>
//%S:begin Header
//%S:end Header


namespace Core.Application.Interfaces.ServiceInterfaces
{
    public interface ISampleApplicationService
    /*%S:begin Interfaces*/ /*%S:end Interfaces*/
    {
        //%S:begin Body
        //%S:end Body
    }
}
<# } #>
//%templateEnd: C:\App\Shared\Core.Application\Interfaces\SevriceInterfaces\ISampleApplicationService.cs.tt.temp.txt__714618c8-b56f-49f4-b85a-5e101b38bb88
 
<# } #>
<# { #>
 
//%templateBegin: C:\App\Shared\Core.Infrastructure\EntityTypeConfigurations\SampleEntityTypeConfiguration.cs.tt.temp.txt__3a379268-0ac8-48b2-a4ca-86a1c8b3766d
<# { #>
/*%S:begin Header*/
/*%S:end Header*/


using Core.Domain.Entities;
using Core.Domain.ValueObjects.Ids;
using Microsoft.EntityFrameworkCore.Metadata.Builders;



namespace Core.Infrastructure.EntityTypeConfigurations
{
    public class SampleEntityTypeConfiguration : EntityTypeConfigurationBase<Sample, SampleId>
    {
        /*%S:begin Properties*/
        /*%S:end Properties*/
        public void Configure(EntityTypeBuilder<Sample> builder)
        {
            base.Configure(builder);

            /*%S:begin Body*/
            /*%S:end Body*/
        }
    }

}
<# } #>
//%templateEnd: C:\App\Shared\Core.Infrastructure\EntityTypeConfigurations\SampleEntityTypeConfiguration.cs.tt.temp.txt__3a379268-0ac8-48b2-a4ca-86a1c8b3766d
 
<# } #>
<# { #>
 
//%templateBegin: C:\App\Shared\Core.Infrastructure\Extensions\MicrosoftExtensions\OdataExtensions\ODataConventionModelBuilderExtensions\SetEntitiesExtension.cs.tt.temp.txt__7f648435-8048-4ddd-8392-96148a9eda3d
<# { #>


using Microsoft.OData.ModelBuilder;



namespace Core.Infrastructure.Extensions.MicrosoftExtensions.ODataExtensions.ODataConventionModelBuilderExtensions
{
    public static class SetEntitiesExtension
    {
        public static ODataConventionModelBuilder SetEntities(this ODataConventionModelBuilder builder)
        {
            <# foreach(var model in Data.Models) { #>
            builder.EntitySet<<#=model.FullName#>>("<#= model.Name.Pluralize() #>");
            <# } #>

            return builder;
        }
    }
}
<# } #>
//%templateEnd: C:\App\Shared\Core.Infrastructure\Extensions\MicrosoftExtensions\OdataExtensions\ODataConventionModelBuilderExtensions\SetEntitiesExtension.cs.tt.temp.txt__7f648435-8048-4ddd-8392-96148a9eda3d
 
<# } #>
<#+

public class TemplateContext {
    public TemplateProject Project { get; set; }
    public TemplateProject ApplicationProject { get; set; }
    public TemplateProject SharedApplicationProject { get; set; }
    public TemplateProject DomainProject { get; set; }
    public TemplateProject SharedDomainProject { get; set; }
    public TemplateProject InfrastructureProject { get; set; }
    public TemplateProject SharedInfrastructureProject { get; set; }
    public TemplateFile File { get; set; }
    public List<TemplateSection> Sections { get; set; }
    public List<TemplateSection> TemplateSections { get; set; }
}


public class TemplateProject:TemplateBase {
    public string Type { get; set; }
    public bool IsShared { get; set; }
    public string Name { get; set; }
    public string BaseName { get; set; }
    public string CodeName { get; set; }
    public string Prefix { get; set; }
    public string Postfix { get; set; }
    public string GeneratorSymbol { get; set; }
    public string Path { get; set; }
    public string DirPath { get; set; }
    public List<TemplateFile> Files { get; set; }
    public List<TemplateService> Services { get; set; }
    public List<TemplateLocalization> Localizations { get; set; }
    public List<TemplateModel> Models { get; set; }
    public List<TemplateEntity> Entities { get; set; }
}


public class TemplateBase {
    public List<TemplateGroup> Groups { get; set; }
    public TemplateBoundedContext BoundedContext { get; set; }
}


public class TemplateGroup {
    public string Name { get; set; }
}


public class TemplateBoundedContext {
    public string Name { get; set; }
}


public class TemplateFile:TemplateBase {
    public string TemplateName { get; set; }
    public string GenType { get; set; }
    public bool HasPartialRef { get; set; }
    public bool ShouldOverWrite { get; set; }
    public bool ShouldPartiallyOverWrite { get; set; }
    public bool ShouldFinalize { get; set; }
    public TemplateProject Project { get; set; }
    public string Name { get; set; }
    public string Path { get; set; }
    public string TemplatePath { get; set; }
    public string XmlPath { get; set; }
    public string Extension { get; set; }
    public TemplateCodeType CodeType { get; set; }
}


public class TemplateCodeType {
}


public class TemplateDirectory:TemplateBase {
    public string Name { get; set; }
    public string TemplatePath { get; set; }
    public string Path { get; set; }
    public bool ShouldOverwrite { get; set; }
}


public class TemplateService:TemplateBase {
    public bool IsShared { get; set; }
    public string Type { get; set; }
    public string BaseName { get; set; }
    public string Name { get; set; }
    public string Namespace { get; set; }
    public TemplateProject Project { get; set; }
    public List<TemplateMethod> Methods { get; set; }
    public string ServiceLifetime { get; set; }
    public List<TemplateConstructor> Constructors { get; set; }
    public bool IsAbstract { get; set; }
    public TemplateModel ModelCounterpart { get; set; }
    public List<TemplateProperty> Properties { get; set; }
    public List<TemplateInterface> Interfaces { get; set; }
    public TemplateType ParentType { get; set; }
}


public class TemplateMethod:TemplateBase {
    public string Name { get; set; }
    public bool IsAdded { get; set; }
    public bool IsModelMethod { get; set; }
    public bool IsPublic { get; set; }
    public TemplateMethodSignature Signature { get; set; }
}


public class TemplateMethodSignature:TemplateSignatureBase {
    public List<string> Parameters { get; set; }
    public List<string> FullParameters { get; set; }
    public string FullTypeAndNameAndParameters { get; set; }
    public string TypeAndNameAndParameters { get; set; }
}


public class TemplateSignatureBase:TemplateBase {
    public string FullTypeAndName { get; set; }
    public string TypeAndName { get; set; }
    public string AccessModifier { get; set; }
    public string FullType { get; set; }
    public string Type { get; set; }
    public string ChildType { get; set; }
    public string ChildFullType { get; set; }
    public string Name { get; set; }
}


public class TemplateConstructor:TemplateBase {
    public string Name { get; set; }
    public List<TemplateParameter> Parameters { get; set; }
}


public class TemplateParameter:TemplateBase {
    public string Name { get; set; }
    public TemplateParameterSignature Signature { get; set; }
}


public class TemplateParameterSignature:TemplateSignatureBase {
}


public class TemplateModel:TemplateBase {
    public bool IsValueObject { get; set; }
    public string Name { get; set; }
    public string BaseName { get; set; }
    public TemplateModel BaseClass { get; set; }
    public string FullName { get; set; }
    public string BaseFullName { get; set; }
    public string Namespace { get; set; }
    public TemplateProject Project { get; set; }
    public List<TemplateMethod> Methods { get; set; }
    public List<TemplateProperty> Properties { get; set; }
    public List<TemplateInterface> Interfaces { get; set; }
    public List<TemplateAttribute> Attributes { get; set; }
    public List<string> UsedNamespaces { get; set; }
}


public class TemplateProperty:TemplateBase {
    public string Name { get; set; }
    public string BaseName { get; set; }
    public bool IsEnumerableClass { get; set; }
    public TemplatePropertySignature Signature { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsDictionaryType { get; set; }
    public bool IsPublic { get; set; }
    public bool IsValueObject { get; set; }
    public bool IsNullable { get; set; }
    public bool IsSimpleType { get; set; }
    public bool IsVirtual { get; set; }
    public bool IsDeclaredOnly { get; set; }
    public bool HasPublicGetter { get; set; }
    public bool HasPublicSetter { get; set; }
    public List<TemplateAttribute> Attributes { get; set; }
    public int Order { get; set; }
    public int PrimaryKeyOrder { get; set; }
}


public class TemplatePropertySignature:TemplateSignatureBase {
    public string Initializer { get; set; }
}


public class TemplateAttribute {
    public string Name { get; set; }
    public bool IsDbType { get; set; }
    public TemplateAttributeSignature Signature { get; set; }
    public List<TemplateAttributeProperty> Properties { get; set; }
}


public class TemplateAttributeSignature:TemplateSignatureBase {
    public string NameAndArgumentsInsideBrackets { get; set; }
}


public class TemplateAttributeProperty {
    public string Name { get; set; }
    public string Value { get; set; }
}


public class TemplateInterface:TemplateBase {
    public string Name { get; set; }
    public TemplateInterfaceSignature Signature { get; set; }
}


public class TemplateInterfaceSignature:TemplateSignatureBase {
}


public class TemplateType:TemplateBase {
    public string Name { get; set; }
    public List<TemplateConstructor> Constructors { get; set; }
    public TemplateTypeSignature Signature { get; set; }
}


public class TemplateTypeSignature:TemplateSignatureBase {
}


public class TemplateLocalization:TemplateBase {
    public string Key { get; set; }
    public string PluralKey { get; set; }
    public string Context { get; set; }
    public string ContextCodeName { get; set; }
    public string PluralRule { get; set; }
    public string UnderscoredLanguageCode { get; set; }
    public string Encoding { get; set; }
    public List<TemplateLocalizationPluralForm> PluralForms { get; set; }
    public string MethodName { get; set; }
    public string LanguageCode { get; set; }
    public string DotLanguageCode { get; set; }
    public TemplateProject Project { get; set; }
}


public class TemplateLocalizationPluralForm:TemplateBase {
    public int PluralFormIndex { get; set; }
    public string Value { get; set; }
    public TemplateProject Project { get; set; }
}


public class TemplateEntity:TemplateModel {
    public bool ShouldNotGenerate { get; set; }
}


public class TemplateSection {
    public string Name { get; set; }
}


public class TemplateData {
    public List<TemplateLocalization> Localizations { get; set; }
    public List<TemplateModel> Models { get; set; }
    public List<TemplateEntity> Entities { get; set; }
    public List<TemplateService> Services { get; set; }
    public List<TemplateDbContext> DbContexts { get; set; }
    public List<TemplateProject> Projects { get; set; }
    public List<TemplateFile> Files { get; set; }
    public TemplateContext Context { get; set; }
}


public class TemplateDbContext:TemplateService {
}
#>