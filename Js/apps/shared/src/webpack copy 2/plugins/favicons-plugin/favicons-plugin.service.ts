import { CustomInjectable } from '#shared/src/functions/process-providers';
import FaviconsWebpackPlugin from 'favicons-webpack-plugin';

import { WebpackPluginBaseService } from '../webpack-plugin-base/webpack-plugin-base.service';

@CustomInjectable()
export class WebpackFaviconsWebpackPluginService extends WebpackPluginBaseService {
    constructor() {
        super(FaviconsWebpackPlugin);
    }

    createOptions(options?) {
        return this.mergeService.mergeOptions(
            super.createOptions(),
            {
                // Your source logo (required)
                logo: this.environmentService.logoPath, // svg works too!

                // Enable caching and optionally specify the path to store cached data
                // Note: disabling caching may increase build times considerably
                cache: true,

                inject: true,

                mode: this.environmentService.isDevelopment ? 'light' : 'webapp', // optional can be 'webapp' or 'light' - 'webapp' by default
                devMode: this.environmentService.isDevelopment ? 'light' : 'webapp', // optional can be 'webapp' or 'light' - 'light' by default

                // Override the publicPath option usually read from webpack configuration
                //publicPath: '/static',

                // The directory to output the assets relative to the webpack output dir.
                // Relative string paths are allowed here ie '../public/static'. If this
                // option is not set, `prefix` is used.
                // outputPath: this.environmentService.environments.localEnvironment.relativePaths.outputDir,

                // Prefix path for generated assets
                prefix: 'favicons',

                // Inject html links/metadata (requires html-webpack-plugin).
                // This option accepts arguments of different types:
                //  * boolean
                //    `false`: disables injection
                //    `true`: enables injection if that is not disabled in html-webpack-plugin
                //  * function
                //    any predicate that takes an instance of html-webpack-plugin and returns either
                //    `true` or `false` to control the injection of html metadata for the html files
                //    generated by this instance.
                //inject: true,

                favicons: {
                    path: '/', // Path for overriding default icons path. `string`
                    appName: this.environmentService.localConfig.name, // Your application's name. `string`
                    appShortName: this.environmentService.localConfig.shortName, // Your application's short_name. `string`. Optional. If not set, appName will be used
                    appDescription: this.environmentService.localConfig.description, // Your application's description. `string`
                    developerName: this.environmentService.localConfig.developerName, // Your (or your developer's) name. `string`
                    developerURL: this.environmentService.localConfig.developerUrl, // Your (or your developer's) URL. `string`
                    dir: 'auto', // Primary text direction for name, short_name, and description
                    lang: 'en-US', // Primary language for name and short_name
                    background: '#fff', // Background colour for flattened icons. `string`
                    theme_color: '#fff', // Theme color user for example in Android's task switcher. `string`
                    appleStatusBarStyle: 'black-translucent', // Style for Apple status bar: "black-translucent", "default", "black". `string`
                    display: 'standalone', // Preferred display mode: "fullscreen", "standalone", "minimal-ui" or "browser". `string`
                    orientation: 'any', // Default orientation: "any", "natural", "portrait" or "landscape". `string`
                    scope: '/', // set of URLs that the browser considers within your app
                    start_url: '/?homescreen=1', // Start URL when launching the application from a device. `string`
                    version: '1.0', // Your application's version string. `string`
                    logging: false, // Print logs to console? `boolean`
                    pixel_art: false, // Keeps pixels "sharp" when scaling up, for pixel art.  Only supported in offline mode.
                    loadManifestWithCredentials: false, // Browsers don't send cookies when fetching a manifest, enable this to fix that. `boolean`
                    icons: {
                        // Platform Options:
                        // - offset - offset in percentage
                        // - background:
                        //   * false - use default
                        //   * true - force use default, e.g. set background for Android icons
                        //   * color - set background for the specified icons
                        //   * mask - apply mask in order to create circle icon (applied by default for firefox). `boolean`
                        //   * overlayGlow - apply glow effect after mask has been applied (applied by default for firefox). `boolean`
                        //   * overlayShadow - apply drop shadow after mask has been applied .`boolean`
                        //
                        android: true, // Create Android homescreen icon. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
                        appleIcon: true, // Create Apple touch icons. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
                        appleStartup: true, // Create Apple startup images. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
                        coast: true, // Create Opera Coast icon. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
                        favicons: true, // Create regular favicons. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
                        firefox: true, // Create Firefox OS icons. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
                        windows: true, // Create Windows 8 tile icons. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
                        yandex: true, // Create Yandex browser icon. `boolean` or `{ offset, background, mask, overlayGlow, overlayShadow }` or an array of sources
                    },
                },
            },
            options,
        );
    }
}
