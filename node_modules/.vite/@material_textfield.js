import {
  MDCRipple,
  MDCRippleFoundation,
  applyPassive
} from "./chunk-ISQV23BK.js";
import {
  estimateScrollWidth,
  matches
} from "./chunk-WYKVOA7L.js";
import {
  MDCComponent,
  MDCFoundation,
  __assign,
  __extends,
  __name,
  __values
} from "./chunk-M3SJFXWQ.js";

// node_modules/@material/floating-label/constants.js
var cssClasses = {
  LABEL_FLOAT_ABOVE: "mdc-floating-label--float-above",
  LABEL_REQUIRED: "mdc-floating-label--required",
  LABEL_SHAKE: "mdc-floating-label--shake",
  ROOT: "mdc-floating-label"
};

// node_modules/@material/floating-label/foundation.js
var MDCFloatingLabelFoundation = function(_super) {
  __extends(MDCFloatingLabelFoundation2, _super);
  function MDCFloatingLabelFoundation2(adapter) {
    var _this = _super.call(this, __assign(__assign({}, MDCFloatingLabelFoundation2.defaultAdapter), adapter)) || this;
    _this.shakeAnimationEndHandler = function() {
      _this.handleShakeAnimationEnd();
    };
    return _this;
  }
  __name(MDCFloatingLabelFoundation2, "MDCFloatingLabelFoundation");
  Object.defineProperty(MDCFloatingLabelFoundation2, "cssClasses", {
    get: function() {
      return cssClasses;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCFloatingLabelFoundation2, "defaultAdapter", {
    get: function() {
      return {
        addClass: function() {
          return void 0;
        },
        removeClass: function() {
          return void 0;
        },
        getWidth: function() {
          return 0;
        },
        registerInteractionHandler: function() {
          return void 0;
        },
        deregisterInteractionHandler: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCFloatingLabelFoundation2.prototype.init = function() {
    this.adapter.registerInteractionHandler("animationend", this.shakeAnimationEndHandler);
  };
  MDCFloatingLabelFoundation2.prototype.destroy = function() {
    this.adapter.deregisterInteractionHandler("animationend", this.shakeAnimationEndHandler);
  };
  MDCFloatingLabelFoundation2.prototype.getWidth = function() {
    return this.adapter.getWidth();
  };
  MDCFloatingLabelFoundation2.prototype.shake = function(shouldShake) {
    var LABEL_SHAKE = MDCFloatingLabelFoundation2.cssClasses.LABEL_SHAKE;
    if (shouldShake) {
      this.adapter.addClass(LABEL_SHAKE);
    } else {
      this.adapter.removeClass(LABEL_SHAKE);
    }
  };
  MDCFloatingLabelFoundation2.prototype.float = function(shouldFloat) {
    var _a = MDCFloatingLabelFoundation2.cssClasses, LABEL_FLOAT_ABOVE = _a.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a.LABEL_SHAKE;
    if (shouldFloat) {
      this.adapter.addClass(LABEL_FLOAT_ABOVE);
    } else {
      this.adapter.removeClass(LABEL_FLOAT_ABOVE);
      this.adapter.removeClass(LABEL_SHAKE);
    }
  };
  MDCFloatingLabelFoundation2.prototype.setRequired = function(isRequired) {
    var LABEL_REQUIRED = MDCFloatingLabelFoundation2.cssClasses.LABEL_REQUIRED;
    if (isRequired) {
      this.adapter.addClass(LABEL_REQUIRED);
    } else {
      this.adapter.removeClass(LABEL_REQUIRED);
    }
  };
  MDCFloatingLabelFoundation2.prototype.handleShakeAnimationEnd = function() {
    var LABEL_SHAKE = MDCFloatingLabelFoundation2.cssClasses.LABEL_SHAKE;
    this.adapter.removeClass(LABEL_SHAKE);
  };
  return MDCFloatingLabelFoundation2;
}(MDCFoundation);

// node_modules/@material/floating-label/component.js
var MDCFloatingLabel = function(_super) {
  __extends(MDCFloatingLabel2, _super);
  function MDCFloatingLabel2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __name(MDCFloatingLabel2, "MDCFloatingLabel");
  MDCFloatingLabel2.attachTo = function(root) {
    return new MDCFloatingLabel2(root);
  };
  MDCFloatingLabel2.prototype.shake = function(shouldShake) {
    this.foundation.shake(shouldShake);
  };
  MDCFloatingLabel2.prototype.float = function(shouldFloat) {
    this.foundation.float(shouldFloat);
  };
  MDCFloatingLabel2.prototype.setRequired = function(isRequired) {
    this.foundation.setRequired(isRequired);
  };
  MDCFloatingLabel2.prototype.getWidth = function() {
    return this.foundation.getWidth();
  };
  MDCFloatingLabel2.prototype.getDefaultFoundation = function() {
    var _this = this;
    var adapter = {
      addClass: function(className) {
        return _this.root.classList.add(className);
      },
      removeClass: function(className) {
        return _this.root.classList.remove(className);
      },
      getWidth: function() {
        return estimateScrollWidth(_this.root);
      },
      registerInteractionHandler: function(evtType, handler) {
        return _this.listen(evtType, handler);
      },
      deregisterInteractionHandler: function(evtType, handler) {
        return _this.unlisten(evtType, handler);
      }
    };
    return new MDCFloatingLabelFoundation(adapter);
  };
  return MDCFloatingLabel2;
}(MDCComponent);

// node_modules/@material/line-ripple/constants.js
var cssClasses2 = {
  LINE_RIPPLE_ACTIVE: "mdc-line-ripple--active",
  LINE_RIPPLE_DEACTIVATING: "mdc-line-ripple--deactivating"
};

// node_modules/@material/line-ripple/foundation.js
var MDCLineRippleFoundation = function(_super) {
  __extends(MDCLineRippleFoundation2, _super);
  function MDCLineRippleFoundation2(adapter) {
    var _this = _super.call(this, __assign(__assign({}, MDCLineRippleFoundation2.defaultAdapter), adapter)) || this;
    _this.transitionEndHandler = function(evt) {
      _this.handleTransitionEnd(evt);
    };
    return _this;
  }
  __name(MDCLineRippleFoundation2, "MDCLineRippleFoundation");
  Object.defineProperty(MDCLineRippleFoundation2, "cssClasses", {
    get: function() {
      return cssClasses2;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCLineRippleFoundation2, "defaultAdapter", {
    get: function() {
      return {
        addClass: function() {
          return void 0;
        },
        removeClass: function() {
          return void 0;
        },
        hasClass: function() {
          return false;
        },
        setStyle: function() {
          return void 0;
        },
        registerEventHandler: function() {
          return void 0;
        },
        deregisterEventHandler: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCLineRippleFoundation2.prototype.init = function() {
    this.adapter.registerEventHandler("transitionend", this.transitionEndHandler);
  };
  MDCLineRippleFoundation2.prototype.destroy = function() {
    this.adapter.deregisterEventHandler("transitionend", this.transitionEndHandler);
  };
  MDCLineRippleFoundation2.prototype.activate = function() {
    this.adapter.removeClass(cssClasses2.LINE_RIPPLE_DEACTIVATING);
    this.adapter.addClass(cssClasses2.LINE_RIPPLE_ACTIVE);
  };
  MDCLineRippleFoundation2.prototype.setRippleCenter = function(xCoordinate) {
    this.adapter.setStyle("transform-origin", xCoordinate + "px center");
  };
  MDCLineRippleFoundation2.prototype.deactivate = function() {
    this.adapter.addClass(cssClasses2.LINE_RIPPLE_DEACTIVATING);
  };
  MDCLineRippleFoundation2.prototype.handleTransitionEnd = function(evt) {
    var isDeactivating = this.adapter.hasClass(cssClasses2.LINE_RIPPLE_DEACTIVATING);
    if (evt.propertyName === "opacity") {
      if (isDeactivating) {
        this.adapter.removeClass(cssClasses2.LINE_RIPPLE_ACTIVE);
        this.adapter.removeClass(cssClasses2.LINE_RIPPLE_DEACTIVATING);
      }
    }
  };
  return MDCLineRippleFoundation2;
}(MDCFoundation);

// node_modules/@material/line-ripple/component.js
var MDCLineRipple = function(_super) {
  __extends(MDCLineRipple2, _super);
  function MDCLineRipple2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __name(MDCLineRipple2, "MDCLineRipple");
  MDCLineRipple2.attachTo = function(root) {
    return new MDCLineRipple2(root);
  };
  MDCLineRipple2.prototype.activate = function() {
    this.foundation.activate();
  };
  MDCLineRipple2.prototype.deactivate = function() {
    this.foundation.deactivate();
  };
  MDCLineRipple2.prototype.setRippleCenter = function(xCoordinate) {
    this.foundation.setRippleCenter(xCoordinate);
  };
  MDCLineRipple2.prototype.getDefaultFoundation = function() {
    var _this = this;
    var adapter = {
      addClass: function(className) {
        return _this.root.classList.add(className);
      },
      removeClass: function(className) {
        return _this.root.classList.remove(className);
      },
      hasClass: function(className) {
        return _this.root.classList.contains(className);
      },
      setStyle: function(propertyName, value) {
        return _this.root.style.setProperty(propertyName, value);
      },
      registerEventHandler: function(evtType, handler) {
        return _this.listen(evtType, handler);
      },
      deregisterEventHandler: function(evtType, handler) {
        return _this.unlisten(evtType, handler);
      }
    };
    return new MDCLineRippleFoundation(adapter);
  };
  return MDCLineRipple2;
}(MDCComponent);

// node_modules/@material/notched-outline/constants.js
var strings = {
  NOTCH_ELEMENT_SELECTOR: ".mdc-notched-outline__notch"
};
var numbers = {
  NOTCH_ELEMENT_PADDING: 8
};
var cssClasses3 = {
  NO_LABEL: "mdc-notched-outline--no-label",
  OUTLINE_NOTCHED: "mdc-notched-outline--notched",
  OUTLINE_UPGRADED: "mdc-notched-outline--upgraded"
};

// node_modules/@material/notched-outline/foundation.js
var MDCNotchedOutlineFoundation = function(_super) {
  __extends(MDCNotchedOutlineFoundation2, _super);
  function MDCNotchedOutlineFoundation2(adapter) {
    return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation2.defaultAdapter), adapter)) || this;
  }
  __name(MDCNotchedOutlineFoundation2, "MDCNotchedOutlineFoundation");
  Object.defineProperty(MDCNotchedOutlineFoundation2, "strings", {
    get: function() {
      return strings;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCNotchedOutlineFoundation2, "cssClasses", {
    get: function() {
      return cssClasses3;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCNotchedOutlineFoundation2, "numbers", {
    get: function() {
      return numbers;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCNotchedOutlineFoundation2, "defaultAdapter", {
    get: function() {
      return {
        addClass: function() {
          return void 0;
        },
        removeClass: function() {
          return void 0;
        },
        setNotchWidthProperty: function() {
          return void 0;
        },
        removeNotchWidthProperty: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCNotchedOutlineFoundation2.prototype.notch = function(notchWidth) {
    var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation2.cssClasses.OUTLINE_NOTCHED;
    if (notchWidth > 0) {
      notchWidth += numbers.NOTCH_ELEMENT_PADDING;
    }
    this.adapter.setNotchWidthProperty(notchWidth);
    this.adapter.addClass(OUTLINE_NOTCHED);
  };
  MDCNotchedOutlineFoundation2.prototype.closeNotch = function() {
    var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation2.cssClasses.OUTLINE_NOTCHED;
    this.adapter.removeClass(OUTLINE_NOTCHED);
    this.adapter.removeNotchWidthProperty();
  };
  return MDCNotchedOutlineFoundation2;
}(MDCFoundation);

// node_modules/@material/notched-outline/component.js
var MDCNotchedOutline = function(_super) {
  __extends(MDCNotchedOutline2, _super);
  function MDCNotchedOutline2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __name(MDCNotchedOutline2, "MDCNotchedOutline");
  MDCNotchedOutline2.attachTo = function(root) {
    return new MDCNotchedOutline2(root);
  };
  MDCNotchedOutline2.prototype.initialSyncWithDOM = function() {
    this.notchElement = this.root.querySelector(strings.NOTCH_ELEMENT_SELECTOR);
    var label = this.root.querySelector("." + MDCFloatingLabelFoundation.cssClasses.ROOT);
    if (label) {
      label.style.transitionDuration = "0s";
      this.root.classList.add(cssClasses3.OUTLINE_UPGRADED);
      requestAnimationFrame(function() {
        label.style.transitionDuration = "";
      });
    } else {
      this.root.classList.add(cssClasses3.NO_LABEL);
    }
  };
  MDCNotchedOutline2.prototype.notch = function(notchWidth) {
    this.foundation.notch(notchWidth);
  };
  MDCNotchedOutline2.prototype.closeNotch = function() {
    this.foundation.closeNotch();
  };
  MDCNotchedOutline2.prototype.getDefaultFoundation = function() {
    var _this = this;
    var adapter = {
      addClass: function(className) {
        return _this.root.classList.add(className);
      },
      removeClass: function(className) {
        return _this.root.classList.remove(className);
      },
      setNotchWidthProperty: function(width) {
        _this.notchElement.style.setProperty("width", width + "px");
      },
      removeNotchWidthProperty: function() {
        _this.notchElement.style.removeProperty("width");
      }
    };
    return new MDCNotchedOutlineFoundation(adapter);
  };
  return MDCNotchedOutline2;
}(MDCComponent);

// node_modules/@material/textfield/character-counter/constants.js
var cssClasses4 = {
  ROOT: "mdc-text-field-character-counter"
};
var strings2 = {
  ROOT_SELECTOR: "." + cssClasses4.ROOT
};

// node_modules/@material/textfield/character-counter/foundation.js
var MDCTextFieldCharacterCounterFoundation = function(_super) {
  __extends(MDCTextFieldCharacterCounterFoundation2, _super);
  function MDCTextFieldCharacterCounterFoundation2(adapter) {
    return _super.call(this, __assign(__assign({}, MDCTextFieldCharacterCounterFoundation2.defaultAdapter), adapter)) || this;
  }
  __name(MDCTextFieldCharacterCounterFoundation2, "MDCTextFieldCharacterCounterFoundation");
  Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "cssClasses", {
    get: function() {
      return cssClasses4;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "strings", {
    get: function() {
      return strings2;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "defaultAdapter", {
    get: function() {
      return {
        setContent: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCTextFieldCharacterCounterFoundation2.prototype.setCounterValue = function(currentLength, maxLength) {
    currentLength = Math.min(currentLength, maxLength);
    this.adapter.setContent(currentLength + " / " + maxLength);
  };
  return MDCTextFieldCharacterCounterFoundation2;
}(MDCFoundation);

// node_modules/@material/textfield/character-counter/component.js
var MDCTextFieldCharacterCounter = function(_super) {
  __extends(MDCTextFieldCharacterCounter2, _super);
  function MDCTextFieldCharacterCounter2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __name(MDCTextFieldCharacterCounter2, "MDCTextFieldCharacterCounter");
  MDCTextFieldCharacterCounter2.attachTo = function(root) {
    return new MDCTextFieldCharacterCounter2(root);
  };
  Object.defineProperty(MDCTextFieldCharacterCounter2.prototype, "foundationForTextField", {
    get: function() {
      return this.foundation;
    },
    enumerable: false,
    configurable: true
  });
  MDCTextFieldCharacterCounter2.prototype.getDefaultFoundation = function() {
    var _this = this;
    var adapter = {
      setContent: function(content) {
        _this.root.textContent = content;
      }
    };
    return new MDCTextFieldCharacterCounterFoundation(adapter);
  };
  return MDCTextFieldCharacterCounter2;
}(MDCComponent);

// node_modules/@material/textfield/constants.js
var strings3 = {
  ARIA_CONTROLS: "aria-controls",
  ARIA_DESCRIBEDBY: "aria-describedby",
  INPUT_SELECTOR: ".mdc-text-field__input",
  LABEL_SELECTOR: ".mdc-floating-label",
  LEADING_ICON_SELECTOR: ".mdc-text-field__icon--leading",
  LINE_RIPPLE_SELECTOR: ".mdc-line-ripple",
  OUTLINE_SELECTOR: ".mdc-notched-outline",
  PREFIX_SELECTOR: ".mdc-text-field__affix--prefix",
  SUFFIX_SELECTOR: ".mdc-text-field__affix--suffix",
  TRAILING_ICON_SELECTOR: ".mdc-text-field__icon--trailing"
};
var cssClasses5 = {
  DISABLED: "mdc-text-field--disabled",
  FOCUSED: "mdc-text-field--focused",
  HELPER_LINE: "mdc-text-field-helper-line",
  INVALID: "mdc-text-field--invalid",
  LABEL_FLOATING: "mdc-text-field--label-floating",
  NO_LABEL: "mdc-text-field--no-label",
  OUTLINED: "mdc-text-field--outlined",
  ROOT: "mdc-text-field",
  TEXTAREA: "mdc-text-field--textarea",
  WITH_LEADING_ICON: "mdc-text-field--with-leading-icon",
  WITH_TRAILING_ICON: "mdc-text-field--with-trailing-icon",
  WITH_INTERNAL_COUNTER: "mdc-text-field--with-internal-counter"
};
var numbers2 = {
  LABEL_SCALE: 0.75
};
var VALIDATION_ATTR_WHITELIST = [
  "pattern",
  "min",
  "max",
  "required",
  "step",
  "minlength",
  "maxlength"
];
var ALWAYS_FLOAT_TYPES = [
  "color",
  "date",
  "datetime-local",
  "month",
  "range",
  "time",
  "week"
];

// node_modules/@material/textfield/foundation.js
var POINTERDOWN_EVENTS = ["mousedown", "touchstart"];
var INTERACTION_EVENTS = ["click", "keydown"];
var MDCTextFieldFoundation = function(_super) {
  __extends(MDCTextFieldFoundation2, _super);
  function MDCTextFieldFoundation2(adapter, foundationMap) {
    if (foundationMap === void 0) {
      foundationMap = {};
    }
    var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation2.defaultAdapter), adapter)) || this;
    _this.isFocused = false;
    _this.receivedUserInput = false;
    _this.valid = true;
    _this.useNativeValidation = true;
    _this.validateOnValueChange = true;
    _this.helperText = foundationMap.helperText;
    _this.characterCounter = foundationMap.characterCounter;
    _this.leadingIcon = foundationMap.leadingIcon;
    _this.trailingIcon = foundationMap.trailingIcon;
    _this.inputFocusHandler = function() {
      _this.activateFocus();
    };
    _this.inputBlurHandler = function() {
      _this.deactivateFocus();
    };
    _this.inputInputHandler = function() {
      _this.handleInput();
    };
    _this.setPointerXOffset = function(evt) {
      _this.setTransformOrigin(evt);
    };
    _this.textFieldInteractionHandler = function() {
      _this.handleTextFieldInteraction();
    };
    _this.validationAttributeChangeHandler = function(attributesList) {
      _this.handleValidationAttributeChange(attributesList);
    };
    return _this;
  }
  __name(MDCTextFieldFoundation2, "MDCTextFieldFoundation");
  Object.defineProperty(MDCTextFieldFoundation2, "cssClasses", {
    get: function() {
      return cssClasses5;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldFoundation2, "strings", {
    get: function() {
      return strings3;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldFoundation2, "numbers", {
    get: function() {
      return numbers2;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldAlwaysFloat", {
    get: function() {
      var type = this.getNativeInput().type;
      return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldFloat", {
    get: function() {
      return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() || this.isBadInput();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldShake", {
    get: function() {
      return !this.isFocused && !this.isValid() && !!this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldFoundation2, "defaultAdapter", {
    get: function() {
      return {
        addClass: function() {
          return void 0;
        },
        removeClass: function() {
          return void 0;
        },
        hasClass: function() {
          return true;
        },
        setInputAttr: function() {
          return void 0;
        },
        removeInputAttr: function() {
          return void 0;
        },
        registerTextFieldInteractionHandler: function() {
          return void 0;
        },
        deregisterTextFieldInteractionHandler: function() {
          return void 0;
        },
        registerInputInteractionHandler: function() {
          return void 0;
        },
        deregisterInputInteractionHandler: function() {
          return void 0;
        },
        registerValidationAttributeChangeHandler: function() {
          return new MutationObserver(function() {
            return void 0;
          });
        },
        deregisterValidationAttributeChangeHandler: function() {
          return void 0;
        },
        getNativeInput: function() {
          return null;
        },
        isFocused: function() {
          return false;
        },
        activateLineRipple: function() {
          return void 0;
        },
        deactivateLineRipple: function() {
          return void 0;
        },
        setLineRippleTransformOrigin: function() {
          return void 0;
        },
        shakeLabel: function() {
          return void 0;
        },
        floatLabel: function() {
          return void 0;
        },
        setLabelRequired: function() {
          return void 0;
        },
        hasLabel: function() {
          return false;
        },
        getLabelWidth: function() {
          return 0;
        },
        hasOutline: function() {
          return false;
        },
        notchOutline: function() {
          return void 0;
        },
        closeOutline: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCTextFieldFoundation2.prototype.init = function() {
    var e_1, _a, e_2, _b;
    if (this.adapter.hasLabel() && this.getNativeInput().required) {
      this.adapter.setLabelRequired(true);
    }
    if (this.adapter.isFocused()) {
      this.inputFocusHandler();
    } else if (this.adapter.hasLabel() && this.shouldFloat) {
      this.notchOutline(true);
      this.adapter.floatLabel(true);
      this.styleFloating(true);
    }
    this.adapter.registerInputInteractionHandler("focus", this.inputFocusHandler);
    this.adapter.registerInputInteractionHandler("blur", this.inputBlurHandler);
    this.adapter.registerInputInteractionHandler("input", this.inputInputHandler);
    try {
      for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {
        var evtType = POINTERDOWN_EVENTS_1_1.value;
        this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a = POINTERDOWN_EVENTS_1.return))
          _a.call(POINTERDOWN_EVENTS_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    try {
      for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
        var evtType = INTERACTION_EVENTS_1_1.value;
        this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return))
          _b.call(INTERACTION_EVENTS_1);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    this.validationObserver = this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);
    this.setcharacterCounter(this.getValue().length);
  };
  MDCTextFieldFoundation2.prototype.destroy = function() {
    var e_3, _a, e_4, _b;
    this.adapter.deregisterInputInteractionHandler("focus", this.inputFocusHandler);
    this.adapter.deregisterInputInteractionHandler("blur", this.inputBlurHandler);
    this.adapter.deregisterInputInteractionHandler("input", this.inputInputHandler);
    try {
      for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {
        var evtType = POINTERDOWN_EVENTS_2_1.value;
        this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);
      }
    } catch (e_3_1) {
      e_3 = { error: e_3_1 };
    } finally {
      try {
        if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a = POINTERDOWN_EVENTS_2.return))
          _a.call(POINTERDOWN_EVENTS_2);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
    try {
      for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
        var evtType = INTERACTION_EVENTS_2_1.value;
        this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
      }
    } catch (e_4_1) {
      e_4 = { error: e_4_1 };
    } finally {
      try {
        if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return))
          _b.call(INTERACTION_EVENTS_2);
      } finally {
        if (e_4)
          throw e_4.error;
      }
    }
    this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
  };
  MDCTextFieldFoundation2.prototype.handleTextFieldInteraction = function() {
    var nativeInput = this.adapter.getNativeInput();
    if (nativeInput && nativeInput.disabled) {
      return;
    }
    this.receivedUserInput = true;
  };
  MDCTextFieldFoundation2.prototype.handleValidationAttributeChange = function(attributesList) {
    var _this = this;
    attributesList.some(function(attributeName) {
      if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
        _this.styleValidity(true);
        _this.adapter.setLabelRequired(_this.getNativeInput().required);
        return true;
      }
      return false;
    });
    if (attributesList.indexOf("maxlength") > -1) {
      this.setcharacterCounter(this.getValue().length);
    }
  };
  MDCTextFieldFoundation2.prototype.notchOutline = function(openNotch) {
    if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {
      return;
    }
    if (openNotch) {
      var labelWidth = this.adapter.getLabelWidth() * numbers2.LABEL_SCALE;
      this.adapter.notchOutline(labelWidth);
    } else {
      this.adapter.closeOutline();
    }
  };
  MDCTextFieldFoundation2.prototype.activateFocus = function() {
    this.isFocused = true;
    this.styleFocused(this.isFocused);
    this.adapter.activateLineRipple();
    if (this.adapter.hasLabel()) {
      this.notchOutline(this.shouldFloat);
      this.adapter.floatLabel(this.shouldFloat);
      this.styleFloating(this.shouldFloat);
      this.adapter.shakeLabel(this.shouldShake);
    }
    if (this.helperText && (this.helperText.isPersistent() || !this.helperText.isValidation() || !this.valid)) {
      this.helperText.showToScreenReader();
    }
  };
  MDCTextFieldFoundation2.prototype.setTransformOrigin = function(evt) {
    if (this.isDisabled() || this.adapter.hasOutline()) {
      return;
    }
    var touches = evt.touches;
    var targetEvent = touches ? touches[0] : evt;
    var targetClientRect = targetEvent.target.getBoundingClientRect();
    var normalizedX = targetEvent.clientX - targetClientRect.left;
    this.adapter.setLineRippleTransformOrigin(normalizedX);
  };
  MDCTextFieldFoundation2.prototype.handleInput = function() {
    this.autoCompleteFocus();
    this.setcharacterCounter(this.getValue().length);
  };
  MDCTextFieldFoundation2.prototype.autoCompleteFocus = function() {
    if (!this.receivedUserInput) {
      this.activateFocus();
    }
  };
  MDCTextFieldFoundation2.prototype.deactivateFocus = function() {
    this.isFocused = false;
    this.adapter.deactivateLineRipple();
    var isValid = this.isValid();
    this.styleValidity(isValid);
    this.styleFocused(this.isFocused);
    if (this.adapter.hasLabel()) {
      this.notchOutline(this.shouldFloat);
      this.adapter.floatLabel(this.shouldFloat);
      this.styleFloating(this.shouldFloat);
      this.adapter.shakeLabel(this.shouldShake);
    }
    if (!this.shouldFloat) {
      this.receivedUserInput = false;
    }
  };
  MDCTextFieldFoundation2.prototype.getValue = function() {
    return this.getNativeInput().value;
  };
  MDCTextFieldFoundation2.prototype.setValue = function(value) {
    if (this.getValue() !== value) {
      this.getNativeInput().value = value;
    }
    this.setcharacterCounter(value.length);
    if (this.validateOnValueChange) {
      var isValid = this.isValid();
      this.styleValidity(isValid);
    }
    if (this.adapter.hasLabel()) {
      this.notchOutline(this.shouldFloat);
      this.adapter.floatLabel(this.shouldFloat);
      this.styleFloating(this.shouldFloat);
      if (this.validateOnValueChange) {
        this.adapter.shakeLabel(this.shouldShake);
      }
    }
  };
  MDCTextFieldFoundation2.prototype.isValid = function() {
    return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
  };
  MDCTextFieldFoundation2.prototype.setValid = function(isValid) {
    this.valid = isValid;
    this.styleValidity(isValid);
    var shouldShake = !isValid && !this.isFocused && !!this.getValue();
    if (this.adapter.hasLabel()) {
      this.adapter.shakeLabel(shouldShake);
    }
  };
  MDCTextFieldFoundation2.prototype.setValidateOnValueChange = function(shouldValidate) {
    this.validateOnValueChange = shouldValidate;
  };
  MDCTextFieldFoundation2.prototype.getValidateOnValueChange = function() {
    return this.validateOnValueChange;
  };
  MDCTextFieldFoundation2.prototype.setUseNativeValidation = function(useNativeValidation) {
    this.useNativeValidation = useNativeValidation;
  };
  MDCTextFieldFoundation2.prototype.isDisabled = function() {
    return this.getNativeInput().disabled;
  };
  MDCTextFieldFoundation2.prototype.setDisabled = function(disabled) {
    this.getNativeInput().disabled = disabled;
    this.styleDisabled(disabled);
  };
  MDCTextFieldFoundation2.prototype.setHelperTextContent = function(content) {
    if (this.helperText) {
      this.helperText.setContent(content);
    }
  };
  MDCTextFieldFoundation2.prototype.setLeadingIconAriaLabel = function(label) {
    if (this.leadingIcon) {
      this.leadingIcon.setAriaLabel(label);
    }
  };
  MDCTextFieldFoundation2.prototype.setLeadingIconContent = function(content) {
    if (this.leadingIcon) {
      this.leadingIcon.setContent(content);
    }
  };
  MDCTextFieldFoundation2.prototype.setTrailingIconAriaLabel = function(label) {
    if (this.trailingIcon) {
      this.trailingIcon.setAriaLabel(label);
    }
  };
  MDCTextFieldFoundation2.prototype.setTrailingIconContent = function(content) {
    if (this.trailingIcon) {
      this.trailingIcon.setContent(content);
    }
  };
  MDCTextFieldFoundation2.prototype.setcharacterCounter = function(currentLength) {
    if (!this.characterCounter) {
      return;
    }
    var maxLength = this.getNativeInput().maxLength;
    if (maxLength === -1) {
      throw new Error("MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.");
    }
    this.characterCounter.setCounterValue(currentLength, maxLength);
  };
  MDCTextFieldFoundation2.prototype.isBadInput = function() {
    return this.getNativeInput().validity.badInput || false;
  };
  MDCTextFieldFoundation2.prototype.isNativeInputValid = function() {
    return this.getNativeInput().validity.valid;
  };
  MDCTextFieldFoundation2.prototype.styleValidity = function(isValid) {
    var INVALID = MDCTextFieldFoundation2.cssClasses.INVALID;
    if (isValid) {
      this.adapter.removeClass(INVALID);
    } else {
      this.adapter.addClass(INVALID);
    }
    if (this.helperText) {
      this.helperText.setValidity(isValid);
      var helperTextValidation = this.helperText.isValidation();
      if (!helperTextValidation) {
        return;
      }
      var helperTextVisible = this.helperText.isVisible();
      var helperTextId = this.helperText.getId();
      if (helperTextVisible && helperTextId) {
        this.adapter.setInputAttr(strings3.ARIA_DESCRIBEDBY, helperTextId);
      } else {
        this.adapter.removeInputAttr(strings3.ARIA_DESCRIBEDBY);
      }
    }
  };
  MDCTextFieldFoundation2.prototype.styleFocused = function(isFocused) {
    var FOCUSED = MDCTextFieldFoundation2.cssClasses.FOCUSED;
    if (isFocused) {
      this.adapter.addClass(FOCUSED);
    } else {
      this.adapter.removeClass(FOCUSED);
    }
  };
  MDCTextFieldFoundation2.prototype.styleDisabled = function(isDisabled) {
    var _a = MDCTextFieldFoundation2.cssClasses, DISABLED = _a.DISABLED, INVALID = _a.INVALID;
    if (isDisabled) {
      this.adapter.addClass(DISABLED);
      this.adapter.removeClass(INVALID);
    } else {
      this.adapter.removeClass(DISABLED);
    }
    if (this.leadingIcon) {
      this.leadingIcon.setDisabled(isDisabled);
    }
    if (this.trailingIcon) {
      this.trailingIcon.setDisabled(isDisabled);
    }
  };
  MDCTextFieldFoundation2.prototype.styleFloating = function(isFloating) {
    var LABEL_FLOATING = MDCTextFieldFoundation2.cssClasses.LABEL_FLOATING;
    if (isFloating) {
      this.adapter.addClass(LABEL_FLOATING);
    } else {
      this.adapter.removeClass(LABEL_FLOATING);
    }
  };
  MDCTextFieldFoundation2.prototype.getNativeInput = function() {
    var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
    return nativeInput || {
      disabled: false,
      maxLength: -1,
      required: false,
      type: "input",
      validity: {
        badInput: false,
        valid: true
      },
      value: ""
    };
  };
  return MDCTextFieldFoundation2;
}(MDCFoundation);

// node_modules/@material/textfield/helper-text/constants.js
var cssClasses6 = {
  HELPER_TEXT_PERSISTENT: "mdc-text-field-helper-text--persistent",
  HELPER_TEXT_VALIDATION_MSG: "mdc-text-field-helper-text--validation-msg",
  ROOT: "mdc-text-field-helper-text"
};
var strings4 = {
  ARIA_HIDDEN: "aria-hidden",
  ROLE: "role",
  ROOT_SELECTOR: "." + cssClasses6.ROOT
};

// node_modules/@material/textfield/helper-text/foundation.js
var MDCTextFieldHelperTextFoundation = function(_super) {
  __extends(MDCTextFieldHelperTextFoundation2, _super);
  function MDCTextFieldHelperTextFoundation2(adapter) {
    return _super.call(this, __assign(__assign({}, MDCTextFieldHelperTextFoundation2.defaultAdapter), adapter)) || this;
  }
  __name(MDCTextFieldHelperTextFoundation2, "MDCTextFieldHelperTextFoundation");
  Object.defineProperty(MDCTextFieldHelperTextFoundation2, "cssClasses", {
    get: function() {
      return cssClasses6;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldHelperTextFoundation2, "strings", {
    get: function() {
      return strings4;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldHelperTextFoundation2, "defaultAdapter", {
    get: function() {
      return {
        addClass: function() {
          return void 0;
        },
        removeClass: function() {
          return void 0;
        },
        hasClass: function() {
          return false;
        },
        getAttr: function() {
          return null;
        },
        setAttr: function() {
          return void 0;
        },
        removeAttr: function() {
          return void 0;
        },
        setContent: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCTextFieldHelperTextFoundation2.prototype.getId = function() {
    return this.adapter.getAttr("id");
  };
  MDCTextFieldHelperTextFoundation2.prototype.isVisible = function() {
    return this.adapter.getAttr(strings4.ARIA_HIDDEN) !== "true";
  };
  MDCTextFieldHelperTextFoundation2.prototype.setContent = function(content) {
    this.adapter.setContent(content);
  };
  MDCTextFieldHelperTextFoundation2.prototype.isPersistent = function() {
    return this.adapter.hasClass(cssClasses6.HELPER_TEXT_PERSISTENT);
  };
  MDCTextFieldHelperTextFoundation2.prototype.setPersistent = function(isPersistent) {
    if (isPersistent) {
      this.adapter.addClass(cssClasses6.HELPER_TEXT_PERSISTENT);
    } else {
      this.adapter.removeClass(cssClasses6.HELPER_TEXT_PERSISTENT);
    }
  };
  MDCTextFieldHelperTextFoundation2.prototype.isValidation = function() {
    return this.adapter.hasClass(cssClasses6.HELPER_TEXT_VALIDATION_MSG);
  };
  MDCTextFieldHelperTextFoundation2.prototype.setValidation = function(isValidation) {
    if (isValidation) {
      this.adapter.addClass(cssClasses6.HELPER_TEXT_VALIDATION_MSG);
    } else {
      this.adapter.removeClass(cssClasses6.HELPER_TEXT_VALIDATION_MSG);
    }
  };
  MDCTextFieldHelperTextFoundation2.prototype.showToScreenReader = function() {
    this.adapter.removeAttr(strings4.ARIA_HIDDEN);
  };
  MDCTextFieldHelperTextFoundation2.prototype.setValidity = function(inputIsValid) {
    var helperTextIsPersistent = this.adapter.hasClass(cssClasses6.HELPER_TEXT_PERSISTENT);
    var helperTextIsValidationMsg = this.adapter.hasClass(cssClasses6.HELPER_TEXT_VALIDATION_MSG);
    var validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;
    if (validationMsgNeedsDisplay) {
      this.showToScreenReader();
      if (this.adapter.getAttr(strings4.ROLE) === "alert") {
        this.refreshAlertRole();
      } else {
        this.adapter.setAttr(strings4.ROLE, "alert");
      }
    } else {
      this.adapter.removeAttr(strings4.ROLE);
    }
    if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {
      this.hide();
    }
  };
  MDCTextFieldHelperTextFoundation2.prototype.hide = function() {
    this.adapter.setAttr(strings4.ARIA_HIDDEN, "true");
  };
  MDCTextFieldHelperTextFoundation2.prototype.refreshAlertRole = function() {
    var _this = this;
    this.adapter.removeAttr(strings4.ROLE);
    requestAnimationFrame(function() {
      _this.adapter.setAttr(strings4.ROLE, "alert");
    });
  };
  return MDCTextFieldHelperTextFoundation2;
}(MDCFoundation);

// node_modules/@material/textfield/helper-text/component.js
var MDCTextFieldHelperText = function(_super) {
  __extends(MDCTextFieldHelperText2, _super);
  function MDCTextFieldHelperText2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __name(MDCTextFieldHelperText2, "MDCTextFieldHelperText");
  MDCTextFieldHelperText2.attachTo = function(root) {
    return new MDCTextFieldHelperText2(root);
  };
  Object.defineProperty(MDCTextFieldHelperText2.prototype, "foundationForTextField", {
    get: function() {
      return this.foundation;
    },
    enumerable: false,
    configurable: true
  });
  MDCTextFieldHelperText2.prototype.getDefaultFoundation = function() {
    var _this = this;
    var adapter = {
      addClass: function(className) {
        return _this.root.classList.add(className);
      },
      removeClass: function(className) {
        return _this.root.classList.remove(className);
      },
      hasClass: function(className) {
        return _this.root.classList.contains(className);
      },
      getAttr: function(attr) {
        return _this.root.getAttribute(attr);
      },
      setAttr: function(attr, value) {
        return _this.root.setAttribute(attr, value);
      },
      removeAttr: function(attr) {
        return _this.root.removeAttribute(attr);
      },
      setContent: function(content) {
        _this.root.textContent = content;
      }
    };
    return new MDCTextFieldHelperTextFoundation(adapter);
  };
  return MDCTextFieldHelperText2;
}(MDCComponent);

// node_modules/@material/textfield/icon/constants.js
var strings5 = {
  ICON_EVENT: "MDCTextField:icon",
  ICON_ROLE: "button"
};
var cssClasses7 = {
  ROOT: "mdc-text-field__icon"
};

// node_modules/@material/textfield/icon/foundation.js
var INTERACTION_EVENTS2 = ["click", "keydown"];
var MDCTextFieldIconFoundation = function(_super) {
  __extends(MDCTextFieldIconFoundation2, _super);
  function MDCTextFieldIconFoundation2(adapter) {
    var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation2.defaultAdapter), adapter)) || this;
    _this.savedTabIndex = null;
    _this.interactionHandler = function(evt) {
      _this.handleInteraction(evt);
    };
    return _this;
  }
  __name(MDCTextFieldIconFoundation2, "MDCTextFieldIconFoundation");
  Object.defineProperty(MDCTextFieldIconFoundation2, "strings", {
    get: function() {
      return strings5;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldIconFoundation2, "cssClasses", {
    get: function() {
      return cssClasses7;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextFieldIconFoundation2, "defaultAdapter", {
    get: function() {
      return {
        getAttr: function() {
          return null;
        },
        setAttr: function() {
          return void 0;
        },
        removeAttr: function() {
          return void 0;
        },
        setContent: function() {
          return void 0;
        },
        registerInteractionHandler: function() {
          return void 0;
        },
        deregisterInteractionHandler: function() {
          return void 0;
        },
        notifyIconAction: function() {
          return void 0;
        }
      };
    },
    enumerable: false,
    configurable: true
  });
  MDCTextFieldIconFoundation2.prototype.init = function() {
    var e_1, _a;
    this.savedTabIndex = this.adapter.getAttr("tabindex");
    try {
      for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS2), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
        var evtType = INTERACTION_EVENTS_1_1.value;
        this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a = INTERACTION_EVENTS_1.return))
          _a.call(INTERACTION_EVENTS_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  MDCTextFieldIconFoundation2.prototype.destroy = function() {
    var e_2, _a;
    try {
      for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS2), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
        var evtType = INTERACTION_EVENTS_2_1.value;
        this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a = INTERACTION_EVENTS_2.return))
          _a.call(INTERACTION_EVENTS_2);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
  };
  MDCTextFieldIconFoundation2.prototype.setDisabled = function(disabled) {
    if (!this.savedTabIndex) {
      return;
    }
    if (disabled) {
      this.adapter.setAttr("tabindex", "-1");
      this.adapter.removeAttr("role");
    } else {
      this.adapter.setAttr("tabindex", this.savedTabIndex);
      this.adapter.setAttr("role", strings5.ICON_ROLE);
    }
  };
  MDCTextFieldIconFoundation2.prototype.setAriaLabel = function(label) {
    this.adapter.setAttr("aria-label", label);
  };
  MDCTextFieldIconFoundation2.prototype.setContent = function(content) {
    this.adapter.setContent(content);
  };
  MDCTextFieldIconFoundation2.prototype.handleInteraction = function(evt) {
    var isEnterKey = evt.key === "Enter" || evt.keyCode === 13;
    if (evt.type === "click" || isEnterKey) {
      evt.preventDefault();
      this.adapter.notifyIconAction();
    }
  };
  return MDCTextFieldIconFoundation2;
}(MDCFoundation);

// node_modules/@material/textfield/icon/component.js
var MDCTextFieldIcon = function(_super) {
  __extends(MDCTextFieldIcon2, _super);
  function MDCTextFieldIcon2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __name(MDCTextFieldIcon2, "MDCTextFieldIcon");
  MDCTextFieldIcon2.attachTo = function(root) {
    return new MDCTextFieldIcon2(root);
  };
  Object.defineProperty(MDCTextFieldIcon2.prototype, "foundationForTextField", {
    get: function() {
      return this.foundation;
    },
    enumerable: false,
    configurable: true
  });
  MDCTextFieldIcon2.prototype.getDefaultFoundation = function() {
    var _this = this;
    var adapter = {
      getAttr: function(attr) {
        return _this.root.getAttribute(attr);
      },
      setAttr: function(attr, value) {
        return _this.root.setAttribute(attr, value);
      },
      removeAttr: function(attr) {
        return _this.root.removeAttribute(attr);
      },
      setContent: function(content) {
        _this.root.textContent = content;
      },
      registerInteractionHandler: function(evtType, handler) {
        return _this.listen(evtType, handler);
      },
      deregisterInteractionHandler: function(evtType, handler) {
        return _this.unlisten(evtType, handler);
      },
      notifyIconAction: function() {
        return _this.emit(MDCTextFieldIconFoundation.strings.ICON_EVENT, {}, true);
      }
    };
    return new MDCTextFieldIconFoundation(adapter);
  };
  return MDCTextFieldIcon2;
}(MDCComponent);

// node_modules/@material/textfield/component.js
var MDCTextField = function(_super) {
  __extends(MDCTextField2, _super);
  function MDCTextField2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  __name(MDCTextField2, "MDCTextField");
  MDCTextField2.attachTo = function(root) {
    return new MDCTextField2(root);
  };
  MDCTextField2.prototype.initialize = function(rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {
    if (rippleFactory === void 0) {
      rippleFactory = /* @__PURE__ */ __name(function(el, foundation) {
        return new MDCRipple(el, foundation);
      }, "rippleFactory");
    }
    if (lineRippleFactory === void 0) {
      lineRippleFactory = /* @__PURE__ */ __name(function(el) {
        return new MDCLineRipple(el);
      }, "lineRippleFactory");
    }
    if (helperTextFactory === void 0) {
      helperTextFactory = /* @__PURE__ */ __name(function(el) {
        return new MDCTextFieldHelperText(el);
      }, "helperTextFactory");
    }
    if (characterCounterFactory === void 0) {
      characterCounterFactory = /* @__PURE__ */ __name(function(el) {
        return new MDCTextFieldCharacterCounter(el);
      }, "characterCounterFactory");
    }
    if (iconFactory === void 0) {
      iconFactory = /* @__PURE__ */ __name(function(el) {
        return new MDCTextFieldIcon(el);
      }, "iconFactory");
    }
    if (labelFactory === void 0) {
      labelFactory = /* @__PURE__ */ __name(function(el) {
        return new MDCFloatingLabel(el);
      }, "labelFactory");
    }
    if (outlineFactory === void 0) {
      outlineFactory = /* @__PURE__ */ __name(function(el) {
        return new MDCNotchedOutline(el);
      }, "outlineFactory");
    }
    this.input = this.root.querySelector(strings3.INPUT_SELECTOR);
    var labelElement = this.root.querySelector(strings3.LABEL_SELECTOR);
    this.label = labelElement ? labelFactory(labelElement) : null;
    var lineRippleElement = this.root.querySelector(strings3.LINE_RIPPLE_SELECTOR);
    this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
    var outlineElement = this.root.querySelector(strings3.OUTLINE_SELECTOR);
    this.outline = outlineElement ? outlineFactory(outlineElement) : null;
    var helperTextStrings = MDCTextFieldHelperTextFoundation.strings;
    var nextElementSibling = this.root.nextElementSibling;
    var hasHelperLine = nextElementSibling && nextElementSibling.classList.contains(cssClasses5.HELPER_LINE);
    var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);
    this.helperText = helperTextEl ? helperTextFactory(helperTextEl) : null;
    var characterCounterStrings = MDCTextFieldCharacterCounterFoundation.strings;
    var characterCounterEl = this.root.querySelector(characterCounterStrings.ROOT_SELECTOR);
    if (!characterCounterEl && hasHelperLine && nextElementSibling) {
      characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);
    }
    this.characterCounter = characterCounterEl ? characterCounterFactory(characterCounterEl) : null;
    var leadingIconEl = this.root.querySelector(strings3.LEADING_ICON_SELECTOR);
    this.leadingIcon = leadingIconEl ? iconFactory(leadingIconEl) : null;
    var trailingIconEl = this.root.querySelector(strings3.TRAILING_ICON_SELECTOR);
    this.trailingIcon = trailingIconEl ? iconFactory(trailingIconEl) : null;
    this.prefix = this.root.querySelector(strings3.PREFIX_SELECTOR);
    this.suffix = this.root.querySelector(strings3.SUFFIX_SELECTOR);
    this.ripple = this.createRipple(rippleFactory);
  };
  MDCTextField2.prototype.destroy = function() {
    if (this.ripple) {
      this.ripple.destroy();
    }
    if (this.lineRipple) {
      this.lineRipple.destroy();
    }
    if (this.helperText) {
      this.helperText.destroy();
    }
    if (this.characterCounter) {
      this.characterCounter.destroy();
    }
    if (this.leadingIcon) {
      this.leadingIcon.destroy();
    }
    if (this.trailingIcon) {
      this.trailingIcon.destroy();
    }
    if (this.label) {
      this.label.destroy();
    }
    if (this.outline) {
      this.outline.destroy();
    }
    _super.prototype.destroy.call(this);
  };
  MDCTextField2.prototype.initialSyncWithDOM = function() {
    this.disabled = this.input.disabled;
  };
  Object.defineProperty(MDCTextField2.prototype, "value", {
    get: function() {
      return this.foundation.getValue();
    },
    set: function(value) {
      this.foundation.setValue(value);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "disabled", {
    get: function() {
      return this.foundation.isDisabled();
    },
    set: function(disabled) {
      this.foundation.setDisabled(disabled);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "valid", {
    get: function() {
      return this.foundation.isValid();
    },
    set: function(valid) {
      this.foundation.setValid(valid);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "required", {
    get: function() {
      return this.input.required;
    },
    set: function(required) {
      this.input.required = required;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "pattern", {
    get: function() {
      return this.input.pattern;
    },
    set: function(pattern) {
      this.input.pattern = pattern;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "minLength", {
    get: function() {
      return this.input.minLength;
    },
    set: function(minLength) {
      this.input.minLength = minLength;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "maxLength", {
    get: function() {
      return this.input.maxLength;
    },
    set: function(maxLength) {
      if (maxLength < 0) {
        this.input.removeAttribute("maxLength");
      } else {
        this.input.maxLength = maxLength;
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "min", {
    get: function() {
      return this.input.min;
    },
    set: function(min) {
      this.input.min = min;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "max", {
    get: function() {
      return this.input.max;
    },
    set: function(max) {
      this.input.max = max;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "step", {
    get: function() {
      return this.input.step;
    },
    set: function(step) {
      this.input.step = step;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "helperTextContent", {
    set: function(content) {
      this.foundation.setHelperTextContent(content);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "leadingIconAriaLabel", {
    set: function(label) {
      this.foundation.setLeadingIconAriaLabel(label);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "leadingIconContent", {
    set: function(content) {
      this.foundation.setLeadingIconContent(content);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "trailingIconAriaLabel", {
    set: function(label) {
      this.foundation.setTrailingIconAriaLabel(label);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "trailingIconContent", {
    set: function(content) {
      this.foundation.setTrailingIconContent(content);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "useNativeValidation", {
    set: function(useNativeValidation) {
      this.foundation.setUseNativeValidation(useNativeValidation);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "prefixText", {
    get: function() {
      return this.prefix ? this.prefix.textContent : null;
    },
    set: function(prefixText) {
      if (this.prefix) {
        this.prefix.textContent = prefixText;
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MDCTextField2.prototype, "suffixText", {
    get: function() {
      return this.suffix ? this.suffix.textContent : null;
    },
    set: function(suffixText) {
      if (this.suffix) {
        this.suffix.textContent = suffixText;
      }
    },
    enumerable: false,
    configurable: true
  });
  MDCTextField2.prototype.focus = function() {
    this.input.focus();
  };
  MDCTextField2.prototype.layout = function() {
    var openNotch = this.foundation.shouldFloat;
    this.foundation.notchOutline(openNotch);
  };
  MDCTextField2.prototype.getDefaultFoundation = function() {
    var adapter = __assign(__assign(__assign(__assign(__assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());
    return new MDCTextFieldFoundation(adapter, this.getFoundationMap());
  };
  MDCTextField2.prototype.getRootAdapterMethods = function() {
    var _this = this;
    return {
      addClass: function(className) {
        return _this.root.classList.add(className);
      },
      removeClass: function(className) {
        return _this.root.classList.remove(className);
      },
      hasClass: function(className) {
        return _this.root.classList.contains(className);
      },
      registerTextFieldInteractionHandler: function(evtType, handler) {
        _this.listen(evtType, handler);
      },
      deregisterTextFieldInteractionHandler: function(evtType, handler) {
        _this.unlisten(evtType, handler);
      },
      registerValidationAttributeChangeHandler: function(handler) {
        var getAttributesList = /* @__PURE__ */ __name(function(mutationsList) {
          return mutationsList.map(function(mutation) {
            return mutation.attributeName;
          }).filter(function(attributeName) {
            return attributeName;
          });
        }, "getAttributesList");
        var observer = new MutationObserver(function(mutationsList) {
          return handler(getAttributesList(mutationsList));
        });
        var config = { attributes: true };
        observer.observe(_this.input, config);
        return observer;
      },
      deregisterValidationAttributeChangeHandler: function(observer) {
        observer.disconnect();
      }
    };
  };
  MDCTextField2.prototype.getInputAdapterMethods = function() {
    var _this = this;
    return {
      getNativeInput: function() {
        return _this.input;
      },
      setInputAttr: function(attr, value) {
        _this.input.setAttribute(attr, value);
      },
      removeInputAttr: function(attr) {
        _this.input.removeAttribute(attr);
      },
      isFocused: function() {
        return document.activeElement === _this.input;
      },
      registerInputInteractionHandler: function(evtType, handler) {
        _this.input.addEventListener(evtType, handler, applyPassive());
      },
      deregisterInputInteractionHandler: function(evtType, handler) {
        _this.input.removeEventListener(evtType, handler, applyPassive());
      }
    };
  };
  MDCTextField2.prototype.getLabelAdapterMethods = function() {
    var _this = this;
    return {
      floatLabel: function(shouldFloat) {
        _this.label && _this.label.float(shouldFloat);
      },
      getLabelWidth: function() {
        return _this.label ? _this.label.getWidth() : 0;
      },
      hasLabel: function() {
        return Boolean(_this.label);
      },
      shakeLabel: function(shouldShake) {
        _this.label && _this.label.shake(shouldShake);
      },
      setLabelRequired: function(isRequired) {
        _this.label && _this.label.setRequired(isRequired);
      }
    };
  };
  MDCTextField2.prototype.getLineRippleAdapterMethods = function() {
    var _this = this;
    return {
      activateLineRipple: function() {
        if (_this.lineRipple) {
          _this.lineRipple.activate();
        }
      },
      deactivateLineRipple: function() {
        if (_this.lineRipple) {
          _this.lineRipple.deactivate();
        }
      },
      setLineRippleTransformOrigin: function(normalizedX) {
        if (_this.lineRipple) {
          _this.lineRipple.setRippleCenter(normalizedX);
        }
      }
    };
  };
  MDCTextField2.prototype.getOutlineAdapterMethods = function() {
    var _this = this;
    return {
      closeOutline: function() {
        _this.outline && _this.outline.closeNotch();
      },
      hasOutline: function() {
        return Boolean(_this.outline);
      },
      notchOutline: function(labelWidth) {
        _this.outline && _this.outline.notch(labelWidth);
      }
    };
  };
  MDCTextField2.prototype.getFoundationMap = function() {
    return {
      characterCounter: this.characterCounter ? this.characterCounter.foundationForTextField : void 0,
      helperText: this.helperText ? this.helperText.foundationForTextField : void 0,
      leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForTextField : void 0,
      trailingIcon: this.trailingIcon ? this.trailingIcon.foundationForTextField : void 0
    };
  };
  MDCTextField2.prototype.createRipple = function(rippleFactory) {
    var _this = this;
    var isTextArea = this.root.classList.contains(cssClasses5.TEXTAREA);
    var isOutlined = this.root.classList.contains(cssClasses5.OUTLINED);
    if (isTextArea || isOutlined) {
      return null;
    }
    var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { isSurfaceActive: function() {
      return matches(_this.input, ":active");
    }, registerInteractionHandler: function(evtType, handler) {
      _this.input.addEventListener(evtType, handler, applyPassive());
    }, deregisterInteractionHandler: function(evtType, handler) {
      _this.input.removeEventListener(evtType, handler, applyPassive());
    } });
    return rippleFactory(this.root, new MDCRippleFoundation(adapter));
  };
  return MDCTextField2;
}(MDCComponent);
export {
  ALWAYS_FLOAT_TYPES,
  MDCTextField,
  MDCTextFieldCharacterCounter,
  MDCTextFieldCharacterCounterFoundation,
  MDCTextFieldFoundation,
  MDCTextFieldHelperText,
  MDCTextFieldHelperTextFoundation,
  MDCTextFieldIcon,
  MDCTextFieldIconFoundation,
  VALIDATION_ATTR_WHITELIST,
  cssClasses4 as characterCountCssClasses,
  strings2 as characterCountStrings,
  cssClasses5 as cssClasses,
  cssClasses6 as helperTextCssClasses,
  strings4 as helperTextStrings,
  cssClasses7 as iconCssClasses,
  strings5 as iconStrings,
  numbers2 as numbers,
  strings3 as strings
};
/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
//# sourceMappingURL=@material_textfield.js.map
