{"version":3,"file":"index.988eeb62.js","sources":["../../../../../Js/apps/blazor-app/src/service-worker/index.ts"],"sourcesContent":["import { ExpirationPlugin } from 'workbox-expiration';\r\nimport { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';\r\nimport { registerRoute } from 'workbox-routing';\r\nimport { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';\r\n\r\ndeclare const self: any;\r\ndeclare const location: any;\r\n\r\nconst componentName = 'Service Worker';\r\n\r\nconst DEBUG_MODE = location.hostname.endsWith('.app.local') || location.hostname === 'localhost';\r\n\r\nconst DAY_IN_SECONDS = 24 * 60 * 60;\r\nconst MONTH_IN_SECONDS = DAY_IN_SECONDS * 30;\r\nconst YEAR_IN_SECONDS = DAY_IN_SECONDS * 365;\r\n\r\nconst SERVICE_WORKER_VERSION = '1.0.0';\r\n\r\nif (DEBUG_MODE) {\r\n    console.debug(`Service worker version ${SERVICE_WORKER_VERSION} loading...`);\r\n}\r\n\r\ncleanupOutdatedCaches();\r\n\r\n// This is done by workbox-build-inject.js for the production build\r\nconst assetsToCache = self.__WB_MANIFEST || [];\r\n\r\nif (DEBUG_MODE) {\r\n    console.trace(`${componentName}:: Assets that will be cached: `, assetsToCache);\r\n}\r\n\r\nprecacheAndRoute(assetsToCache);\r\n\r\n//const defaultRouteHandler = createHandlerBoundToURL(\"/index.html\");\r\n//const defaultNavigationRoute = new NavigationRoute(defaultRouteHandler, {\r\n//    //allowlist: [],\r\n//    //denylist: [],\r\n//});\r\n\r\n//registerRoute(defaultNavigationRoute);\r\n\r\n// Cache the Google Fonts webfont files with a cache first strategy for 1 year.\r\n//registerRoute(\r\n//    /^https:\\/\\/fonts\\.gstatic\\.com/,\r\n//    new CacheFirst({\r\n//        cacheName: \"google-fonts-webfonts\",\r\n//        plugins: [\r\n//            new CacheableResponsePlugin({\r\n//                statuses: [0, 200],\r\n//            }),\r\n//            new ExpirationPlugin({\r\n//                maxAgeSeconds: YEAR_IN_SECONDS,\r\n//                maxEntries: 30,\r\n//                purgeOnQuotaError: true, // Automatically cleanup if quota is exceeded.\r\n//            }),\r\n//        ],\r\n//    }),\r\n//);\r\n\r\n// Make JS/CSS fast by returning assets from the cache\r\n// But make sure they're updating in the background for next use\r\nregisterRoute(\r\n    /\\.(?:js|css)$/,\r\n    new StaleWhileRevalidate({\r\n        cacheName: 'jsAndStyles',\r\n        plugins: [\r\n            new ExpirationPlugin({\r\n                maxEntries: 1000,\r\n                maxAgeSeconds: DAY_IN_SECONDS,\r\n            }),\r\n        ],\r\n    }),\r\n);\r\n\r\n// Cache images\r\n// But clean up after a while\r\nregisterRoute(\r\n    /\\.(?:png|gif|jpg|jpeg|svg)$/,\r\n    new CacheFirst({\r\n        cacheName: 'images',\r\n        plugins: [\r\n            new ExpirationPlugin({\r\n                maxEntries: 1000,\r\n                maxAgeSeconds: MONTH_IN_SECONDS,\r\n                purgeOnQuotaError: true, // Automatically cleanup if quota is exceeded.\r\n            }),\r\n        ],\r\n    }),\r\n);\r\n\r\n//// Anything authentication related MUST be performed online\r\n//registerRoute(/(https:\\/\\/)?([^\\/\\s]+\\/)api\\/v1\\/auth\\/.*/, new NetworkOnly());\r\n\r\n//// Database access is only supported while online\r\n//registerRoute(/(https:\\/\\/)?([^\\/\\s]+\\/)database\\/.*/, new NetworkOnly());\r\n"],"names":[],"mappings":";AAQA,MAAM,gBAAgB;AAEtB,MAAM,aAAa,SAAS,SAAS,SAAS,iBAAiB,SAAS,aAAa;AAErF,MAAM,iBAAiB,KAAK,KAAK;AACjC,MAAM,mBAAmB,iBAAiB;AAG1C,MAAM,yBAAyB;AAE/B,IAAI,YAAY;UACJ,MAAM,0BAA0B;AAAA;AAG5C;AAGA,MAAM,gBAAgB,KAAK,iBAAiB;AAE5C,IAAI,YAAY;UACJ,MAAM,GAAG,gDAAgD;AAAA;AAGrE,iBAAiB;AA8BjB,cACI,iBACA,IAAI,qBAAqB;AAAA,EACrB,WAAW;AAAA,EACX,SAAS;AAAA,IACL,IAAI,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,eAAe;AAAA;AAAA;AAAA;AAQ/B,cACI,+BACA,IAAI,WAAW;AAAA,EACX,WAAW;AAAA,EACX,SAAS;AAAA,IACL,IAAI,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,mBAAmB;AAAA;AAAA;AAAA;"}