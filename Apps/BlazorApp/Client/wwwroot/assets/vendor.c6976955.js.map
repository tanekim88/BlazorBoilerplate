{"version":3,"file":"vendor.c6976955.js","sources":["../../../../../Js/node_modules/workbox-core/_version.js","../../../../../Js/node_modules/workbox-core/models/messages/messages.js","../../../../../Js/node_modules/workbox-core/models/messages/messageGenerator.js","../../../../../Js/node_modules/workbox-core/_private/WorkboxError.js","../../../../../Js/node_modules/workbox-core/_private/assert.js","../../../../../Js/node_modules/workbox-core/_private/dontWaitFor.js","../../../../../Js/node_modules/workbox-core/_private/logger.js","../../../../../Js/node_modules/idb/build/esm/wrap-idb-value.js","../../../../../Js/node_modules/idb/build/esm/index.js","../../../../../Js/node_modules/workbox-expiration/_version.js","../../../../../Js/node_modules/workbox-expiration/models/CacheTimestampsModel.js","../../../../../Js/node_modules/workbox-expiration/CacheExpiration.js","../../../../../Js/node_modules/workbox-core/_private/cacheNames.js","../../../../../Js/node_modules/workbox-core/_private/getFriendlyURL.js","../../../../../Js/node_modules/workbox-core/models/quotaErrorCallbacks.js","../../../../../Js/node_modules/workbox-core/registerQuotaErrorCallback.js","../../../../../Js/node_modules/workbox-expiration/ExpirationPlugin.js","../../../../../Js/node_modules/workbox-core/_private/waitUntil.js","../../../../../Js/node_modules/workbox-precaching/_version.js","../../../../../Js/node_modules/workbox-precaching/utils/createCacheKey.js","../../../../../Js/node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../../../../../Js/node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../../../../../Js/node_modules/workbox-precaching/utils/printCleanupDetails.js","../../../../../Js/node_modules/workbox-precaching/utils/printInstallDetails.js","../../../../../Js/node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../../../../../Js/node_modules/workbox-core/copyResponse.js","../../../../../Js/node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../../../../../Js/node_modules/workbox-core/_private/Deferred.js","../../../../../Js/node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../../../../../Js/node_modules/workbox-core/_private/timeout.js","../../../../../Js/node_modules/workbox-strategies/_version.js","../../../../../Js/node_modules/workbox-strategies/StrategyHandler.js","../../../../../Js/node_modules/workbox-strategies/Strategy.js","../../../../../Js/node_modules/workbox-precaching/PrecacheStrategy.js","../../../../../Js/node_modules/workbox-precaching/PrecacheController.js","../../../../../Js/node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../../../../../Js/node_modules/workbox-routing/_version.js","../../../../../Js/node_modules/workbox-routing/utils/constants.js","../../../../../Js/node_modules/workbox-routing/utils/normalizeHandler.js","../../../../../Js/node_modules/workbox-routing/Route.js","../../../../../Js/node_modules/workbox-routing/RegExpRoute.js","../../../../../Js/node_modules/workbox-routing/Router.js","../../../../../Js/node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../../../../../Js/node_modules/workbox-routing/registerRoute.js","../../../../../Js/node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../../../../../Js/node_modules/workbox-precaching/utils/generateURLVariations.js","../../../../../Js/node_modules/workbox-precaching/PrecacheRoute.js","../../../../../Js/node_modules/workbox-precaching/addRoute.js","../../../../../Js/node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","../../../../../Js/node_modules/workbox-precaching/cleanupOutdatedCaches.js","../../../../../Js/node_modules/workbox-precaching/precache.js","../../../../../Js/node_modules/workbox-precaching/precacheAndRoute.js","../../../../../Js/node_modules/workbox-strategies/utils/messages.js","../../../../../Js/node_modules/workbox-strategies/CacheFirst.js","../../../../../Js/node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../../../../../Js/node_modules/workbox-strategies/StaleWhileRevalidate.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`;\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`;\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return `The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`;\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`;\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName }) => {\n        if (!expectedMethod || !paramName || !moduleName || !className\n            || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return `An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`;\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` +\n                `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`;\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` +\n                `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`;\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`;\n    },\n    'unregister-route-route-not-registered': () => {\n        return `The route you're trying to unregister was not previously ` +\n            `registered.`;\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return `The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return `The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`;\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return `The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`;\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName }) => {\n        return `The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`;\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return `You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`;\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return `You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`;\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`;\n    },\n    'channel-name-required': () => {\n        return `You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`;\n    },\n    'invalid-responses-are-same-args': () => {\n        return `The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`;\n    },\n    'expire-custom-caches-only': () => {\n        return `You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`;\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`;\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`;\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return `The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return `Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`;\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return `There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`;\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return `The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`);\n    },\n    'non-precached-url': ({ url }) => {\n        return `createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`;\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return `Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`;\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return `workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] =\n            `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isType,\n    isArrayOfClass,\n};\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\n    // Don't overwrite this value if it's already set.\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: `#7f8c8d`,\n        log: `#2ecc71`,\n        warn: `#f39c12`,\n        error: `#c0392b`,\n        groupCollapsed: `#3498db`,\n        groupEnd: null,\n    };\n    const print = function (method, args) {\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === 'groupCollapsed') {\n            // Safari doesn't print all console.groupCollapsed() arguments:\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            `border-radius: 0.5em`,\n            `color: white`,\n            `font-weight: bold`,\n            `padding: 2px 0.5em`,\n        ];\n        // When in a group, the workbox prefix is not displayed.\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n        console[method](...logPrefix, ...args);\n        if (method === 'groupCollapsed') {\n            inGroup = true;\n        }\n        if (method === 'groupEnd') {\n            inGroup = false;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const api = {};\n    const loggerMethods = Object.keys(methodToColorMap);\n    for (const key of loggerMethods) {\n        const method = key;\n        api[method] = (...args) => {\n            print(method, args);\n        };\n    }\n    return api;\n})());\nexport { logger };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', { durability: 'relaxed' });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db.transaction(CACHE_OBJECT_STORE).store.index('timestamp').openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n      * Returns an open connection to the database.\n      *\n      * @private\n      */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof module:workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ?\n            Date.now() - (this._maxAgeSeconds * 1000) : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ?\n                    'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);\n            return timestamp !== undefined ? (timestamp < expireOlderThan) : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof module:workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached request is used or updated, this plugin will look\n * at the associated cache and remove any old or extra requests.\n *\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached request has been used. If the request has a \"Date\" header, then\n * a light weight expiration check is performed and the request will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof module:workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state && state.originalRequest\n                    && state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} deletedURLs\n *\n * @private\n */\nconst logGroup = (groupTitle, deletedURLs) => {\n    logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n};\n/**\n * @param {Array<string>} deletedURLs\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        logger.groupCollapsed(`During precaching cleanup, ` +\n            `${deletionCount} cached ` +\n            `request${deletionCount === 1 ? ' was' : 's were'} deleted.`);\n        logGroup('Deleted Cache Requests', deletedURLs);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} urls\n *\n * @private\n */\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    logger.groupCollapsed(groupTitle);\n    for (const url of urls) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n}\n/**\n * @param {Array<string>} urlsToPrecache\n * @param {Array<string>} urlsAlreadyPrecached\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;\n        if (alreadyPrecachedCount > 0) {\n            message += ` ${alreadyPrecachedCount} ` +\n                `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;\n        }\n        logger.groupCollapsed(message);\n        _nestedGroup(`View newly precached URLs.`, urlsToPrecache);\n        _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof module:workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream() ?\n        clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof module:workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return (typeof input === 'string') ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * [handle()]{@link module:workbox-strategies.Strategy~handle} or\n * [handleAll()]{@link module:workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof module:workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {module:workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     *     [match callback]{@link module:workbox-routing~matchCallback},\n     *     (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * [match callback]{@link module:workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail') ?\n            request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', { thrownErrorMessage: err.message });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ?\n                undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse = (await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event,\n            })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback ? await cacheMatchIgnoreParams(\n        // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n        // feature. Consider into ways to only add this behavior if using\n        // precaching.\n        cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions) :\n            null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ?\n                responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        if (!this._cacheKeys[mode]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params,\n                }));\n            }\n            this._cacheKeys[mode] = effectiveRequest;\n        }\n        return this._cacheKeys[mode];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * [`iterateCallbacks()`]{@link module:workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * [`doneWaiting()`]{@link module:workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * [`waitUntil()`]{@link module:workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while (promise = this._extendLifetimePromises.shift()) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache = (await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event,\n            })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof module:workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * [workbox-core]{@link module:workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * [route]{@link module:workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to [`handle()`]{@link module:workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of [response, done] promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string' ?\n            new Request(options.request) :\n            options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the [`handler`]{@link module:workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {module:workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof module:workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A [Strategy]{@link module:workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            response = await handler.fetch(new Request(request, {\n                integrity: integrityInRequest || integrityInManifest,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            if (integrityInManifest && noIntegrityConflict) {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof module:workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {module:workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\n                'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<module:workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.2.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {module:workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            if (event.data && event.data.type === 'CACHE_URLS') { // eslint-disable-line\n                const { payload } = event.data; // eslint-disable-line\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of [Route]{@link module:workbox-routing.Route} that takes a\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof module:workbox-precaching\n * @extends module:workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See\n * [PrecacheRoute options]{@link module:workbox-precaching.PrecacheRoute}.\n *\n * @memberof module:workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName;\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof module:workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * [precache()]{@link module:workbox-precaching.precache} and\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See\n * [PrecacheRoute options]{@link module:workbox-precaching.PrecacheRoute}.\n *\n * @memberof module:workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport '../_version.js';\nexport const messages = {\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response) => {\n        if (response) {\n            logger.groupCollapsed(`View the final response here.`);\n            logger.log(response || '[No response returned]');\n            logger.groupEnd();\n        }\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler\n            .fetchAndCachePut(request)\n            .catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n"],"names":["messages","assert"],"mappings":"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"}